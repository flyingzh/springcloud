package com.htrfid.finance.service.impl;

import java.math.BigDecimal;
import java.util.Collections;
import java.util.List;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Propagation;
import org.springframework.transaction.annotation.Transactional;

import com.htrfid.constant.EnumConstant;
import com.htrfid.exception.MyException;
import com.htrfid.finance.dao.WmTaxRateDao;
import com.htrfid.finance.dao.WmTaxRateItemDao;
import com.htrfid.finance.entity.WmTaxRateEntity;
import com.htrfid.finance.entity.WmTaxRateItemEntity;
import com.htrfid.finance.service.WmPersonalTaxInitService;
import com.htrfid.finance.service.WmTaxRateService;
import com.htrfid.util.Result;

@Service
public class WmTaxRateServiceImpl implements WmTaxRateService {

	private static final Logger logger = LoggerFactory.getLogger(WmTaxRateServiceImpl.class);
	
	@Autowired
	private WmTaxRateDao wmTaxRateDao;
	@Autowired
	private WmTaxRateItemDao wmTaxRateItemDao;
	@Autowired
	private WmPersonalTaxInitService wmPersonalTaxInitService;
	
	/**
	 * 
	 * @Title: listTaxRate   
	 * @Description: 税率列表
	 * @author: zhengfei
	 * @date: 2018年12月5日 上午11:00:27
	 * @param: taxRateEntity
	 * @return: Result      
	 * @throws
	 */
	@Override
	public Result listTaxRate(WmTaxRateEntity taxRateEntity) {
		return Result.ok(wmTaxRateDao.queryListByBean(taxRateEntity));
	}

	/**
	 * 
	 * @Title: queryTaxRate   
	 * @Description: 税率详情
	 * @author: zhengfei
	 * @date: 2018年12月5日 上午11:00:27
	 * @param: taxRateEntity
	 * @return: Result      
	 * @throws
	 */
	@Override
	public Result queryTaxRate(WmTaxRateEntity taxRateEntity) {
		WmTaxRateEntity bean = wmTaxRateDao.queryTaxRateDetail(taxRateEntity);
		List<WmTaxRateItemEntity> itemList = bean.getItemList();
		for(WmTaxRateItemEntity wmTaxRateItemEntity:itemList) {
			wmTaxRateItemEntity.setTaxRate(wmTaxRateItemEntity.getTaxRate().multiply(new BigDecimal("100")));
		}
		return bean==null?Result.error("查询数据出错"):Result.ok(bean);
	}

	/**
	 * 
	 * @Title: deleteTaxRate   
	 * @Description: 删除税率
	 * @author: zhengfei
	 * @date: 2018年12月5日 上午11:00:27
	 * @param: taxRateEntity
	 * @return: Result      
	 * @throws
	 */
	@Transactional(propagation = Propagation.REQUIRED,rollbackFor=Exception.class)
	@Override
	public Result deleteTaxRate(WmTaxRateEntity taxRateEntity) {
		//验证是否被使用设置过税率初始化
		Boolean taxBeUsed = wmPersonalTaxInitService.rateTaxBeUsed(taxRateEntity.getCategoryId(), taxRateEntity.getSobId(), taxRateEntity.getId());
		if(taxBeUsed) {
			return Result.error("该税率已经被使用，无法删除");
		}
		
		int result = wmTaxRateDao.deleteByEntity(taxRateEntity);
		if (result > 0) {
			int b = wmTaxRateItemDao.deleteTaxRateItemById(taxRateEntity.getId());
			if (b > 0) {
				logger.warn("delete taxRate and taxRateItem both success");
			} else {
				logger.warn("delete taxRate success,delete taxRateItem fail");
			}
			return Result.ok(wmTaxRateDao.queryListByBean(taxRateEntity));
		}
		return Result.error("系统异常：操作失败");
	}

	
	
	/**
	 * 
	 * @Title: saveOrUpdate   
	 * @Description: 保存或更新税率
	 * @author: zhengfei
	 * @date: 2018年12月5日 上午11:00:27
	 * @param: taxRateEntity
	 * @return: Result      
	 * @throws
	 */
	@Transactional(propagation = Propagation.REQUIRED,rollbackFor=Exception.class)
	@Override
	public Result saveOrUpdate(WmTaxRateEntity taxRateEntity) {
		List<WmTaxRateItemEntity> itemList = taxRateEntity.getItemList();
		if(itemList == null || itemList.isEmpty()) {
			return Result.error("请输入税率明细设置");
		}
		Collections.sort(itemList);
		Result checkResult = checkValue(itemList);
		if(!EnumConstant.PUBLIC.CODE_YES.getValue().equals(checkResult.getCode())) {
			return checkResult;
		}
		
		if(taxRateEntity.getId()==null||taxRateEntity.getId().intValue() == 0) {
			//新增
			wmTaxRateDao.save(taxRateEntity);
			for (WmTaxRateItemEntity wmTaxRateItemEntity : itemList) {
				wmTaxRateItemEntity.setTaxId(taxRateEntity.getId());
				wmTaxRateItemEntity.setTaxRate(wmTaxRateItemEntity.getTaxRate().divide(new BigDecimal("100")));
			}
			wmTaxRateItemDao.saveBatch(itemList);
			return Result.ok(wmTaxRateDao.queryListByBean(taxRateEntity));
		}else {
			//修改
			int update = wmTaxRateDao.update(taxRateEntity);
			//先删除再新增
			int b = wmTaxRateItemDao.deleteTaxRateItemById(taxRateEntity.getId());
			if(update>0&&b>0) {
				for (WmTaxRateItemEntity wmTaxRateItemEntity : itemList) {
					wmTaxRateItemEntity.setTaxId(taxRateEntity.getId());
					wmTaxRateItemEntity.setTaxRate(wmTaxRateItemEntity.getTaxRate().divide(new BigDecimal("100")));
				}
				int batch = wmTaxRateItemDao.saveBatch(itemList);
				if (batch>0) {
					return Result.ok(wmTaxRateDao.queryListByBean(taxRateEntity));
				}else {
					throw new MyException("更新税率明细失败");
				}
			}else {
				return Result.error("操作失败");
			}
		}
	}

	/**
	 * @Title: checkValue   
	 * @Description: 验证相关
	 * @author: zhengfei
	 * @Email: 936864724@qq.com
	 * @date: 2018年12月7日 上午10:16:37
	 * @param: @param itemList
	 * @param: @return      
	 * @return: Result      
	 * @throws
	 */
	private Result checkValue(List<WmTaxRateItemEntity> itemList) {
		int size = itemList.size();
		if(size==1) {
			WmTaxRateItemEntity wmTaxRateItemEntity = itemList.get(0);
			if((wmTaxRateItemEntity.getFloorAmount() == null || wmTaxRateItemEntity.getFloorAmount().compareTo(BigDecimal.ZERO)<=0)
					&&(wmTaxRateItemEntity.getUpperAmount() == null || wmTaxRateItemEntity.getUpperAmount().compareTo(BigDecimal.ZERO)<=0)
				) {
				return Result.error("税率范围设置有误：上限和下限输入有误");
			}
			if(wmTaxRateItemEntity.getFloorAmount().compareTo(wmTaxRateItemEntity.getUpperAmount())>=0) {
				return Result.error("税率范围设置有误，请核对重试");
			}
			return Result.ok();
		}
		WmTaxRateItemEntity wmTaxRateItemEntity = itemList.get(0);
		if((wmTaxRateItemEntity.getFloorAmount()!=null && wmTaxRateItemEntity.getFloorAmount().compareTo(BigDecimal.ZERO)<0)||
				(wmTaxRateItemEntity.getUpperAmount()!=null && wmTaxRateItemEntity.getUpperAmount().compareTo(BigDecimal.ZERO)<0)) {
			return Result.error("税率范围设置有误：值不能为负");
		}
		if(wmTaxRateItemEntity.getFloorAmount().compareTo(wmTaxRateItemEntity.getUpperAmount())>=0) {
			return Result.error("税率范围设置有误：请核对重试");
		}
		
		WmTaxRateItemEntity endTaxEntity = itemList.get(size-1);
		if((endTaxEntity.getFloorAmount()!=null && endTaxEntity.getFloorAmount().compareTo(BigDecimal.ZERO)<0)||
				(endTaxEntity.getUpperAmount()!=null && endTaxEntity.getUpperAmount().compareTo(BigDecimal.ZERO)<0)) {
			return Result.error("税率范围设置有误：值不能为负");
		}
		if(endTaxEntity.getFloorAmount().compareTo(endTaxEntity.getUpperAmount())>=0) {
			return Result.error("税率范围设置有误：请核对重试");
		}
		
		for(int i = 1;i<size;i++ ) {
			WmTaxRateItemEntity curTax = itemList.get(i);
			WmTaxRateItemEntity preTax = itemList.get(i-1);
			if(curTax.getFloorAmount()==null || curTax.getFloorAmount().compareTo(BigDecimal.ZERO) <= 0
					||curTax.getUpperAmount()==null||curTax.getUpperAmount().compareTo(BigDecimal.ZERO)<=0) {
				return Result.error("税率范围设置有误，请核对重试");
			}
			//当前下限等于上一条上限
			if(curTax.getFloorAmount().compareTo(preTax.getUpperAmount())!=0) {
				return Result.error("税率范围设置有误，请核对重试");
			}
			//判断最后一条数据(无上限)
			if(i!=size-1) {
				if(curTax.getFloorAmount().compareTo(curTax.getUpperAmount())>=0) {
					return Result.error("税率范围设置有误：下限不能大于等于上限");
				}
			}
		}
		
		return Result.ok();
	}

	/**
	 * 
	 * @Title: deleteItem   
	 * @Description: 删除税率明细
	 * @author: zhengfei
	 * @Email: 936864724@qq.com
	 * @date: 2018年12月17日 下午7:24:29
	 * @param itemEntity
	 * @return  
	 * @throws
	 */
	@Override
	public Result deleteItem(WmTaxRateItemEntity itemEntity) {
		int result = wmTaxRateItemDao.deleteByEntity(itemEntity);
		return result>0?Result.ok("操作成功"):Result.error("操作失败");
	}

	
	/**
	 * 
	 * @Title: insertDefRateForCategory   
	 * @Description: 新增工资类别时同时新增该工资类别的 默认税率 默认2018新税率
	 * 位置：classpath:statics/js/finance/Wages/incomeTaxCalc/def_rate.json
	 * @author: zhengfei
	 * @Email: 936864724@qq.com
	 * @date: 2018年12月19日 下午4:53:13
	 * @param taxRateEntity
	 * @return          
	 * @throws
	 */
	@Override
	public Result insertDefRateForCategory(WmTaxRateEntity taxRateEntity,Long  categoryId,Long sobId) {
		List<WmTaxRateItemEntity> itemList = taxRateEntity.getItemList();
		Result checkResult = checkValue(taxRateEntity.getItemList());
		if(!EnumConstant.PUBLIC.CODE_YES.getValue().equals(checkResult.getCode())) {
			return checkResult;
		}
		//新增
		taxRateEntity.setCategoryId(categoryId);
		taxRateEntity.setSobId(sobId);
		wmTaxRateDao.save(taxRateEntity);
		for (WmTaxRateItemEntity wmTaxRateItemEntity : itemList) {
			wmTaxRateItemEntity.setSobId(sobId);
			wmTaxRateItemEntity.setTaxId(taxRateEntity.getId());
			wmTaxRateItemEntity.setTaxRate(wmTaxRateItemEntity.getTaxRate().multiply(new BigDecimal("100")));
		}
		wmTaxRateItemDao.saveBatch(itemList);
		return Result.ok("ok");
	}
	
}
