package com.htrfid.financeapp.service.impl;

import com.alibaba.fastjson.TypeReference;
import com.htrfid.basedata.entity.*;
import com.htrfid.basedata.vo.ItemVO;
import com.htrfid.common.remote.TBaseCurrencyRemoteService;
import com.htrfid.common.remote.TBaseWareHouseRemoteService;
import com.htrfid.constant.EnumConstant;
import com.htrfid.exception.MyException;
import com.htrfid.finance.entity.SystemProfileEntity;
import com.htrfid.finance.vo.FinanceAccountParamVO;
import com.htrfid.finance.vo.SystemProfileEntityVO;
import com.htrfid.finance.vo.VoucherEntryVo;
import com.htrfid.finance.vo.VoucherVO;
import com.htrfid.financeapp.common.Constant;
import com.htrfid.financeapp.common.SystemProfileConstant;
import com.htrfid.financeapp.remote.*;
import com.htrfid.financeapp.service.CashierBalanceService;
import com.htrfid.financeapp.service.CommonService;
import com.htrfid.financeapp.service.SystemProfileService;
import com.htrfid.financeapp.util.ResponseUtil;
import com.htrfid.financeapp.util.Tools;
import com.htrfid.financeapp.vo.ResponseVO;
import com.htrfid.remote.basedata.TBaseCommodityRemoteService;
import com.htrfid.remote.basedata.TBaseVoucherDataRemoteService;
import com.htrfid.remote.sysmanager.EmployeeRemoteService;
import com.htrfid.remote.sysmanager.SysDeptManagerRemoteService;
import com.htrfid.shiro.utils.UserUtils;
import com.htrfid.sysmanager.entity.OrganizationEntity;
import com.htrfid.sysmanager.entity.SysDepartment;
import com.htrfid.sysmanager.entity.SysEmployee;
import com.htrfid.sysmanager.entity.SysUser;
import com.htrfid.util.JsonUtil;
import com.htrfid.util.Result;
import com.htrfid.util.StringUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.math.BigDecimal;
import java.text.SimpleDateFormat;
import java.util.*;

/**
 * @author zhengfei
 * @version V1.0.1
 * @className CommonServiceImpl
 * @email 936864724@qq.com
 * @date 2018-07-27 14:38
 * @description 公共服务类
 * 获取凭证号
 * 根据凭证字id获取凭字详情
 * 获取凭证字列表
 * 获取总账当前会计年度
 * 获取总账当前会计期间
 * 获取总账会计期间开始日期
 * 获取币别列表
 * 获取所有的核算项目
 * 获取出纳当前会计年度
 * 获取出纳当前会计期间
 * 获取本位币id
 * 根据日期获取会计期间和会计年度
 * 根据会计年度，会计期间获取当前期第一天和最后一天
 * 是否允许从总账引入日记账
 * 获取当前组织id，当前组织名称
 **/
@Service
public class CommonServiceImpl implements CommonService {

    private static final Logger LOGGER = LoggerFactory.getLogger(CommonServiceImpl.class);

    /**
     * 币别remoteService
     **/
    @Autowired
    private TBaseCurrencyRemoteService currencyRemoteService;
    /**
     * 系统参数remoteService
     **/
    @Autowired
    private SystemProfileRemoteService systemProfileRemoteService;
    /**
     * 客户remoteService
     **/
    @Autowired
    private TBaseCustomerRemoteService customerRemoteService;
    /**
     * 部门remoteService
     **/
    @Autowired
    private SysDeptManagerRemoteService sysDeptManagerRemoteService;
    /**
     * 供应商remoteService
     **/
    @Autowired
    private TBaseSupplierRemoteService supplierRemoteService;
    /**
     * 仓库 remoteService
     **/
    @Autowired
    private TBaseWareHouseRemoteService warehouseInfoRemoteService;
    /**
     * 解析日期
     */
    @Autowired
    private AccountingRemoteService accountingRemoteService;

    @Autowired
    private TBaseVoucherDataRemoteService voucherDataRemoteService;

    @Autowired
    private VoucherRemoteService voucherRemoteService;

    @Autowired
    private SystemProfileService systemProfileService;

    @Autowired
    CnCashierJournalRemoteService cnCashierJournalRemoteService;
    @Autowired
    private CashierBalanceService cashierBalanceService;
    @Autowired
    private TBaseCurrencyRemoteService tBaseCurrencyRemoteService;
    @Autowired
    private TBaseCommodityRemoteService tBaseCommodityRemoteService;
    @Autowired
    private AssetsClassesRemoteService assetsClassesRemoteService;
    @Autowired
    private EmployeeRemoteService employeeRemoteService;

    /**
     * 获取凭证号
     *
     * @param
     * @return
     * @description:TODO
     * @author tangmi
     * @eamil tangmi6698@163.com
     * @date 2018-08-02 14:17
     */
    @Override
    public Integer getVoucherNum(Long sobId, Long voucherWordId, Integer accountYear, Integer accountPeriod) {
        Result voucher = voucherRemoteService.getSerialNum(sobId, voucherWordId, accountYear, accountPeriod);
        Integer voucherStr = (Integer) voucher.getData();
        if (StringUtils.isEmpty(voucherStr)) {
            //凭证号
            return 1;
        }
        return voucherStr + 1;
    }

    /**
     * 通过凭证字id获取凭证详情
     *
     * @param
     * @return
     * @description:TODO
     * @author tangmi
     * @eamil tangmi6698@163.com
     * @date 2018-08-02 11:18
     */
    @Override
    public TBaseVoucherDataEntity getVoucType(Long id) {
        LOGGER.info("开始根据凭证字id获取凭字信息,凭证id=" + id);
        Result result = voucherDataRemoteService.info(id);
        if (StringUtils.isEmpty(result.getData())) {
            return null;
        }
        TBaseVoucherDataEntity voucherType = ResponseUtil.getResult(result,
                new TypeReference<ResponseVO<TBaseVoucherDataEntity>>() {
                });
        return voucherType;
    }

    /**
     * 获取凭证字列表
     *
     * @return
     * @description:TODO
     * @author tangmi
     * @eamil tangmi6698@163.com
     * @date 2018-07-31 14:16
     */
    @Override
    public List<TBaseVoucherDataEntity> getVoucherTypes() {
        LOGGER.info("开始获取凭证字列表");
        Long sobId = UserUtils.getCurrentUser().getUserCurrentOrganId();
        Result result = voucherDataRemoteService.queryAll(sobId);
        LOGGER.info("获取的凭证字列表信息为{}" + JsonUtil.objToJson(result));
        if (StringUtils.isEmpty(result.getData())) {
            return null;
        }
        List<TBaseVoucherDataEntity> voucherTypeList = ResponseUtil.getResult(result,
                new TypeReference<ResponseVO<List<TBaseVoucherDataEntity>>>() {
                });
        return voucherTypeList;
    }

    /**
     * @param
     * @return List<TBaseCurrencyMaintainEntity>
     * @description: 获取所有币别列表
     * @author zhengfei
     * @eamil 936864724@qq.com
     * @date 2018-07-27 14:46
     */
    @Override
    public List<TBaseCurrencyMaintainEntity> getCurrencyList() throws MyException {
    	SysUser sysUser = UserUtils.getCurrentUser();
        Long sobId = sysUser.getUserCurrentOrganId();
        Result currencyResult = currencyRemoteService.queryAll(Constant.PUBLIC_ZERO,sobId);
        List<TBaseCurrencyMaintainEntity> tBaseCurrencyMaintainList = new ArrayList<>();
        if (currencyResult != null && EnumConstant.PUBLIC.CODE_YES.getValue().equals(currencyResult.getCode())) {
            tBaseCurrencyMaintainList = ResponseUtil.getResult(currencyResult, new TypeReference<ResponseVO<List<TBaseCurrencyMaintainEntity>>>() {
            });
        }
        return tBaseCurrencyMaintainList;
    }


    /**
     * @return java.lang.Integer
     * @description:总账--查询当前会计年度
     * @author zhengfei
     * @eamil 936864724@qq.com
     * @date 2018-06-21 11:25
     */
    @Override
    public Integer getCurrentAccountYear(Long sobId, String currentName) {
        Result ret = systemProfileRemoteService.getSystemProfileValue(currentName, sobId.toString());
        if (ret != null && EnumConstant.PUBLIC.CODE_YES.getValue().equals(ret.getCode())) {
            String currentAccountYearStr = (String) ret.getData();
            return Integer.parseInt(currentAccountYearStr);
        }
        return null;
    }

    /**
     * @param sobId 账套id
     * @return java.lang.Integer
     * @description:总账--获取会计区间
     * @author zhengfei
     * @eamil 936864724@qq.com
     * @date 2018-06-21 11:27
     */
    @Override
    public Integer getCurrentAccountPeriod(Long sobId, String currentName) {
        Result ret = systemProfileRemoteService.getSystemProfileValue(currentName, sobId.toString());
        if (ret != null && EnumConstant.PUBLIC.CODE_YES.getValue().equals(ret.getCode())) {
            String currentAccountPeriodStr = (String) ret.getData();
            return Integer.parseInt(currentAccountPeriodStr);
        }
        return null;
    }

    /**
     * @param sobId 账套id
     * @return java.lang.Integer
     * @description: 总账--获取会计期间开始日期
     * @author zhengfei
     * @eamil 936864724@qq.com
     * @date 2018-06-21 11:27
     */
    @Override
    public String getAccountPeriodStartDate(Long sobId) {
        Result ret = systemProfileRemoteService.getSystemProfileValue(SystemProfileConstant.ACCOUNTING_PERIOD_START_DATE, sobId.toString());
        if (ret != null && EnumConstant.PUBLIC.CODE_YES.getValue().equals(ret.getCode())) {
            return (String) ret.getData();
        }
        return null;
    }

    /**
     * @param sobId
     * @return java.lang.Integer
     * @description: 获取本位币ID
     * @author zhengfei
     * @eamil 936864724@qq.com
     * @date 2018-07-27 14:51
     */
    @Override
    public Long getStandardCurrencyId(Long sobId) {
        Result systemProfileValueResult = systemProfileRemoteService.getSystemProfileValue(SystemProfileConstant.SYS_STANDARD_MONEY_ID, sobId.toString());
        Long standardId = null;
        if (systemProfileValueResult != null && EnumConstant.PUBLIC.CODE_YES.getValue().equals(systemProfileValueResult.getCode())) {
            standardId = Long.valueOf(systemProfileValueResult.getData().toString());
        }
        return standardId;
    }

    /**
     * 获取本位币详情
     *
     * @param
     * @return
     * @description:TODO
     * @author tangmi
     * @eamil tangmi6698@163.com
     * @date 2018-09-29 11:20
     */
    @Override
    public TBaseCurrencyMaintainEntity getStandardCurrency(Long sobId) {
        Long currencyId = getStandardCurrencyId(sobId);
        TBaseCurrencyMaintainEntity tbCMEList = null;
        if (!StringUtils.isEmpty(currencyId)) {
            Result info = tBaseCurrencyRemoteService.info(currencyId);
            if (EnumConstant.PUBLIC.CODE_YES.getValue().equals(info.getCode())) {
                tbCMEList = ResponseUtil.getResult(
                        info, new TypeReference<ResponseVO<TBaseCurrencyMaintainEntity>>() {
                        });
            }
        }
        return tbCMEList;
    }

    /**
     * @return java.lang.Integer
     * @description: 出纳--查询当前会计年度
     * @author zhengfei
     * @eamil 936864724@qq.com
     * @date 2018-06-21 11:25
     */
    @Override
    public Integer getCnCurrentAccountYear(Long sobId) {
        Result ret = systemProfileRemoteService.getSystemProfileValue(SystemProfileConstant.CASHIER_CURRENT_ACCOUNTING_YEAR, sobId.toString());
        if (ret != null && EnumConstant.PUBLIC.CODE_YES.getValue().equals(ret.getCode())) {
            String currentAccountYearStr = (String) ret.getData();
            return Integer.parseInt(currentAccountYearStr);
        }
        return null;
    }

    /**
     * @param sobId 组织id
     * @return java.lang.Integer
     * @description:出纳--获取会计区间
     * @author zhengfei
     * @eamil 936864724@qq.com
     * @date 2018-06-21 11:27
     */
    @Override
    public Integer getCnCurrentAccountPeriod(Long sobId) {
        Result ret = systemProfileRemoteService.getSystemProfileValue(SystemProfileConstant.CASHIER_CURRENT_ACCOUNTING_PERIOD, sobId.toString());
        if (ret != null && EnumConstant.PUBLIC.CODE_YES.getValue().equals(ret.getCode())) {
            String currentAccountPeriodStr = (String) ret.getData();
            return Integer.parseInt(currentAccountPeriodStr);
        }
        return null;
    }

    /**
     * @param sobId
     * @return java.lang.Integer
     * @description:查询出纳启用年度
     * @author zy
     * @eamil zy@htrfid.com
     * @date 2018-09-17 17:37
     */
    @Override
    public Integer getCashierEnabledAccountingYear(Long sobId) {
        Result result = systemProfileRemoteService.getSystemProfileValue(SystemProfileConstant.CASHIER_ENABLED_ACCOUNTING_YEAR, sobId.toString());
        if (result != null && EnumConstant.PUBLIC.CODE_YES.getValue().equals(result.getCode())) {
            String cashierEnabledAccountingYear = (String) result.getData();
            return Integer.parseInt(cashierEnabledAccountingYear);
        }
        return null;
    }

    /**
     * @param sobId
     * @return java.lang.Integer
     * @description:查询出纳启用会计期间
     * @author zy
     * @eamil zy@htrfid.com
     * @date 2018-09-17 17:40
     */
    @Override
    public Integer getCashierEnabledAccountingPeriod(Long sobId) {
        Result result = systemProfileRemoteService.getSystemProfileValue(SystemProfileConstant.CASHIER_ENABLED_ACCOUNTING_PERIOD, sobId.toString());
        if (result != null && EnumConstant.PUBLIC.CODE_YES.getValue().equals(result.getCode())) {
            String cashierEnabledAccountingPeriod = (String) result.getData();
            return Integer.parseInt(cashierEnabledAccountingPeriod);
        }
        return null;
    }


    /**
     * @param
     * @return
     * @description: 获取会计年度列表
     * @author tengteng
     * @eamil ttkj2005@126.com
     * @date 2018-08-06 21:35
     */
    @Override
    public List<Map<String, String>> getPeriodYear(Long sobId) {
        Map<String, Object> yearPeriod = cnCashierJournalRemoteService.getYearPeriod(sobId);
        List<Map<String, String>> resultList = new ArrayList<>();
        Map<String, String> yearMap = new HashMap<>();
        boolean flag = yearPeriod == null || yearPeriod.size() == Constant.PUBLIC_ZERO || (yearPeriod.get("minYear") == null && yearPeriod.get("maxYear") == null);
        if (flag) {
            Integer accountYear = getCnCurrentAccountYear(sobId);
            yearMap.put("name", accountYear + "");
            yearMap.put("value", accountYear + "");
            resultList.add(yearMap);
        } else {
            Integer startYear = Integer.parseInt(yearPeriod.get("minYear").toString());
            Integer endYear = Integer.parseInt(yearPeriod.get("maxYear").toString());
            if (startYear.intValue() == endYear.intValue()) {
                yearMap.put("name", startYear + "");
                yearMap.put("value", startYear + "");
                resultList.add(yearMap);
                return resultList;
            }
            for (int i = startYear.intValue(); i <= endYear.intValue(); i++) {
                yearMap.put("name", i + "");
                yearMap.put("value", i + "");
                resultList.add(yearMap);
            }
        }
        return resultList;
    }

    /**
     * 获取所有的核算项目,里面包含有:<结果集中存放的顺序> 1客户,2部门,3职员,4仓库,5供应商,6商品资料
     *
     * @param sobId 组织id
     * @return Map<String,Object>
     * @description: 获取所有核算项目列表
     * @author zhengfei
     * @eamil 936864724@qq.com
     * @date 2018-07-27 14:56
     */
    @Override
    public Map<String, Object> getProjectList(Long sobId) throws MyException {
        //获取核算项目具体信息
        Map<String, Object> projectEntity = new HashMap<>();

        //客户
        Result allCustomer = customerRemoteService.queryAllCustomer(Constant.ACCOUNT_PROJECT_CUSTOMER.intValue(), sobId, Constant.PUBLIC_ZERO);
        if (allCustomer != null && EnumConstant.PUBLIC.CODE_YES.getValue().equals(allCustomer.getCode())) {
            List<TBaseCustomerEntity> customerList = ResponseUtil.getResult(allCustomer, new TypeReference<ResponseVO<List<TBaseCustomerEntity>>>() {
            });
            if (customerList != null && customerList.size() > Constant.PUBLIC_ZERO) {
                List<Map<String, Object>> p1 = new ArrayList<>();
                for (TBaseCustomerEntity customerEntity : customerList) {
                    Map<String, Object> p11 = new HashMap<>();
                    p11.put("name", customerEntity.getId());
                    p11.put("value", customerEntity.getName());
                    p11.put("code", customerEntity.getCode());
                    p1.add(p11);
                }
                projectEntity.put(Constant.ACCOUNT_PROJECT_CUSTOMER.toString(), p1);
            }
        }
        //部门
        Result bydepAll = sysDeptManagerRemoteService.queryAllLeafNode(sobId);
        if (bydepAll != null && EnumConstant.PUBLIC.CODE_YES.getValue().equals(bydepAll.getCode())) {
            List<SysDepartment> sysDepList = ResponseUtil.getResult(bydepAll, new TypeReference<ResponseVO<List<SysDepartment>>>() {
            });
            if (sysDepList != null && sysDepList.size() > Constant.PUBLIC_ZERO) {
                List<Map<String, Object>> p2 = new ArrayList<>();
                for (SysDepartment sysDepartment : sysDepList) {
                    Map<String, Object> p21 = new HashMap<>();
                    p21.put("name", sysDepartment.getId());
                    p21.put("value", sysDepartment.getDepName());
                    p21.put("code", sysDepartment.getDepCode());
                    p2.add(p21);
                }
                projectEntity.put(Constant.ACCOUNT_PROJECT_DEPARTMENT.toString(), p2);
            }
        }
        //职员
        SysEmployee empl = new SysEmployee();
        empl.setOrgId(sobId);
        Result emps = employeeRemoteService.queryAllEmp(empl);
        if (emps != null && EnumConstant.PUBLIC.CODE_YES.getValue().equals(emps.getCode())) {
            List<SysEmployee> employeeList = ResponseUtil.getResult(emps, new TypeReference<ResponseVO<List<SysEmployee>>>() {
            });
            if (employeeList != null && employeeList.size() > Constant.PUBLIC_ZERO) {
                List<Map<String, Object>> p3 = new ArrayList<>();
                for (SysEmployee employee : employeeList) {
                    Map<String, Object> p31 = new HashMap<>();
                    p31.put("name", employee.getId());
                    p31.put("value", employee.getEmpName());
                    p31.put("code", employee.getEmpCode());
                    p3.add(p31);
                }
                projectEntity.put(Constant.ACCOUNT_PROJECT_EMPLOYEE.toString(), p3);
            }
        }

        //仓库
        Result wareHouseResult = warehouseInfoRemoteService.querySpecificWareHouse(null, null, null);
        if (wareHouseResult != null && EnumConstant.PUBLIC.CODE_YES.getValue().equals(wareHouseResult.getCode())) {
            List<TBaseWarehouseInfoEntity> wareHouseList = ResponseUtil.getResult(wareHouseResult, new TypeReference<ResponseVO<List<TBaseWarehouseInfoEntity>>>() {
            });
            if (wareHouseList != null && wareHouseList.size() > Constant.PUBLIC_ZERO) {
                List<Map<String, Object>> p4 = new ArrayList<>();
                for (TBaseWarehouseInfoEntity warehouseInfoEntity : wareHouseList) {
                    Map<String, Object> p41 = new HashMap<>();
                    p41.put("name", warehouseInfoEntity.getId());
                    p41.put("value", warehouseInfoEntity.getName());
                    p41.put("code", warehouseInfoEntity.getCodes());
                    p4.add(p41);
                }
                projectEntity.put(Constant.ACCOUNT_PROJECT_WAREHOUSE.toString(), p4);
            }
        }
        //有效供应商列表
        Result allSupplier = supplierRemoteService.queryAllSupplier(1, sobId,Constant.PUBLIC_ZERO);
        if (allSupplier != null && EnumConstant.PUBLIC.CODE_YES.getValue().equals(allSupplier.getCode())) {
            List<TBaseSupplierEntity> supplierList = ResponseUtil.getResult(allSupplier, new TypeReference<ResponseVO<List<TBaseSupplierEntity>>>() {
            });
            if (supplierList != null && supplierList.size() > Constant.PUBLIC_ZERO) {
                List<Map<String, Object>> p5 = new ArrayList<>();
                for (TBaseSupplierEntity supplierEntity : supplierList) {
                    Map<String, Object> p51 = new HashMap<>();
                    p51.put("name", supplierEntity.getId());
                    p51.put("value", supplierEntity.getSupplierName());
                    p51.put("code", supplierEntity.getSupplierCode());
                    p5.add(p51);
                }
                projectEntity.put(Constant.ACCOUNT_PROJECT_SUPPLIER.toString(), p5);
            }
        }
        //商品资料
        Result commodity = tBaseCommodityRemoteService.listCommodity(sobId);
        if (commodity != null && EnumConstant.PUBLIC.CODE_YES.getValue().equals(commodity.getCode())) {
            List<TBaseCommodityEntity> commodityList = ResponseUtil.getResult(commodity, new TypeReference<ResponseVO<List<TBaseCommodityEntity>>>() {
            });
            if (commodityList != null && commodityList.size() > Constant.PUBLIC_ZERO) {
                List<Map<String, Object>> p6 = new ArrayList<>();
                for (TBaseCommodityEntity entity : commodityList) {
                    Map<String, Object> p61 = new HashMap<>();
                    p61.put("name", entity.getId());
                    p61.put("value", entity.getName());
                    p61.put("code", entity.getCode());
                    p6.add(p61);
                }
                projectEntity.put(Constant.ACCOUNT_PROJECT_GOODS.toString(), p6);
            }
        }
        return projectEntity;
    }

    /**
     * key值 accountYear  会计年度
     * key值 accountPeriod 会计期间
     *
     * @param
     * @return
     * @description: 根据日期获取会计期间和会计年度
     * @author tangmi
     * @eamil tangmi6698@163.com
     * @date 2018-07-31 13:31
     */
    @Override
    public Map<String, Integer> getAccountingYearAndPeriod(String dateTime, Long sobId) {
        LOGGER.info("开始解析日期{}" + dateTime);
        Result accountingYearAndPeriod = accountingRemoteService.getAccountingYearAndPeriod(dateTime, sobId);
        if (StringUtils.isEmpty(accountingYearAndPeriod.getData())) {
            return null;
        }
        Map<String, Integer> map = (Map) accountingYearAndPeriod.getData();
        LOGGER.info("成功获取到日期所在会计期间和会计年度" + JsonUtil.objToJson(map));
        return map;
    }

    /**
     * @param accountYear, accountPeriod, sobId
     * @return java.util.Map<java.lang.String,java.lang.Object>
     * @description: 根据会计年度，会计期间获取当前期第一天和最后一天
     * @author zhengfei
     * @eamil 936864724@qq.com
     * @date 2018-07-31 13:43
     */
    @Override
    public Map<String, Object> getPeriodDate(Integer accountYear, Integer accountPeriod, Long sobId) {
        Map<String, Object> resultMap = new HashMap<>();
        String startDate = getAccountPeriodStartDate(sobId);
        Calendar calendar = Tools.getCalendar(startDate);
        calendar.set(Calendar.YEAR, accountYear);
        calendar.set(Calendar.MONTH, accountPeriod - 1);
        resultMap.put("startDate", calendar);
        Calendar calendar1 = Tools.getCalendar(startDate);
        calendar1.set(Calendar.YEAR, accountYear);
        calendar1.set(Calendar.MONTH, accountPeriod);
        calendar1.add(Calendar.DAY_OF_MONTH, -1);
        resultMap.put("endDate", calendar1);
        return resultMap;
    }

    /**
     * @param sobId
     * @return java.lang.Boolean
     * @description: 是否允许从总账引入日记账
     * @author zhengfei
     * @eamil 936864724@qq.com
     * @date 2018-07-31 14:22
     */
    @Override
    public Boolean agreeImportCashier(Long sobId) {
        Result ret = systemProfileRemoteService.getSystemProfileValue(SystemProfileConstant.CASHIER_SETTLE_ACCOUNTS_PEQUIRE, sobId.toString());
        if (ret != null && EnumConstant.PUBLIC.CODE_YES.getValue().equals(ret.getCode())) {
            Integer status = Integer.parseInt(ret.getData().toString());
            return status.intValue() == Constant.PUBLIC_ZERO ? false : true;
        }
        return false;
    }


    /**
     * @param
     * @return java.util.Map<java.lang.String,java.lang.Object>
     * @description: 获取当前组织id，当前组织名称
     * @author zhengfei
     * @eamil 936864724@qq.com
     * @date 2018-07-31 18:11
     */
    @Override
    public Map<String, Object> getOrgEntity() {
        Map<String, Object> orgMap = new HashMap<>();
        Long orgId = UserUtils.getCurrentUser().getUserCurrentOrganId();
        orgMap.put("value", orgId);
        List<OrganizationEntity> organizationEntityList = UserUtils.getCurrentUser().getOrganizationEntityList();
        for (OrganizationEntity org : organizationEntityList) {
            if (orgId.equals(org.getId())) {
                orgMap.put("label", org.getOrgName());
                break;
            }
        }
        return orgMap;
    }

    /**
     * 根据会计年度,会计期间 ,sobId 判断该会计期间是否大于等于当前会计期间
     * 返回值为true时 判定输入的会计期间会计年度 小于 系统的当前会计期间会计年度
     *
     * @param
     * @return
     * @description:TODO
     * @author tangmi
     * @eamil tangmi6698@163.com
     * @date 2018-08-03 14:04
     */
    @Override
    public Boolean isDoAudit(Integer accountYear, Integer accountPeriod, Long sobId, Integer system) {
        Map<String, String> systemYearAndPeriodName = getSystemYearAndPeriodName(system);
        //会计年度名称
        String accountY = systemYearAndPeriodName.get("year");
        //会计期间名称
        String accountP = systemYearAndPeriodName.get("period");

        if (StringUtils.isEmpty(accountP) || StringUtils.isEmpty(accountY)) {
            return false;
        }
        //获取system系统当前的会计期间
        Result resultPeriod = systemProfileService.getSystemProfileValue(accountP, sobId);
        String period = (String) resultPeriod.getData();
        int systemPeriod = Integer.parseInt(period);
        LOGGER.info("systemPeriod=" + systemPeriod);
        //获取system系统当前的会计年度
        Result resultYear = systemProfileService.getSystemProfileValue(accountY, sobId);
        String year = (String) resultYear.getData();
        int systemYear = Integer.parseInt(year);
        LOGGER.info("systemYear=" + systemYear);
        Boolean flag = true;
        //1.单据的会计年度  = 系统会计年度 时 判断单据会计期间应大于等于系统会计期间
        //2.单据的会计年度 > 系统会计年度 时  不需要判断会计期间
        if (accountYear.intValue() == systemYear) {
            if (accountPeriod >= systemPeriod) {
                flag = false;
            }
        } else if (accountYear.intValue() > systemYear) {
            flag = false;
        }
        return flag;
    }

    /**
     * @param sobId
     * @return java.util.Map<java.lang.String,java.lang.Object>
     * @description: 获取核算项目
     * @author zhengfei
     * @eamil 936864724@qq.com
     * @date 2018-08-03 13:56
     */
    @Override
    public Map<String, Object> getNewDetailProjectList(Long sobId) throws MyException {
        //核算项目客户列表
        List<TBaseCustomerEntity> customerList = null;
        //核算项目部门列表
        List<SysDepartment> sysDepList = null;
        //核算项目职员列表
        List<SysEmployee> employeeList = null;
        //核算项目供应商
        List<TBaseSupplierEntity> supplierList = null;
        //核算项目仓库
        List<TBaseWarehouseInfoEntity> wareHouseList = null;
        //获取核算项目具体信息
        Map<String, Object> projectEntity = new HashMap<>();
        //客户
        Result allCustomer = customerRemoteService.queryAllCustomer(Constant.ACCOUNT_PROJECT_CUSTOMER.intValue(), sobId, Constant.PUBLIC_ZERO);
        if (allCustomer != null && EnumConstant.PUBLIC.CODE_YES.getValue().equals(allCustomer.getCode())) {
            customerList = ResponseUtil.getResult(allCustomer, new TypeReference<ResponseVO<List<TBaseCustomerEntity>>>() {
            });
            if (customerList != null && customerList.size() > Constant.PUBLIC_ZERO) {
                Map<String, Object> p1 = new HashMap<>();
                p1.put("label", "客户");
                Map<String, Object> p11 = new HashMap<>();
                for (TBaseCustomerEntity customerEntity : customerList) {
                    Map<String, Object> p = new HashMap<>();
                    p.put("id", customerEntity.getId());
                    p.put("name", customerEntity.getName());
                    p.put("code", customerEntity.getCode());
                    p11.put(customerEntity.getId() + "", p);
                }
                p1.put("list", p11);
                projectEntity.put(Constant.ACCOUNT_PROJECT_CUSTOMER.toString(), p1);
            }
        }
        //部门
        Result bydepAll = sysDeptManagerRemoteService.queryAllLeafNode(sobId);
        if (bydepAll != null && EnumConstant.PUBLIC.CODE_YES.getValue().equals(bydepAll.getCode())) {
            sysDepList = ResponseUtil.getResult(bydepAll, new TypeReference<ResponseVO<List<SysDepartment>>>() {
            });
            if (sysDepList != null && sysDepList.size() >  Constant.PUBLIC_ZERO) {
                Map<String, Object> p2 = new HashMap<>();
                p2.put("label", "部门");
                Map<String, Object> p21 = new HashMap<>();
                for (SysDepartment sysDepartment : sysDepList) {
                    Map<String, Object> p = new HashMap<>();
                    p.put("id", sysDepartment.getId());
                    p.put("name", sysDepartment.getDepName());
                    p.put("code", sysDepartment.getDepCode());
                    p21.put(sysDepartment.getId() + "", p);
                }
                p2.put("list", p21);
                projectEntity.put(Constant.ACCOUNT_PROJECT_DEPARTMENT.toString(), p2);
            }
        }
        //职员
        SysEmployee empl = new SysEmployee();
        empl.setOrgId(sobId);
        Result emps = employeeRemoteService.queryAllEmp(empl);
        if (emps != null && EnumConstant.PUBLIC.CODE_YES.getValue().equals(emps.getCode())) {
            employeeList = ResponseUtil.getResult(emps, new TypeReference<ResponseVO<List<SysEmployee>>>() {
            });
            if (employeeList != null && employeeList.size() > Constant.PUBLIC_ZERO) {
                Map<String, Object> p3 = new HashMap<>();
                p3.put("label", "职员");
                Map<String, Object> p31 = new HashMap<>();
                for (SysEmployee employee : employeeList) {
                    Map<String, Object> p = new HashMap<>();
                    p.put("id", employee.getId());
                    p.put("name", employee.getEmpName());
                    p.put("code", employee.getEmpCode());
                    p31.put(employee.getId() + "", p);
                }
                p3.put("list", p31);
                projectEntity.put(Constant.ACCOUNT_PROJECT_EMPLOYEE.toString(), p3);
            }
        }

        //仓库
        Result wareHouseResult = warehouseInfoRemoteService.querySpecificWareHouse(null, null, null);
        if (wareHouseResult != null && EnumConstant.PUBLIC.CODE_YES.getValue().equals(wareHouseResult.getCode())) {
            wareHouseList = ResponseUtil.getResult(wareHouseResult, new TypeReference<ResponseVO<List<TBaseWarehouseInfoEntity>>>() {
            });
            if (wareHouseList != null && wareHouseList.size() > Constant.PUBLIC_ZERO) {
                Map<String, Object> p4 = new HashMap<>();
                p4.put("label", "仓库");
                Map<String, Object> p41 = new HashMap<>();
                for (TBaseWarehouseInfoEntity warehouseInfoEntity : wareHouseList) {
                    Map<String, Object> p = new HashMap<>();
                    p.put("id", warehouseInfoEntity.getId());
                    p.put("name", warehouseInfoEntity.getName());
                    p.put("code", warehouseInfoEntity.getCodes());
                    p41.put(warehouseInfoEntity.getId() + "", p);
                }
                p4.put("list", p41);
                projectEntity.put(Constant.ACCOUNT_PROJECT_WAREHOUSE.toString(), p4);
            }
        }

        //有效供应商列表
        Result allSupplier = supplierRemoteService.queryAllSupplier(1, sobId,Constant.PUBLIC_ZERO);
        if (allSupplier != null && EnumConstant.PUBLIC.CODE_YES.getValue().equals(allSupplier.getCode())) {
            supplierList = ResponseUtil.getResult(allSupplier, new TypeReference<ResponseVO<List<TBaseSupplierEntity>>>() {
            });
            if (supplierList != null && supplierList.size() > Constant.PUBLIC_ZERO) {
                Map<String, Object> p5 = new HashMap<>();
                p5.put("label", "供应商");
                Map<String, Object> p51 = new HashMap<>();
                for (TBaseSupplierEntity supplierEntity : supplierList) {
                    Map<String, Object> p = new HashMap<>();
                    p.put("id", supplierEntity.getId());
                    p.put("name", supplierEntity.getSupplierName());
                    p.put("code", supplierEntity.getSupplierCode());
                    p51.put(supplierEntity.getId() + "", p);
                }
                p5.put("list", p51);
                projectEntity.put(Constant.ACCOUNT_PROJECT_SUPPLIER.toString(), p5);
            }
        }
        //商品资料
        Result commodity = tBaseCommodityRemoteService.listCommodity(sobId);
        if (commodity != null && EnumConstant.PUBLIC.CODE_YES.getValue().equals(commodity.getCode())) {
            List<TBaseCommodityEntity> commodityList = ResponseUtil.getResult(commodity, new TypeReference<ResponseVO<List<TBaseCommodityEntity>>>() {
            });
            if (commodityList != null && commodityList.size() > Constant.PUBLIC_ZERO) {
                Map<String, Object> p6 = new HashMap<>();
                p6.put("label", "商品资料");
                Map<String, Object> p61 = new HashMap<>();
                for (TBaseCommodityEntity entity : commodityList) {
                    Map<String, Object> p = new HashMap<>();
                    p.put("id", entity.getId());
                    p.put("name", entity.getName());
                    p.put("code", entity.getCode());
                    p61.put(entity.getId() + "", p);
                }
                p6.put("list", p61);
                projectEntity.put(Constant.ACCOUNT_PROJECT_GOODS.toString(), p6);
            }
        }
        return projectEntity;
    }

    /**
     * 将数据根据会计期间和会计年度合并操作
     */
    @Override
    public List<VoucherVO> getVoucherVoMerge(List<VoucherVO> voucherVOS) {
        //声明map集合
        Map<String, VoucherVO> map = new HashMap<String, VoucherVO>();
        for (VoucherVO vo : voucherVOS) {
            String key = vo.getEntity().getAccountingPeriod() + ";" + vo.getEntity().getAccountingYear();
            //判断如果key已经存在则合并数据 借贷方金额合计累计, 分录存入分录集合
            if (map.containsKey(key)) {
                VoucherVO voucherVO = map.get(key);
                //借方累计
                BigDecimal creditTotal = vo.getEntity().getCreditTotal().add(voucherVO.getEntity().getCreditTotal());
                //贷方累计
                BigDecimal debitTotal = vo.getEntity().getDebitTotal().add(voucherVO.getEntity().getDebitTotal());
                //重新设置借贷方向累计金额
                voucherVO.getEntity().setCreditTotal(creditTotal);
                voucherVO.getEntity().setDebitTotal(debitTotal);
                for (VoucherEntryVo voucherEntryVo : vo.getEntryVoList()) {
                    //将数据归并到一个集合中
                    voucherVO.getEntryVoList().add(voucherEntryVo);
                }
                for (Long id : vo.getReceiptId()) {
                    voucherVO.getReceiptId().add(id);
                }
                map.put(key, voucherVO);
            } else {
                map.put(key, vo);
            }
        }
        List<VoucherVO> result = new ArrayList<VoucherVO>();
        for (Map.Entry<String, VoucherVO> entry : map.entrySet()) {
            result.add(entry.getValue());
        }
        return result;
    }

    /**
     * @param subjectId, cashierIsCash, cashierStatusYes, sobId
     * @return java.util.List<com.htrfid.basedata.entity.TBaseCurrencyMaintainEntity>
     * @description: 获取出纳初始化 科目对应币别列表
     * @author zhengfei
     * @eamil 936864724@qq.com
     * @date 2018-08-16 9:45
     */
    @Override
    public List<TBaseCurrencyMaintainEntity> getInitCurrencyList(Long subjectId, Integer cashierIsCash, Integer cashierStatusYes, Long sobId) {
        List<TBaseCurrencyMaintainEntity> list = new ArrayList<>();
        List<Map<String, Object>> cnCurrencyList = cashierBalanceService.initCnCurrency(subjectId, cashierIsCash, cashierStatusYes, sobId);
        if (cnCurrencyList == null || cnCurrencyList.isEmpty()) {
            return list;
        }
        for (Map<String, Object> map : cnCurrencyList) {
            TBaseCurrencyMaintainEntity entity = new TBaseCurrencyMaintainEntity();
            entity.setId(Long.valueOf(map.get("currencyId").toString()));
            entity.setCurrencyName(map.get("currencyName").toString());
            entity.setCodes(map.get("currencyCode").toString());
            entity.setExchangeRate(new BigDecimal(map.get("exchangeRate").toString()));
            list.add(entity);
        }
        return list;
    }

    /**
     * 返回 值为true 时 则启用会计期间和当前会计期间为同一个期间
     *
     * @param namePeriod    启用会计期间
     * @param nameYear      启用会计年度
     * @param namePeriodCur 当前会计期间
     * @param nameYearCur   当前会计年度
     * @param sobId         账套id
     * @return
     * @description:TODO
     * @author tangmi
     * @eamil tangmi6698@163.com
     * @date 2018-08-22 10:12
     */
    @Override
    public Boolean inverseInitialization(String nameYear, String namePeriod, String nameYearCur, String namePeriodCur, Long sobId) {
        //获取启用会计年度
        Result systemProfileYear = systemProfileRemoteService.getSystemProfileValue(
                nameYear, sobId.toString());
        String generalLedgerYear = "";
        if (systemProfileYear != null && EnumConstant.PUBLIC.CODE_YES.getValue().equals(systemProfileYear.getCode())) {
            generalLedgerYear = (String) systemProfileYear.getData();
        }
        //获取启用会计期间
        Result systemProfilePeriod = systemProfileRemoteService.getSystemProfileValue(
                namePeriod, sobId.toString());
        String generalLedgerPeriod = "";
        if (systemProfilePeriod != null && EnumConstant.PUBLIC.CODE_YES.getValue().equals(systemProfilePeriod.getCode())) {
            generalLedgerPeriod = (String) systemProfilePeriod.getData();
        }

        //获取系统当前会计年度
        Result systemProfileYearCur = systemProfileRemoteService.getSystemProfileValue(nameYearCur, sobId.toString());
        String generalLedgerYearCur = "";
        if (systemProfileYearCur != null && EnumConstant.PUBLIC.CODE_YES.getValue().equals(systemProfileYearCur.getCode())) {
            generalLedgerYearCur = (String) systemProfileYearCur.getData();
        }
        //获取系统当前会计期间
        Result systemProfilePeriodCur = systemProfileRemoteService.getSystemProfileValue(namePeriodCur, sobId.toString());
        String generalLedgerPeriodCur = "";
        if (systemProfilePeriodCur != null && EnumConstant.PUBLIC.CODE_YES.getValue().equals(systemProfilePeriodCur.getCode())) {
            String currentAccountYearStr = (String) systemProfilePeriodCur.getData();
            generalLedgerPeriodCur = currentAccountYearStr;
        }
        Boolean flag = StringUtils.isEmpty(generalLedgerYear) || StringUtils.isEmpty(systemProfilePeriod) || StringUtils.isEmpty(generalLedgerYearCur) || StringUtils.isEmpty(generalLedgerPeriodCur);

        if (flag) {
            return !flag;
        }

        if (generalLedgerPeriod.equals(generalLedgerPeriodCur) && generalLedgerYear.equals(generalLedgerYearCur)) {
            flag = true;
        } else {
            flag = false;
        }
        return flag;
    }

    @Override
    public List<ItemVO> getItemVOs(Long itemClass, Long sobId) {
        List<ItemVO> itemVOS = new ArrayList<>();
        if (Constant.ACCOUNT_PROJECT_CUSTOMER.equals(itemClass)) {
            //核算项目为客户类别
            Result allCustomer = customerRemoteService.queryAllCustomer(Constant.ACCOUNT_PROJECT_CUSTOMER.intValue(), sobId, Constant.PUBLIC_ZERO);
            if (allCustomer != null && EnumConstant.PUBLIC.CODE_YES.getValue().equals(allCustomer.getCode())) {
                List<TBaseCustomerEntity> customerList = ResponseUtil.getResult(allCustomer, new TypeReference<ResponseVO<List<TBaseCustomerEntity>>>() {
                });
                if (customerList != null && customerList.size() > Constant.PUBLIC_ZERO) {
                    for (TBaseCustomerEntity customerEntity : customerList) {
                        ItemVO itemVo = new ItemVO();
                        //核算项目类别id
                        itemVo.setItemClass(Constant.ACCOUNT_PROJECT_CUSTOMER);
                        //核算项目类别的名称
                        itemVo.setItemClassName("客户");
                        //具体的详情的id
                        itemVo.setItemId(customerEntity.getId());
                        //具体的详情的编码
                        itemVo.setItemCode(customerEntity.getCode());
                        //具体的详情的名称
                        itemVo.setItemName(customerEntity.getName());
                        //组织id
                        itemVo.setOrganizationId(sobId);
                        itemVo.setIsDel(customerEntity.getIsDel());
                        itemVOS.add(itemVo);
                    }
                }
            }
        } else if (Constant.ACCOUNT_PROJECT_DEPARTMENT.equals(itemClass)) {
            //核算项目为部门类别
            Result bydepAll = sysDeptManagerRemoteService.queryAllLeafNode(sobId);
            if (bydepAll != null && EnumConstant.PUBLIC.CODE_YES.getValue().equals(bydepAll.getCode())) {
                List<SysDepartment> sysDepList = ResponseUtil.getResult(bydepAll, new TypeReference<ResponseVO<List<SysDepartment>>>() {
                });
                if (sysDepList != null && sysDepList.size() > Constant.PUBLIC_ZERO) {
                    for (SysDepartment sysDepartment : sysDepList) {
                        ItemVO itemVo = new ItemVO();
                        //核算项目类别id
                        itemVo.setItemClass(Constant.ACCOUNT_PROJECT_DEPARTMENT);
                        //核算项目类别的名称
                        itemVo.setItemClassName("部门");
                        //具体的详情的id
                        itemVo.setItemId(sysDepartment.getId());
                        //具体的详情的编码
                        itemVo.setItemCode(sysDepartment.getDepCode());
                        //具体的详情的名称
                        itemVo.setItemName(sysDepartment.getDepName());
                        //组织id
                        itemVo.setOrganizationId(sobId);
                        //
                        itemVo.setIsDel(sysDepartment.getDepStatus());
                        itemVOS.add(itemVo);
                    }
                }
            }
        } else if (Constant.ACCOUNT_PROJECT_EMPLOYEE.equals(itemClass)) {
            //核算项目为职员类别
            SysEmployee empl = new SysEmployee();
            empl.setOrgId(sobId);
            Result emps = employeeRemoteService.queryAllEmp(empl);
            if (emps != null && EnumConstant.PUBLIC.CODE_YES.getValue().equals(emps.getCode())) {
                List<SysEmployee> employeeList = ResponseUtil.getResult(emps, new TypeReference<ResponseVO<List<SysEmployee>>>() {
                });
                if (employeeList != null && employeeList.size() > Constant.PUBLIC_ZERO) {
                    for (SysEmployee employee : employeeList) {
                        ItemVO itemVo = new ItemVO();
                        //核算项目类别id
                        itemVo.setItemClass(Constant.ACCOUNT_PROJECT_EMPLOYEE);
                        //核算项目类别的名称
                        itemVo.setItemClassName("职员");
                        //具体的详情的id
                        itemVo.setItemId(employee.getId());
                        //具体的详情的编码
                        itemVo.setItemCode(employee.getEmpCode());
                        //具体的详情的名称
                        itemVo.setItemName(employee.getEmpName());
                        //组织id
                        itemVo.setOrganizationId(sobId);
                        //是否删除
                        itemVo.setIsDel(employee.getEmpStatus());
                        itemVOS.add(itemVo);
                    }
                }
            }
        } else if (Constant.ACCOUNT_PROJECT_WAREHOUSE.equals(itemClass)) {
            //核算项目为仓库类别
            Result wareHouseResult = warehouseInfoRemoteService.querySpecificWareHouse(null, null, null);
            if (wareHouseResult != null && EnumConstant.PUBLIC.CODE_YES.getValue().equals(wareHouseResult.getCode())) {
                List<TBaseWarehouseInfoEntity> wareHouseList = ResponseUtil.getResult(wareHouseResult, new TypeReference<ResponseVO<List<TBaseWarehouseInfoEntity>>>() {
                });
                if (wareHouseList != null && wareHouseList.size() > Constant.PUBLIC_ZERO) {
                    for (TBaseWarehouseInfoEntity warehouseInfoEntity : wareHouseList) {
                        ItemVO itemVo = new ItemVO();
                        //核算项目类别id
                        itemVo.setItemClass(Constant.ACCOUNT_PROJECT_WAREHOUSE);
                        //核算项目类别的名称
                        itemVo.setItemClassName("仓库");
                        //具体的详情的id
                        itemVo.setItemId(warehouseInfoEntity.getId());
                        //具体的详情的编码
                        itemVo.setItemCode(warehouseInfoEntity.getCodes());
                        //具体的详情的名称
                        itemVo.setItemName(warehouseInfoEntity.getName());
                        //组织id
                        itemVo.setOrganizationId(sobId);
                        //是否删除
                        itemVo.setIsDel(warehouseInfoEntity.getIsDel());
                        itemVOS.add(itemVo);
                    }
                }
            }
        } else if (Constant.ACCOUNT_PROJECT_SUPPLIER.equals(itemClass)) {
            //核算项目为供应商类别
            //有效供应商列表
            Result allSupplier = supplierRemoteService.queryAllSupplier(1, sobId,Constant.PUBLIC_ZERO);
            if (allSupplier != null && EnumConstant.PUBLIC.CODE_YES.getValue().equals(allSupplier.getCode())) {
                List<TBaseSupplierEntity> supplierList = ResponseUtil.getResult(allSupplier, new TypeReference<ResponseVO<List<TBaseSupplierEntity>>>() {
                });
                if (supplierList != null && supplierList.size() > Constant.PUBLIC_ZERO) {
                    for (TBaseSupplierEntity supplierEntity : supplierList) {
                        ItemVO itemVo = new ItemVO();
                        //核算项目类别id
                        itemVo.setItemClass(Constant.ACCOUNT_PROJECT_SUPPLIER);
                        //核算项目类别的名称
                        itemVo.setItemClassName("供应商");
                        //具体的详情的id
                        itemVo.setItemId(supplierEntity.getId());
                        //具体的详情的编码
                        itemVo.setItemCode(supplierEntity.getSupplierCode());
                        //具体的详情的名称
                        itemVo.setItemName(supplierEntity.getSupplierName());
                        //组织id
                        itemVo.setOrganizationId(sobId);
                        //是否删除
                        itemVo.setIsDel(supplierEntity.getIsDel());
                        itemVOS.add(itemVo);
                    }
                }
            }
        } else if (Constant.ACCOUNT_PROJECT_GOODS.equals(itemClass)) {
            Result commodity = tBaseCommodityRemoteService.listCommodity(sobId);
            if (commodity != null && EnumConstant.PUBLIC.CODE_YES.getValue().equals(commodity.getCode())) {
                List<TBaseCommodityEntity> supplierList = ResponseUtil.getResult(commodity, new TypeReference<ResponseVO<List<TBaseCommodityEntity>>>() {
                });
                if (supplierList != null && supplierList.size() > Constant.PUBLIC_ZERO) {
                    for (TBaseCommodityEntity supplierEntity : supplierList) {
                        ItemVO itemVo = new ItemVO();
                        //核算项目类别id
                        itemVo.setItemClass(Constant.ACCOUNT_PROJECT_SUPPLIER);
                        //核算项目类别的名称
                        itemVo.setItemClassName("商品资料");
                        //具体的详情的id
                        itemVo.setItemId(supplierEntity.getId());
                        //具体的详情的编码
                        itemVo.setItemCode(supplierEntity.getCode());
                        //具体的详情的名称
                        itemVo.setItemName(supplierEntity.getName());
                        //组织id
                        itemVo.setOrganizationId(sobId);
                        //是否删除
                        itemVo.setIsDel(supplierEntity.getIsDel());
                        itemVOS.add(itemVo);
                    }
                }
            }
        }
        return itemVOS;
    }

    /**
     * 获取总账系统启用年度 到当前年集合
     */
    @Override
    public Map<String, List<Integer>> getYears(Long sobId, String enableName, String currentlyName) {
        //获取指定系统的起始会计年度
        Result enableSystemProfileYear = systemProfileRemoteService.getSystemProfileValue(
                enableName, sobId.toString());
        int enableGeneralLedgerYear = Constant.PUBLIC_ZERO;
        if (enableSystemProfileYear != null && EnumConstant.PUBLIC.CODE_YES.getValue().equals(enableSystemProfileYear.getCode())) {
            enableGeneralLedgerYear = Integer.parseInt((String) enableSystemProfileYear.getData());
        }
        //获取当前系统的会计年度
        Result currentlySystemProfileYear = systemProfileRemoteService.getSystemProfileValue(
                currentlyName, sobId.toString());
        int currentlyGeneralLedgerYear = Constant.PUBLIC_ZERO;
        if (currentlySystemProfileYear != null && EnumConstant.PUBLIC.CODE_YES.getValue().equals(currentlySystemProfileYear.getCode())) {
            currentlyGeneralLedgerYear = Integer.parseInt((String) currentlySystemProfileYear.getData());
        }
        List<Integer> newYears = new ArrayList<>();
        List<Integer> newPeriod = new ArrayList<>();
        Map<String, List<Integer>> map = new HashMap<>(2);
        if (enableGeneralLedgerYear != Constant.PUBLIC_ZERO) {

            for (; currentlyGeneralLedgerYear >= enableGeneralLedgerYear; currentlyGeneralLedgerYear--) {
                newYears.add(currentlyGeneralLedgerYear);
            }
            for (int i = 1; i < 13; i++) {
                newPeriod.add(i);
            }
            map.put("year", newYears);
            map.put("period", newPeriod);
        }
        return map;
    }


    /**
     * 将两个会计期间转换为起始时间和结束时间  map长度为1 时 则封装为异常信息
     *
     * @param
     * @return
     * @description:TODO
     * @author tangmi
     * @eamil tangmi6698@163.com
     * @date 2018-08-25 16:47
     */
    @Override
    public Map<String, String> getEndAndStartTime(int startYear, int startPeriod, int endYear, int endPeriod, Long sobId) {
        Map<String, String> map = new HashMap<>();
        if (startYear == endYear) {
            if (startPeriod > endPeriod) {
                map.put("log", "相同年度下起始期间不能大于结束期间");
                return map;
            }
        } else if (startYear > endYear) {
            map.put("log", "起始年度不能大于结束年度");
            return map;
        }
        //获取启用会计年度
        Result systemProfileYear = systemProfileRemoteService.getSystemProfileValue(
                SystemProfileConstant.FINANCE_ENABLED_ACCOUNTING_YEAR, sobId.toString());
        Integer generalLedgerYear = null;
        if (systemProfileYear != null && EnumConstant.PUBLIC.CODE_YES.getValue().equals(systemProfileYear.getCode())) {
            generalLedgerYear = Integer.parseInt((String) systemProfileYear.getData());
        }
        //获取启用会计期间
        Result systemProfilePeriod = systemProfileRemoteService.getSystemProfileValue(
                SystemProfileConstant.FINANCE_ENABLED_ACCOUNTING_PERIOD, sobId.toString());
        Integer generalLedgerPeriod = null;
        if (systemProfilePeriod != null && EnumConstant.PUBLIC.CODE_YES.getValue().equals(systemProfilePeriod.getCode())) {
            generalLedgerPeriod = Integer.parseInt((String) systemProfilePeriod.getData());
        }
        if (startYear < generalLedgerPeriod) {
            map.put("log", "选择的会计年度必须大于等于系统的起始会计年度");
            return map;
        }
        if (startYear == generalLedgerYear) {
            if (startPeriod < generalLedgerPeriod) {
                map.put("log", "相同年度,选择的会计期间必须大于等于系统的起始会计期间");
                return map;
            }
        }
        Map<String, Object> periodDate1 = getPeriodDate(startYear, startPeriod, sobId);
        Map<String, Object> periodDate2 = getPeriodDate(endYear, endPeriod, sobId);
        Calendar startDate = (Calendar) periodDate1.get("startDate");
        Calendar endDate = (Calendar) periodDate2.get("endDate");
        SimpleDateFormat format = new SimpleDateFormat("yyyy-MM-dd");
        String startTime = format.format(startDate.getTime());
        String endTime = format.format(endDate.getTime());
        //获取结束会计年度的第一天
        String start = startTime.substring(7);
        String firstDayOfTheFiscalYear = endYear + "-" + "01" + start;
        map.put("firstDayOfTheFiscalYear", firstDayOfTheFiscalYear);
        map.put("startTime", startTime);
        map.put("endTime", endTime);
        return map;
    }


    /**
     * @param sobId
     * @return java.util.Map<java.lang.String,java.lang.Integer>
     * @description: 获取出纳起始启用会计年度起始启用会计期间
     * @author zhengfei
     * @eamil 936864724@qq.com
     * @date 2018-08-31 9:47
     */
    @Override
    public Map<String, Integer> getCnStartYearAndPeriod(Long sobId) {
        Map<String, Integer> map = new HashMap<>(2);
        //获取启用会计年度
        Result systemProfileYear = systemProfileRemoteService.getSystemProfileValue(
                SystemProfileConstant.FINANCE_ENABLED_ACCOUNTING_YEAR, sobId.toString());
        Integer generalLedgerYear = null;
        if (systemProfileYear != null && EnumConstant.PUBLIC.CODE_YES.getValue().equals(systemProfileYear.getCode())) {
            generalLedgerYear = Integer.parseInt((String) systemProfileYear.getData());
        }
        //获取启用会计期间
        Result systemProfilePeriod = systemProfileRemoteService.getSystemProfileValue(
                SystemProfileConstant.FINANCE_ENABLED_ACCOUNTING_PERIOD, sobId.toString());
        Integer generalLedgerPeriod = null;
        if (systemProfilePeriod != null && EnumConstant.PUBLIC.CODE_YES.getValue().equals(systemProfilePeriod.getCode())) {
            generalLedgerPeriod = Integer.parseInt((String) systemProfilePeriod.getData());
        }
        map.put("generalLedgerYear", generalLedgerYear);
        map.put("generalLedgerPeriod", generalLedgerPeriod);
        return map;
    }

    /**
     * 判断总账是否启用 true 已经初始化  false 未初始化
     *
     * @param sobId
     * @return
     * @description:TODO
     * @author tangmi
     * @eamil tangmi6698@163.com
     * @date 2018-08-22 8:55
     */
    @Override
    public Boolean isEnabled(Long sobId) {
        Result ret = systemProfileRemoteService.getSystemProfileValue(SystemProfileConstant.FINANCE_INITIALIZED_STATE, sobId.toString());
        String system = "";
        Boolean flag = false;
        if (ret != null && EnumConstant.PUBLIC.CODE_YES.getValue().equals(ret.getCode())) {
            String currentAccountYearStr = (String) ret.getData();
            system = currentAccountYearStr;
        }
        //判断总账是否已经初始化
        if (StringUtils.isEmpty(system)) {
            flag = true;
        }
        if ((Constant.PUBLIC_AVAILABLE_YES.toString()).equals(system)) {
            flag = true;
        }
        return flag;
    }

    @Override
    public Boolean sysIsEnabled(int sysType, Long sobId) {
        //需要校验的系统
        String sysInitState = null;
        switch (sysType) {
            case Constant.SYS_FINANCE:
                //总账系统
                sysInitState = SystemProfileConstant.FINANCE_INITIALIZED_STATE;
                break;
            case Constant.SYS_RP:
                //应收应付系统
                sysInitState = SystemProfileConstant.RP_INITIALIZED_STATE;
                break;
            case Constant.SYS_CN:
                //出纳系统
                sysInitState = SystemProfileConstant.CASHIER_INITIALIZED_STATE;
                break;
            case Constant.SYS_FA:
                //固定资产系统
                sysInitState = SystemProfileConstant.FIXEDASSETS_INITIALIZED_STATE;
                break;
            case Constant.SYS_SALARY:
                //工资系统
                sysInitState = SystemProfileConstant.SALARY_INITIALIZED_STATE;
                break;
            default:
                break;
        }

        if (!StringUtils.isEmpty(sysInitState)) {
            Result stateResult = systemProfileRemoteService.getSystemProfileValue(sysInitState, sobId.toString());
            if (stateResult != null && EnumConstant.PUBLIC.CODE_YES.getValue().equals(stateResult.getCode())) {
                Integer sysState = Integer.parseInt((String) stateResult.getData());
                return Constant.PUBLIC_AVAILABLE_YES.equals(sysState) ? true : false;
            }
        }
        return false;
    }

    private Map<String, String> getSystemYearAndPeriodName(Integer system) {
        Map<String, String> map = new HashMap<>(4);
        //会计年度名称
        String accountY = "";
        //会计期间名称
        String accountP = "";
        //启用会计期间名称
        String startP = "";
        //启用会计年度名称
        String startY = "";
        switch (system) {
            //总账当前会计年度会计年度获取的名称
            case 1:
                accountY = SystemProfileConstant.FINANCE_CURRENT_ACCOUNTING_YEAR;
                accountP = SystemProfileConstant.FINANCE_CURRENT_ACCOUNTING_PERIOD;
                startY = SystemProfileConstant.FINANCE_ENABLED_ACCOUNTING_YEAR;
                startP = SystemProfileConstant.FINANCE_ENABLED_ACCOUNTING_PERIOD;
                break;
            //应收应付
            case 2:
                accountY = SystemProfileConstant.RP_CURRENT_ACCOUNTING_YEAR;
                accountP = SystemProfileConstant.RP_CURRENT_ACCOUNTING_PERIOD;
                startY = SystemProfileConstant.RP_ENABLED_ACCOUNTING_YEAR;
                startP = SystemProfileConstant.RP_ENABLED_ACCOUNTING_PERIOD;
                break;
            //出纳
            case 3:
                accountY = SystemProfileConstant.CASHIER_CURRENT_ACCOUNTING_YEAR;
                accountP = SystemProfileConstant.CASHIER_CURRENT_ACCOUNTING_PERIOD;
                startY = SystemProfileConstant.CASHIER_ENABLED_ACCOUNTING_YEAR;
                startP = SystemProfileConstant.CASHIER_ENABLED_ACCOUNTING_YEAR;
                break;
            //固定资产
            case 4:
                accountY = SystemProfileConstant.ASSET_CURRENT_ACCOUNTING_YEAR;
                accountP = SystemProfileConstant.ASSET_CURRENT_ACCOUNTING_PERIOD;
                startY = SystemProfileConstant.ASSET_ENABLED_ACCOUNTING_YEAR;
                startP = SystemProfileConstant.ASSET_ENABLED_ACCOUNTING_YEAR;
                break;
            //工资
            case 5:
                accountY = SystemProfileConstant.SALARY_CURRENT_ACCOUNTING_YEAR;
                accountP = SystemProfileConstant.SALARY_CURRENT_ACCOUNTING_PERIOD;
                startY = SystemProfileConstant.SALARY_ENABLED_ACCOUNTING_YEAR;
                startP = SystemProfileConstant.SALARY_ENABLED_ACCOUNTING_PERIOD;
                break;
            default:
                break;
        }
        map.put("year", accountY);
        map.put("period", accountP);
        map.put("startY", startY);
        map.put("startP", startP);
        return map;
    }

    /**
     * 获取指定系统的当前会计期间和会计年度
     **/
    @Override
    public Map<String, Integer> getSystemYearAndPeriod(Integer system) {
        Map<String, String> systemYearAndPeriodName = getSystemYearAndPeriodName(system);
        Long sobId = UserUtils.getCurrentUser().getUserCurrentOrganId();
        //会计年度名称
        String accountY = systemYearAndPeriodName.get("year");
        //会计期间名称
        String accountP = systemYearAndPeriodName.get("period");
        Integer currentAccountingPeriod = null;
        Integer currentAccountingYear = null;
        //获取该系统的当前会计年度
        Result yearResult = systemProfileRemoteService.getSystemProfileValue(accountY, sobId.toString());
        if (yearResult != null && EnumConstant.PUBLIC.CODE_YES.getValue().equals(yearResult.getCode())) {
            currentAccountingYear = Integer.parseInt((String) yearResult.getData());
        }
        //获取该系统的当前会计期间
        Result periodResult = systemProfileRemoteService.getSystemProfileValue(accountP, sobId.toString());
        if (periodResult != null && EnumConstant.PUBLIC.CODE_YES.getValue().equals(periodResult.getCode())) {
            currentAccountingPeriod = Integer.parseInt((String) periodResult.getData());
        }
        Map<String, Integer> map = new HashMap<>();
        map.put("year", currentAccountingYear);
        map.put("period", currentAccountingPeriod);
        return map;
    }

    /**
     * 根据所属系统获取系统日期是否为当前期间,如果是则返回当前日期,否则返回前会计期间的最后一天
     **/
    @Override
    public Result getAcquisitionDate(Integer system) {
        //获取组织id
        Long sobId = UserUtils.getCurrentUser().getUserCurrentOrganId();
        SimpleDateFormat format = new SimpleDateFormat("yyyy-MM-dd");
        Map<String, Integer> systemYearAndPeriod = getSystemYearAndPeriod(system);
        Integer currentAccountingPeriod = systemYearAndPeriod.get("period");
        Integer currentAccountingYear = systemYearAndPeriod.get("year");

        //获取当前系统时间的会计期间
        Date newDate = new Date();
        Map<String, Integer> map = getAccountingYearAndPeriod(format.format(newDate), sobId);
        Integer accountYear = map.get("accountYear");
        Integer accountPeriod = map.get("accountPeriod");
        //如果日期为当前会计期间则返回系统日期
        Map<String, Object> mapStr = new HashMap<>();
        if (accountYear.equals(currentAccountingYear) && accountPeriod.equals(currentAccountingPeriod)) {
            mapStr.put("accountYear", accountYear);
            mapStr.put("accountPeriod", accountPeriod);
            mapStr.put("newDate", newDate);
            return Result.ok(mapStr);
        }
        //获取当前会计期间的最后一天
        Map<String, Object> mapDate = getPeriodDate(currentAccountingYear, currentAccountingPeriod, sobId);
        Calendar calendar = (Calendar) mapDate.get("endDate");
        Date date = calendar.getTime();

        mapStr.put("newDate", date);
        mapStr.put("accountYear", accountYear);
        mapStr.put("accountPeriod", accountPeriod);
        return Result.ok(mapStr);
    }


    List<Map<String, Integer>> integerList(int startNum, int endNum) {
        List<Map<String, Integer>> list = new ArrayList<>();
        for (int i = endNum; i >= startNum; i--) {
            Map<String, Integer> map = new HashMap<>();
            map.put("name", i);
            map.put("value", i);
            list.add(map);
        }
        return list;
    }


    /**
     * @param
     * @return
     * @description 固定资产启用、当前会计期间
     * @author lxy
     * @eamil lxyyxljava@163.com
     * @date 2018-11-22 17:51
     */
    @Override
    public List<SystemProfileEntity> systemProfileEntityList() {
        SystemProfileEntityVO systemProfileEntityVO = new SystemProfileEntityVO();
        systemProfileEntityVO.setSobId(UserUtils.getCurrentUser().getUserCurrentOrganId());
        SystemProfileEntity systemProfileEntity = new SystemProfileEntity();
        systemProfileEntity.setName(SystemProfileConstant.ASSET_ENABLED_ACCOUNTING_YEAR);
        systemProfileEntityVO.getSystemProfileEntityList().add(systemProfileEntity);
        SystemProfileEntity myClone = systemProfileEntity.myClone();
        myClone.setName(SystemProfileConstant.ASSET_ENABLED_ACCOUNTING_PERIOD);
        systemProfileEntityVO.getSystemProfileEntityList().add(myClone);
        myClone = systemProfileEntity.myClone();
        myClone.setName(SystemProfileConstant.ASSET_CURRENT_ACCOUNTING_YEAR);
        systemProfileEntityVO.getSystemProfileEntityList().add(myClone);
        myClone = systemProfileEntity.myClone();
        myClone.setName(SystemProfileConstant.ASSET_CURRENT_ACCOUNTING_PERIOD);
        systemProfileEntityVO.getSystemProfileEntityList().add(myClone);
        List<SystemProfileEntity> list = systemProfileService.queryByNameList(systemProfileEntityVO);
        return list;
    }

    /**
     * @param
     * @return
     * @description 获取固定资产启用、当前会计期间
     * @author lxy
     * @eamil lxyyxljava@163.com
     * @date 2018-10-23 13:33
     */
    @Override
    public Result getAssetPeriod() {
        List<SystemProfileEntity> list = systemProfileEntityList();
        if (list.size() != 4) {  //结果集必须返回4条数据
            return Result.ok("-9999", "违法操作，请检查会计期间！");
        }
        Integer financeEnabledAccountingYear = Integer.parseInt(list.get(Constant.PUBLIC_ZERO).getValue());
        Integer financeEnabledAccountingPeriod = Integer.parseInt(list.get(Constant.PUBLIC_ONE).getValue());
        Integer financeCurrentAccountingYear = Integer.parseInt(list.get(Constant.PUBLIC_TWO).getValue());
        Integer financeCurrentAccountingPeriod = Integer.parseInt(list.get(Constant.PUBLIC_THREE).getValue());
        List<Map<String, Integer>> yearList = new ArrayList<>();
        List<Map<String, Integer>> periodList = new ArrayList<>();
        Map<String, Object> map = new HashMap<>();
        if (financeEnabledAccountingYear.equals(financeCurrentAccountingYear)) {  //年相等 计算期
            yearList = integerList(financeEnabledAccountingYear.intValue(), financeCurrentAccountingYear.intValue());
            if (financeCurrentAccountingPeriod.intValue() >= financeEnabledAccountingPeriod.intValue()) {
                periodList = integerList(financeEnabledAccountingPeriod.intValue(), financeCurrentAccountingPeriod.intValue());
            }
            map.put("yearList", yearList);
            map.put(financeCurrentAccountingYear.toString(), periodList);
        }
        int startPeriod = 1;
        int endPeriod = 12;
        if (financeEnabledAccountingYear < financeCurrentAccountingYear) {  //跨年
            yearList = integerList(financeEnabledAccountingYear.intValue(), financeCurrentAccountingYear.intValue());
            map.put("yearList", yearList);
            for (Integer i = financeEnabledAccountingYear; i <= financeCurrentAccountingYear; i++) {
                if (i.equals(financeEnabledAccountingYear)) {  //启用年
                    periodList = integerList(financeEnabledAccountingPeriod.intValue(), endPeriod);
                } else if (i.equals(financeCurrentAccountingYear)) { //当前年
                    periodList = integerList(startPeriod, financeCurrentAccountingPeriod.intValue());
                } else {
                    periodList = integerList(startPeriod, endPeriod);
                }
                map.put(i.toString(), periodList);
            }
        }
        Map<String, Object> result = new HashMap<>();
        result.put("list", list);
        result.put("period", map);
        return Result.ok(result);
    }

    /**
     * @param sobId
     * @return java.lang.Integer
     * @description: 查询固定资产启用会计年
     * @author zhengfei
     * @eamil 936864724@qq.com
     * @date 2018-11-02 13:43
     */
    @Override
    public Integer getFaStartYear(Long sobId) {
        Result result = systemProfileRemoteService.getSystemProfileValue(SystemProfileConstant.ASSET_ENABLED_ACCOUNTING_YEAR, sobId.toString());
        if (result != null && EnumConstant.PUBLIC.CODE_YES.getValue().equals(result.getCode())) {
            String cashierEnabledAccountingYear = (String) result.getData();
            return Integer.parseInt(cashierEnabledAccountingYear);
        }
        return null;
    }

    /**
     * @param sobId
     * @return java.lang.Integer
     * @description: 查询固定资产启用会计期间
     * @author zhengfei
     * @eamil 936864724@qq.com
     * @date 2018-11-02 13:43
     */
    @Override
    public Integer getFaStartPeriod(Long sobId) {
        Result result = systemProfileRemoteService.getSystemProfileValue(SystemProfileConstant.ASSET_ENABLED_ACCOUNTING_PERIOD, sobId.toString());
        if (result != null && EnumConstant.PUBLIC.CODE_YES.getValue().equals(result.getCode())) {
            String cashierEnabledAccountingPeriod = (String) result.getData();
            return Integer.parseInt(cashierEnabledAccountingPeriod);
        }
        return null;
    }

    /**
     * 获取所有部门名称 key id+; value name
     *
     * @param
     * @return
     * @description:TODO
     * @author tangmi
     * @eamil tangmi6698@163.com
     * @date 2018-11-13 8:47
     */
    @Override
    public Map<String, String> getDepartmentName() {
        Result bydepAll = sysDeptManagerRemoteService.queryAllLeafNode(UserUtils.getCurrentUser().getUserCurrentOrganId());
        Map<String, String> map = new HashMap<>();
        if (bydepAll != null && EnumConstant.PUBLIC.CODE_YES.getValue().equals(bydepAll.getCode())) {
            List<SysDepartment> sysDepList = ResponseUtil.getResult(bydepAll, new TypeReference<ResponseVO<List<SysDepartment>>>() {
            });
            for (SysDepartment sysDepartment : sysDepList) {
                String key = sysDepartment.getId() + ";";
                String value = sysDepartment.getDepName();
                map.put(key, value);
            }
        }
        return map;
    }

    @Override
    public Map<String, String> getAssetClassesName() {
        Map<String, String> assetClassesName = assetsClassesRemoteService.getAssetClassesName(UserUtils.getCurrentUser().getUserCurrentOrganId());
        return assetClassesName;
    }

    //查询初始化状态
    @Override
    public Boolean getInitializationStatus(Integer system) {
        Long sobId = UserUtils.getCurrentUser().getUserCurrentOrganId();
        String name = "";
        switch (system) {
            //总账系统
            case 1:
                name = SystemProfileConstant.FINANCE_INITIALIZED_STATE;
                break;
            //应收应付系统
            case 2:
                name = SystemProfileConstant.RP_INITIALIZED_STATE;
                break;
            //出纳系统
            case 3:
                name = SystemProfileConstant.CASHIER_INITIALIZED_STATE;
                break;
            //固定资产系统
            case 4:
                name = SystemProfileConstant.FIXEDASSETS_INITIALIZED_STATE;
                break;
            //工资系统
            case 5:
                name = SystemProfileConstant.SALARY_INITIALIZED_STATE;
                break;
            default:
                name = "";
                break;
        }
        
        if ("".equals(name)) {
            return false;
        }
        Result systemProfileValue = systemProfileRemoteService.getSystemProfileValue(name, sobId.toString());
        if (EnumConstant.PUBLIC.CODE_YES.getValue().equals(systemProfileValue.getCode())) {
            Integer systemStart = Integer.parseInt((String) systemProfileValue.getData());
            if (systemStart.intValue() == 1) {
                return true;
            }
        }
        return false;
    }


    /**
     * @param sobId
     * @return java.lang.Integer
     * @description: 固定资产当前会计年
     * @author zhengfei
     * @eamil 936864724@qq.com
     * @date 2018-10-25 10:14
     */
    @Override
    public Integer getFaCurYear(Long sobId) {
        Result result = systemProfileRemoteService.getSystemProfileValue(SystemProfileConstant.ASSET_CURRENT_ACCOUNTING_YEAR, sobId.toString());
        if (result != null && EnumConstant.PUBLIC.CODE_YES.getValue().equals(result.getCode())) {
            String financeCur = (String) result.getData();
            return Integer.parseInt(financeCur);
        }
        return null;
    }

    /**
     * @param sobId
     * @return java.lang.Integer
     * @description: 固定资产当前会计期间
     * @author zhengfei
     * @eamil 936864724@qq.com
     * @date 2018-10-25 10:14
     */
    @Override
    public Integer getFaCurPeriod(Long sobId) {
        Result result = systemProfileRemoteService.getSystemProfileValue(SystemProfileConstant.ASSET_CURRENT_ACCOUNTING_PERIOD, sobId.toString());
        if (result != null && EnumConstant.PUBLIC.CODE_YES.getValue().equals(result.getCode())) {
            String financeCur = (String) result.getData();
            return Integer.parseInt(financeCur);
        }
        return null;
    }

    /**
     * 获取固定资产启用会计期间启用年度，当前会计期间当前会计年度
     */
    @Override
    public Map<String, Object> getFaYearAndPeriod(Long sobId) {
        Map<String, Object> map = new HashMap<>(4);
        map.put("startYear", getFaStartYear(sobId));
        map.put("startPeriod", getFaStartPeriod(sobId));
        map.put("currentYear", getFaCurYear(sobId));
        map.put("currentPeriod", getFaCurPeriod(sobId));
        return map;
    }

    /**
     * @param sysStartYearConstant    系统启用年参数
     * @param sysStartPeriodConstant  系统启用期间参数
     * @param sysCurrenYearConstant   系统当前年参数
     * @param sysCurrenPeriodConstant 系统当前期间参数
     * @return
     * @description:获取财务常用参数
     * @author yaoliang
     * @eamil yaoliang1102@163.com
     * @date 2018-12-11 19:55
     */
    @Override
    public FinanceAccountParamVO getFinanceParams(String sysStartYearConstant, String sysStartPeriodConstant, String sysCurrenYearConstant, String sysCurrenPeriodConstant) {
        //获得当前登录对象的组织id
        SysUser currentUser = UserUtils.getCurrentUser();
        Long sobId = currentUser.getUserCurrentOrganId();

        //获得当前系统的会计年度,期间
        FinanceAccountParamVO paramVO = getSubSysYearPeriodAndPeriodNum(sysCurrenYearConstant, sysCurrenPeriodConstant, sobId);

        //获得系统的启用会计年度 期间
        FinanceAccountParamVO subParam = getSubSysStartYearPeriod(sysStartYearConstant, sysStartPeriodConstant, sobId);
        paramVO.setStartYear(subParam.getStartYear());
        paramVO.setStartPeriod(subParam.getStartPeriod());

        //获得总账的会计期间
        Result resultAccountYear = systemProfileRemoteService.getSystemProfileValue(SystemProfileConstant.FINANCE_CURRENT_ACCOUNTING_YEAR, sobId.toString());
        Result resultAccountPeriod = systemProfileRemoteService.getSystemProfileValue(SystemProfileConstant.FINANCE_CURRENT_ACCOUNTING_PERIOD, sobId.toString());
        //总账会计期间--年
        int LedgerAccountYear = Integer.parseInt(resultAccountYear.getData().toString());
        //总账会计期间--月
        int LedgerAccountPeriod = Integer.parseInt(resultAccountPeriod.getData().toString());

        paramVO.setSobId(sobId);
        paramVO.setLedgerAccountYear(LedgerAccountYear);
        paramVO.setLedgerAccountPeriod(LedgerAccountPeriod);
        paramVO.setCurrenUserId(currentUser.getId());
        paramVO.setCurrenUserName(currentUser.getUsername());

        return paramVO;
    }

    /***
     * @description: 结账or反结账 更新当前会计期间
     * @author yl
     * @eamil yaoliang1102@163.com
     * @date 2018-08-03 13:15
     * @param [reverseSettle] 是否反结账 true:反结账 false:结账
     * @param sysYearConstant 子系统当前会计年度
     * @param sysPeriodConstant 子系统当前会计期间
     * @return boolean
     **/
    @Override
    public boolean changeSettleYearPeriod(boolean reverseSettle, String sysYearConstant, String sysPeriodConstant) {
        boolean flag;
        try {
            SysUser currentUser = UserUtils.getCurrentUser();
            Long currentUserId = currentUser.getId();
            String loginName = currentUser.getLoginName();
            Long sobId = currentUser.getOrganId();

            //获取当前子系统会计年度，会计期间
            SystemProfileEntity accountYearResult = systemProfileService.getSystemProfileEntity(sysYearConstant, sobId);
            SystemProfileEntity accountPeriodResult = systemProfileService.getSystemProfileEntity(sysPeriodConstant, sobId);
            Result accountNumResult = systemProfileRemoteService.getSystemProfileValue(SystemProfileConstant.ACCOUNTING_PERIOD_NUMBER, sobId.toString());

            Integer periodNumber = Integer.parseInt(accountNumResult.getData().toString());
            int accountYear = Integer.parseInt(accountYearResult.getValue());
            int accountPeriod = Integer.parseInt(accountPeriodResult.getValue());

            int newAccountYear;
            int newAccountPeriod;
            if (reverseSettle) {
                //反结账更新会计期间年度
                newAccountYear = accountYear - 1;
                newAccountPeriod = periodNumber;
            } else {
                //期末结账操作
                //生成下一期的会计年度和会计期间
                if (accountPeriod == periodNumber) {
                    newAccountYear = accountYear + 1;
                    newAccountPeriod = 1;
                } else {
                    newAccountYear = accountYear;
                    newAccountPeriod = accountPeriod + 1;
                }
            }
            //更新会计年度，会计期间
            accountYearResult.setValue(String.valueOf(newAccountYear));
            accountYearResult.setUpdateId(currentUserId);
            accountYearResult.setUpdateName(loginName);
            accountYearResult.setUpdateTime(new Date());

            accountPeriodResult.setValue(String.valueOf(newAccountPeriod));
            accountPeriodResult.setUpdateId(currentUserId);
            accountPeriodResult.setUpdateName(loginName);
            accountPeriodResult.setUpdateTime(new Date());

            List<SystemProfileEntity> updateList = new ArrayList<>();
            updateList.add(accountYearResult);
            updateList.add(accountPeriodResult);
            Result rs = systemProfileService.updateBatch(updateList);
            if (Integer.parseInt(rs.getData().toString()) > Constant.PUBLIC_ZERO) {
                flag = true;
            } else {
                flag = false;
            }
        } catch (Exception e) {
            flag = false;
        }
        return flag;
    }

    /**
     * 
     * @Title: getWmCurYearAndPeriod   
     * @Description: 获取工资模块 当前会计年度当前会计期间
     * @author: zhengfei
     * @Email: 936864724@qq.com
     * @date: 2018年12月12日 上午9:54:22
     * @param sobId
     * @return          
     * @throws
     */
	@Override
	public Map<String, Integer> getWmCurYearAndPeriod(Long sobId) {
		Map<String, Integer> yearAndPeriod = new HashMap<>(2);
		//获得当前系统的会计年度,期间
		Integer accountYear = Constant.PUBLIC_ZERO;
        Result accountYearResult = systemProfileRemoteService.getSystemProfileValue(SystemProfileConstant.SALARY_CURRENT_ACCOUNTING_YEAR, sobId.toString());
        if (EnumConstant.PUBLIC.CODE_YES.getValue().equals(accountYearResult.getCode())) {
            accountYear = Integer.parseInt(accountYearResult.getData().toString());
        }
        //期间
        Integer accountPeriod = Constant.PUBLIC_ZERO;
        Result accountPeriodResult = systemProfileRemoteService.getSystemProfileValue(SystemProfileConstant.SALARY_CURRENT_ACCOUNTING_PERIOD, sobId.toString());
        if (EnumConstant.PUBLIC.CODE_YES.getValue().equals(accountPeriodResult.getCode())) {
            accountPeriod = Integer.parseInt(accountPeriodResult.getData().toString());
        }
        yearAndPeriod.put("curYear", accountYear);
        yearAndPeriod.put("curPeriod", accountPeriod);
		return yearAndPeriod;
	}

    /**
     *
     * @Title: getWmCurYearAndPeriod
     * @Description: 获取工资模块 启用会计年度当前会计期间
     * @author: zhengfei
     * @Email: 936864724@qq.com
     * @date: 2018年12月12日 上午9:54:22
     * @param sobId
     * @return
     * @throws
     */
    @Override
    public Map<String, Integer> getWmStartYearAndPeriod(Long sobId) {
        Map<String, Integer> yearAndPeriod = new HashMap<>(2);
        //获得当前系统的会计年度,期间
        Integer startYear = Constant.PUBLIC_ZERO;
        Result accountYearResult = systemProfileRemoteService.getSystemProfileValue(SystemProfileConstant.SALARY_ENABLED_ACCOUNTING_YEAR, sobId.toString());
        if (EnumConstant.PUBLIC.CODE_YES.getValue().equals(accountYearResult.getCode())) {
            startYear = Integer.parseInt(accountYearResult.getData().toString());
        }
        //期间
        Integer startPeriod = Constant.PUBLIC_ZERO;
        Result accountPeriodResult = systemProfileRemoteService.getSystemProfileValue(SystemProfileConstant.SALARY_ENABLED_ACCOUNTING_PERIOD, sobId.toString());
        if (EnumConstant.PUBLIC.CODE_YES.getValue().equals(accountPeriodResult.getCode())) {
            startPeriod = Integer.parseInt(accountPeriodResult.getData().toString());
        }
        yearAndPeriod.put("startYear", startYear);
        yearAndPeriod.put("startPeriod", startPeriod);
        return yearAndPeriod;
    }

    /**
     * @description: 获取对应子系统年度期间
     * @author yaoliang
     * @eamil yaoliang1102@163.com
     * @date 2018-12-12 10:28
     * @param 
     * @return 
     */
    @Override
    public FinanceAccountParamVO getSubSysCurrenYearPeriod(String sysCurrenYearConstant, String sysCurrenPeriodConstant,Long sobId){
        FinanceAccountParamVO paramVO = new FinanceAccountParamVO();
        Integer accountYear = Constant.PUBLIC_ZERO;
        Integer accountPeriod = Constant.PUBLIC_ZERO;

        Result accountYearResult = systemProfileRemoteService.getSystemProfileValue(sysCurrenYearConstant, sobId.toString());
        if (EnumConstant.PUBLIC.CODE_YES.getValue().equals(accountYearResult.getCode())) {
            accountYear = Integer.parseInt(accountYearResult.getData().toString());
            paramVO.setAccountYear(accountYear);
        }
        //期间
        Result accountPeriodResult = systemProfileRemoteService.getSystemProfileValue(sysCurrenPeriodConstant, sobId.toString());
        if (EnumConstant.PUBLIC.CODE_YES.getValue().equals(accountPeriodResult.getCode())) {
            accountPeriod = Integer.parseInt(accountPeriodResult.getData().toString());
            paramVO.setAccountPeriod(accountPeriod);
        }

        paramVO.setAccountYear(accountYear);
        paramVO.setAccountPeriod(accountPeriod);

        return paramVO;
    }
    /**
     * @description: 获取对应子系统年度期间与期间数
     * @author yaoliang
     * @eamil yaoliang1102@163.com
     * @date 2018-12-12 10:28
     * @param
     * @return
     */
    @Override
    public FinanceAccountParamVO getSubSysYearPeriodAndPeriodNum(String sysCurrenYearConstant, String sysCurrenPeriodConstant, Long sobId) {

        FinanceAccountParamVO paramVO = getSubSysCurrenYearPeriod(sysCurrenYearConstant, sysCurrenPeriodConstant, sobId);
        Integer accountYear = paramVO.getAccountYear();
        Integer accountPeriod = paramVO.getAccountPeriod();
        Integer accountNum=12;

        //获得系统 - 期间数
        Result accountNumResult = systemProfileRemoteService.getSystemProfileValue(SystemProfileConstant.ACCOUNTING_PERIOD_NUMBER, sobId.toString());
        if (EnumConstant.PUBLIC.CODE_YES.getValue().equals(accountNumResult.getCode())) {
            accountNum = Integer.parseInt(accountNumResult.getData().toString());
            paramVO.setAccountPeriodNum(accountNum);
        }
        //上一会计期间,会计年度
        Integer upAccountYear;
        Integer upAccountPeriod;
        if (accountPeriod.compareTo(Constant.PUBLIC_ONE) == Constant.PUBLIC_ZERO) {
            upAccountYear = accountYear - Constant.PUBLIC_ONE;
            upAccountPeriod = accountNum;
        } else {
            upAccountYear = accountYear;
            upAccountPeriod = accountPeriod - Constant.PUBLIC_ONE;
        }

        //下一会计年度,会计期间
        Integer nextAccountYear;
        Integer nextAccountPeriod;
        if (accountPeriod.equals(accountNum)) {
            nextAccountYear = accountYear + 1;
            nextAccountPeriod = 1;
        } else {
            nextAccountYear = accountYear;
            nextAccountPeriod = accountPeriod + 1;
        }
        paramVO.setUpAccountYear(upAccountYear);
        paramVO.setUpAccountPeriod(upAccountPeriod);
        paramVO.setNextAccountYear(nextAccountYear);
        paramVO.setNextAccountPeriod(nextAccountPeriod);
        return paramVO;
    }

    /**
     * @description: 获得对应子系统的启用会计年度 期间
     * @author yaoliang
     * @eamil yaoliang1102@163.com
     * @date 2018-12-12 10:28
     * @param
     * @return
     */
    @Override
    public FinanceAccountParamVO getSubSysStartYearPeriod(String sysStartYearConstant, String sysStartPeriodConstant,Long sobId){
        FinanceAccountParamVO paramVO = new FinanceAccountParamVO();
        Result startYearResult = systemProfileRemoteService.getSystemProfileValue(sysStartYearConstant, sobId.toString());
        if (EnumConstant.PUBLIC.CODE_YES.getValue().equals(startYearResult.getCode())) {
            paramVO.setStartYear(Integer.parseInt(startYearResult.getData().toString()));
        }
        Result startPeriodResult = systemProfileRemoteService.getSystemProfileValue(sysStartPeriodConstant, sobId.toString());
        if (EnumConstant.PUBLIC.CODE_YES.getValue().equals(startPeriodResult.getCode())) {
            paramVO.setStartPeriod(Integer.parseInt(startPeriodResult.getData().toString()));
        }
        return paramVO;
    }

    /** 
     * @description:TODO 根据组织id获取工资会计年度和会计期间联动数据
     * @author tangmi  
     * @eamil tangmi6698@163.com
     * @date 2018-12-21 11:19  
     * @param  sobId
     * @return   
     */
    @Override
    public Map<String, Object> getAccountingYearAndPeriods(Long sobId){
        //获取工资的当前会计期间
        Map<String, Integer> wmCurYearAndPeriod = getWmCurYearAndPeriod(sobId);
        int curYear = wmCurYearAndPeriod.get("curYear");
        int curPeriod = wmCurYearAndPeriod.get("curPeriod");
        //获取工资的启用期间
        Map<String, Integer> wmStartYearAndPeriod = getWmStartYearAndPeriod(sobId);
        int startYear = wmStartYearAndPeriod.get("startYear");
        int startPeriod = wmStartYearAndPeriod.get("startPeriod");
        List<Map<String, Object>> list = new ArrayList<>();
        for (int i = curYear; startYear <= i; i--) {
            Map<String, Object> map = new HashMap<>();
            int j = 1;
            if (i == startYear) {
                j = startPeriod;
            }
            List<Integer> period = new ArrayList<>();
            for (; j <= 12; j++) {
                period.add(j);
            }
            map.put("year", i);
            map.put("period", period);
            list.add(map);
        }
        Map<String, Object> startMap = new HashMap<>();
        startMap.put("year", curYear);
        startMap.put("period", curPeriod);
        startMap.put("list", list);
        return startMap;
    }
}
