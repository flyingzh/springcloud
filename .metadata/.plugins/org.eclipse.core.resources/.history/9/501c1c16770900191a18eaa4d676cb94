package com.htrfid.finance.service;

import com.htrfid.exception.MyException;
import com.htrfid.finance.entity.VoucherEntity;
import com.htrfid.finance.vo.VoucherQueryResultVO;
import com.htrfid.finance.vo.VoucherQueryVO;
import com.htrfid.finance.vo.VoucherSummaryResultVO;
import com.htrfid.finance.vo.VoucherVO;
import com.htrfid.sysmanager.entity.SysUser;
import com.htrfid.util.Result;

import java.util.List;
import java.util.Map;


/**
 * @className      VoucherService
 * @description    凭证Service
 * @author         lirui
 * @email          lr@htrfid.com
 * @date           2018-06-13 17:39:55
 * @version        V1.0
 **/
public interface VoucherService {

     /**
     * @description:根据id查询存储凭证的数据信息信息
     *
     * @author lirui
     * @eamil lr@htrfid.com
     * @date 2018-06-13 17:39:55
     * @param id
     * @return VoucherEntity
     */
    VoucherEntity queryObject(Long id);

    /**
     * @description:根据map参数查询存储凭证的数据信息列表
     *
     * @author lirui
     * @eamil lr@htrfid.com
     * @date 2018-06-13 17:39:55
     * @param map
     * @return List<VoucherEntity>
     */
	List<VoucherEntity> queryList(Map<String, Object> map);

    /**
     * @description:查询存储凭证的数据信息列表
     *
     * @author lirui
     * @eamil lr@htrfid.com
     * @date 2018-06-13 17:39:55
     * @param entity
     * @return List<VoucherEntity>
     */
    List<VoucherEntity> queryListByBean(VoucherEntity entity);

    /**
     * @description:查询存储凭证的数据信息总记录数
     *
     * @author lirui
     * @eamil lr@htrfid.com
     * @date 2018-06-13 17:39:55
     * @param map
     * @return int
     */
    int queryTotal(Map<String, Object> map);

    /**
     * @description:批量保存存储凭证的数据信息
     *
     * @author lirui
     * @eamil lr@htrfid.com
     * @date 2018-06-13 17:39:55
     * @param vouchers
     * @return boolean
     */
    boolean saveBatch(List<VoucherEntity> vouchers);


    /**
     * @description:批量删除存储凭证的数据信息
     *
     * @author lirui
     * @eamil lr@htrfid.com
     * @date 2018-06-13 17:39:55
     * @param ids
     * @return Result
     */
    Result deleteBatch(Long[] ids,Long sobId);

    /**
     * @description: 获取凭证号
     * @author zhengfei
     * @eamil 936864724@qq.com
     * @date 2018-06-21 9:12
     * @param sobId 账套ID
     * @param voucherGroupId 凭证字ID
     * @param currentAccountYear 当前会计年度
     * @param currentAccountPeriod 当前年度会计区间
     * @return Integer
     */
    Integer querySerialNum(Long sobId, Long voucherGroupId, Integer currentAccountYear, Integer currentAccountPeriod);

    /**
    * @description:查询凭证
    * @author zhengfei
    * @eamil 936864724@qq.com
    * @date 2018-06-22 8:40
    * @param sobId, voucherId
    * @return com.htrfid.finance.entity.VoucherEntity
    */
    VoucherEntity queryVoucher(Long sobId, Long voucherId);

    /**
    * @description:新增或保存凭证
    * @author zhengfei
    * @eamil 936864724@qq.com
    * @date 2018-06-22 10:36
    * @param voucherVO
     * @return com.htrfid.util.Result
    */
    Result saveOrUpdate(VoucherVO voucherVO,SysUser currentUser);

    /**
     * @description: 凭证审核/反审核
     * @author zhengfei
     * @eamil 936864724@qq.com
     * @date 2018-06-22 16:34
     * @param sobId 账套id
     * @param voucherId 凭证id
     * @param userId
     * @param userName
     * @param type
     * @return Integer
     */
    Result approvalVoucher(Long sobId, Long voucherId, Long userId, String userName,Integer type);

    /**
    * @description: 根据凭证id和账套id删除凭证
    * @author zhengfei
    * @eamil 936864724@qq.com
    * @date 2018-06-22 17:53
    * @param voucherId, sobId
    * @return com.htrfid.util.Result
    */
    Result deleteById(Long voucherId, Long sobId);

    /**
    * @description:复制凭证实体
    * @author zhengfei
    * @eamil 936864724@qq.com
    * @date 2018-06-26 19:56
    * @param sobId, voucherId
    * @return com.htrfid.finance.entity.VoucherEntity
    */
    VoucherEntity copyVoucher(Long sobId, Long voucherId);

    /**
    * @description:红字冲销 保存凭证实体信息
    * @author zhengfei
    * @eamil 936864724@qq.com
    * @date 2018-06-27 8:41
    * @param sobId, voucherId
    * @return com.htrfid.finance.entity.VoucherEntity
    */
    VoucherEntity writeOffVoucher(Long sobId, Long voucherId);

    /**
     * @description 凭证汇总表数据列表
     * @author lxy
     * @eamil lxyyxljava@163.com
     * @date  2018/7/2 18:48
     * @param
     * @return
     */
    List<VoucherSummaryResultVO> voucherCount(Integer subjctStartNum, Integer subjctEndNum, String startDate, String endDate, Integer startVoucherNum, Integer endVoucherNum, Long voucherId);

    /**
     * @description 获取借贷框总金额
     * @author lxy
     * @eamil lxyyxljava@163.com
     * @date  2018/7/2 18:49
     * @param
     * @return
     */
    Map<String,Object> queryVoucherEnclosure(Map<String,Object> params);


    /**
    * @description: 查询凭证
    * @author zhengfei
    * @eamil 936864724@qq.com
    * @date 2018-06-27 16:19
    * @param voucher
    * @return Result
    */
    Result queryVoucher(VoucherEntity voucher);

    /**
     * @description
     * @author lxy 查凭证
     * @eamil lxyyxljava@163.com
     * @date  2018/7/4 9:55
     * @param
     * @return
     */
    Map<String,Object>  queryVoucherByVo(VoucherQueryVO voucherQueryVO);

    /**
     * @description 查凭证 第二套
     * @author lxy
     * @eamil lxyyxljava@163.com
     * @date  2018-10-15 14:13
     * @param
     * @return
     */
    Map<String,Object> queryVoucherNew(VoucherQueryVO voucherQueryVO);

    /**
     * @description 导出凭证 列表
     * @author lxy
     * @eamil lxyyxljava@163.com
     * @date  2018-10-16 14:51 
     * @param 
     * @return 
     */
    List<VoucherQueryResultVO> exportVoucher(VoucherQueryVO voucherQueryVO);

    /**
    * @description: 凭证过账
    * @author zhengfei
    * @eamil 936864724@qq.com
    * @date 2018-07-04 19:37
    * @param ids, sobId
    * @return com.htrfid.util.Result
    */
    Result voucherPassBill(Long[] ids, Long sobId,Long userId,String userName) throws MyException;

    /**
    * @description: 凭证整理
    * @author zhengfei
    * @eamil 936864724@qq.com
    * @date 2018-07-05 16:56
    * @param
    * @param accountYear
     *@param accountPeriod
     * @param sobId @return com.htrfid.util.Result
    */
    Result sortVoucher(Integer accountYear, Integer accountPeriod, Long sobId);

    /**
     * @description
     * @author lxy 查询凭证分录
     * @eamil lxyyxljava@163.com
     * @date  2018/7/5 19:55
     * @param
     * @return
     */
    List<VoucherQueryResultVO> queryVoucherEntryByVo(VoucherQueryVO voucherQueryVO);

    /**
     * @description
     * @author lxy 获取会计期间
     * @eamil lxyyxljava@163.com
     * @date  2018/7/6 14:50
     * @param
     * @return
     */
    List<Map<String,Object>> getVoucherDate(Map<String,Object> params);

    /**
    * @description: 删除机制凭证
    * @author zhengfei
    * @eamil 936864724@qq.com
    * @date 2018-07-09 16:15
    * @param voucherId, sobId
    * @return com.htrfid.util.Result
    */
    Result deleteMechanismVoucher(Long voucherId, Long sobId ,Long currentUserId, String username);

    /** 批量删除机制凭证
     * @description:TODO
     * @author tangmi  
     * @eamil tangmi6698@163.com
     * @date 2018-07-10 15:20
     * @param  sobId ids
     * @return   
     */ 
    Result deleteMechanismVoucherBatch(Long sobId, Long[] ids,Long currentUserId, String username);

    /**
    * @description:获取会计年度区间  凭证最早年度到凭证最大最大年度
    * @author zhengfei
    * @eamil 936864724@qq.com
    * @date 2018-07-12 8:32
    * @param sobId
    * @return com.htrfid.util.Result
    */
    Result getFinanceYearPeriod(Long sobId);

    /**
     * @description 检查会计期间内是否存在凭证号断号
     * @author lxy
     * @eamil lxyyxljava@163.com
     * @date  2018-07-13 15:17
     * @param
     * @return
     */
    int checkVoucherNumberNonSequence(Map<String,Object> map);

    /**
    * @description: 获取所有凭证id
    * @author zhengfei
    * @eamil 936864724@qq.com
    * @date 2018-07-20 11:26
    * @param sobId
    * @return java.util.List<java.lang.Integer>
    */
    List<Long> selectIds(Long sobId);

    /** 查询应收应付机制凭证
     * @description:TODO
     * @author tangmi
     * @eamil tangmi6698@163.com
     * @date 2018-07-24 13:40
     * @param
     * @return
     */
    Map<String,Object> queryMechanismCertificate(VoucherQueryVO voucherQueryVO);

    Result deleteMechanismVouchere(Long sobId,Long voucherId,Integer ownershipSystem);

    Result approvalVoucherBatch(Long sobId, Long[] ids, Long userId, String userName, Integer type);
    /** 查询是否存在审核或者过账的凭证
     * @description:TODO
     * @author tangmi
     * @eamil tangmi6698@163.com
     * @date 2018-08-22 14:20
     * @param
     * @return
     */
    Result queryVoucherType(Long sobId);


    Result queryDepreciationVoucher(VoucherEntity entity);

    /**
     * @description:根据凭证号，查询该凭证号是否已被使用
     * @param id 凭证Id
     * @param accountingYear 会计年
     * @param accountingPeriod 会计期间
     * @param voucherGroupId 凭证字
     * @param voucherNumber 输入的凭证号
     * @param sobId 组织Id
     * @return Integer 该凭证号是否已被使用 0 未使用 1 已使用
     */
    Integer existsVoucherNumber(Long id, Integer accountingYear, Integer accountingPeriod, Long voucherGroupId, Integer voucherNumber, Long sobId);

    /**
     * @description:查询当前期与以后期是否生成凭证
     * @author yaoliang
     * @eamil yaoliang1102@163.com
     * @date 2018-10-29 14:26  
     * @param 
     * @return 
     */ 
    Boolean getFaVoucherCurrenAndAfter(VoucherEntity entity);

    /**
     * @description 获取带有核算项目凭证ID
     * @author lxy
     * @eamil lxyyxljava@163.com
     * @date  2018-10-19 16:09
     * @param 
     * @return 
     */
    List<Long> getVoucherIdList(Map<String,Object> params);
    
    
    /** map中封装的参数为:year sobId endPeriod startPeriod belongSystem
     * @description:TODO 查询工资的凭证管理列表
     * @author tangmi  
     * @eamil tangmi6698@163.com
     * @date 2018-12-19 14:38
     * @param year 会计年度
     * @param sobId 组织id
     * @param endPeriod 结束期间
     * @param startPeriod 开始期间
     * @param belongSystem 所属系统
     * @return com.htrfid.util.Result
     */
    Result wageVoucherManagement(Map<String,Object> map);

	Result saveVoucherBatch(List<VoucherVO> voucherVOs, SysUser currentUser);
}