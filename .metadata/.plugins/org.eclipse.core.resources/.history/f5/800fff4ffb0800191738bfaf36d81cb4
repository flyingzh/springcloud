package com.htrfid.finance.service.impl;

import java.beans.BeanInfo;
import java.beans.Introspector;
import java.beans.PropertyDescriptor;
import java.lang.reflect.Method;
import java.math.BigDecimal;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Collections;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

import org.apache.http.util.TextUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.htrfid.basedata.entity.TbaseAccountSubjectEntity;
import com.htrfid.finance.common.SystemProfileConstant;
import com.htrfid.finance.dao.VoucherEntryDao;
import com.htrfid.finance.entity.SystemProfileEntity;
import com.htrfid.finance.service.MultiColumnAccountService;
import com.htrfid.finance.service.SystemProfileService;
import com.htrfid.finance.util.Tools;
import com.htrfid.finance.vo.MultiColumnAccountRespVO;
import com.htrfid.finance.vo.MultiColumnAccountVO;
import com.htrfid.util.JsonUtil;

/**
 * @author cjj
 * @version V1.0
 * @className MultiColumnAccountServiceImpl
 * @description 多栏式明细账业务实现类
 * @date 2018-07-08 12:52
 **/
@Service("multiColumnAccountServiceImpl")
public class MultiColumnAccountServiceImpl implements MultiColumnAccountService {

    private final static Logger logger = LoggerFactory.getLogger(MultiColumnAccountServiceImpl.class);

    /** 借 **/
    private static final Integer BALANCE_DEBIT = 1;
    /** 贷 **/
    private static final Integer BALANCE_CREDIT = 2;
    /** 平**/
    private static final Integer BALANCE_EQUAL = 0;

    @Autowired
    private VoucherEntryDao voucherEntryDao;
    @Autowired
    private SystemProfileService systemProfileService;

    /**
    * @description: 多栏账列表
    * @author zhengfei
    * @eamil 936864724@qq.com
    * @date 2018-07-11 19:45
    * @param reqVo
    * @return List<MultiColumnAccountRespVO>
    */
    @Override
    public Map<String,Object> multiColumnAccountDetail(MultiColumnAccountVO reqVo) {
        logger.info("request args MultiColumnAccountVO entity: {}",JsonUtil.objToJson(reqVo));
        Map<String,Object> resultMap = new HashMap<>();
        Integer currentYear = null;

        //总账当前会计年度
        SystemProfileEntity entity = systemProfileService.querySysProfileByName(SystemProfileConstant.FINACE_CURRENT_ACCOUNTING_YEAR, reqVo.getSobId().toString());
        if(entity != null){
            currentYear = Integer.parseInt(entity.getValue());
        }

        if(reqVo.getAccountBeginYear()== null){
            reqVo.setAccountBeginYear(currentYear);
        }
        if(reqVo.getAccountEndYear() == null){
            reqVo.setAccountEndYear(currentYear);
        }
        Integer currentPeriod = null;
        //总账当前会计期间
        entity = systemProfileService.querySysProfileByName(SystemProfileConstant.FINACE_CURRENT_ACCOUNTING_PERIOD, reqVo.getSobId().toString());
        if(entity != null){
            currentPeriod = Integer.parseInt(entity.getValue());
        }
        if(reqVo.getAccountBeginPeriod()== null){
            reqVo.setAccountBeginPeriod(currentPeriod);
        }
        if(reqVo.getAccountEndPeriod() == null){
            reqVo.setAccountEndPeriod(currentPeriod);
        }
        //会计期间开始日期
        String financeStart = null;
        SystemProfileEntity profileEntity = systemProfileService.querySysProfileByName(SystemProfileConstant.ACCOUNTING_PERIOD_START_DATE, reqVo.getSobId().toString());
        if(profileEntity != null){
            financeStart = profileEntity.getValue();
        }
        //获取总账开始会计年度
        Integer startYear = null;
        Integer startPeriod = null;
        profileEntity = systemProfileService.querySysProfileByName(SystemProfileConstant.FINACE_ENABLED_ACCOUNTING_YEAR, reqVo.getSobId().toString());
        if(profileEntity != null){
            startYear = Integer.parseInt(profileEntity.getValue());
        }
        profileEntity = systemProfileService.querySysProfileByName(SystemProfileConstant.FINACE_ENABLED_ACCOUNTING_PERIOD, reqVo.getSobId().toString());
        if(profileEntity != null){
            startPeriod = Integer.parseInt(profileEntity.getValue());
        }
        if(reqVo.getAccountBeginYear()<startYear){
            reqVo.setAccountBeginYear(startYear);
        }

        List<String> colNames = new ArrayList<>();
        List<Map> colModel = new ArrayList<>();

        colNames.add("日期");
        colNames.add("凭证字号");
        colNames.add("摘要");
        colNames.add("借方");
        colNames.add("贷方");
        colNames.add("方向");
        colNames.add("余额");
        Map<String,Object> colModelMap1 = new HashMap<>();
        Map<String,Object> colModelMap2 = new HashMap<>();
        Map<String,Object> colModelMap3 = new HashMap<>();
        Map<String,Object> colModelMap4 = new HashMap<>();
        Map<String,Object> colModelMap5 = new HashMap<>();
        Map<String,Object> colModelMap6 = new HashMap<>();
        Map<String,Object> colModelMap7 = new HashMap<>();
        colModelMap1.put("name","periodDate");
        colModelMap1.put("align","center");
        colModelMap1.put("width","110");
        colModelMap1.put("sortable","false");

        colModelMap2.put("name","voucherNumber");
        colModelMap2.put("align","center");
        colModelMap2.put("width","70");
        colModelMap2.put("sortable","false");

        colModelMap3.put("name","explains");
        colModelMap3.put("align","center");
        colModelMap3.put("width","110");
        colModelMap3.put("sortable","false");

        colModelMap4.put("name","debitMoney");
        colModelMap4.put("align","center");
        colModelMap4.put("width","100");
        colModelMap4.put("sortable","false");

        colModelMap5.put("name","creditMoney");
        colModelMap5.put("align","center");
        colModelMap5.put("width","100");
        colModelMap5.put("sortable","false");

        colModelMap6.put("name","directionStr");
        colModelMap6.put("align","center");
        colModelMap6.put("width","40");
        colModelMap6.put("sortable","false");

        colModelMap7.put("name","balance");
        colModelMap7.put("align","center");
        colModelMap7.put("width","100");
        colModelMap7.put("sortable","false");

        colModel.add(colModelMap1);
        colModel.add(colModelMap2);
        colModel.add(colModelMap3);
        colModel.add(colModelMap4);
        colModel.add(colModelMap5);
        colModel.add(colModelMap6);
        colModel.add(colModelMap7);

        //根据科目编码获取科目信息
        TbaseAccountSubjectEntity subjectEntity = voucherEntryDao.querySubjectEntity(1,reqVo.getAccountBeginCode());
        if(subjectEntity == null){
            Map<String,Object> header = new HashMap<>();
            header.put("colModel",colModel);
            header.put("colNames",colNames);
            resultMap.put("header",header);
            resultMap.put("list",new ArrayList<>());
            return resultMap;
        }
        resultMap.put("subjectName",subjectEntity.getSubjectName());

        logger.info("initMultiList param entity: {}",JsonUtil.objToJson(reqVo));

        List<MultiColumnAccountRespVO> vos = null;
        if(reqVo.getProjectItemClassId()==null){
            //无核算项目
            vos = voucherEntryDao.initMultiList(reqVo);
        }else{
            //有核算项目
            vos = voucherEntryDao.initMultiListWithProject(reqVo);
        }

        if(vos == null || vos.isEmpty()){
            Map<String,Object> header = new HashMap<>();
            header.put("colModel",colModel);
            header.put("colNames",colNames);
            resultMap.put("header",header);
            resultMap.put("list",new ArrayList<>());
            return resultMap;
        }

        if(reqVo.getCurrencyId().intValue() != 0){
            for(MultiColumnAccountRespVO vo:vos){
                vo.setDebitMoney(vo.getDebitMoney());
                vo.setCreditMoney(vo.getCreditMoneyFor());
                vo.setBalance(vo.getBalanceFor());
            }
        }

        List<String> yearList =null;
        try {
            yearList = BookInquiryServiceImpl.getYearList(reqVo.getAccountBeginYear(),reqVo.getAccountBeginPeriod(),reqVo.getAccountEndYear(),reqVo.getAccountEndPeriod(),financeStart);
        } catch (Exception e) {
            Map<String,Object> header = new HashMap<>();
            header.put("colModel",colModel);
            header.put("colNames",colNames);
            resultMap.put("header",header);
            resultMap.put("list",new ArrayList<>());
            return resultMap;
        }

        //处理期初余额
        MultiColumnAccountRespVO account = vos.get(0);
        if( account.getExplains().contains("期初")&&(account.getVoucherId() == null || account.getVoucherId().intValue() == 0)){
            logger.info("MultiColumnAccountRespVO entity: {}", JsonUtil.objToJson(account));
            String periodDate = "";
            if(account.getPeriodDate()!=null){
                periodDate = account.getPeriodDate()+"-1";
            }else{
                periodDate = financeStart;
            }
            Calendar calendar = Tools.getCalendar(periodDate);
            Calendar calendar1 = Tools.getCalendar(financeStart);
            calendar1.set(Calendar.YEAR,calendar.get(Calendar.YEAR));
            calendar1.set(Calendar.MONTH,calendar.get(Calendar.MONTH));
            SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
            String str = sdf.format(calendar1.getTime());
            account.setPeriodDate(str);

            if(account.getBalance() == null){
                account.setBalance(new BigDecimal("0"));
            }
            if(account.getBalanceFor() == null){
                account.setBalanceFor(new BigDecimal("0"));
            }

            if (account.getBalance().compareTo(BigDecimal.ZERO)==0||account.getBalanceFor().compareTo(BigDecimal.ZERO)==0){
                account.setDirection(BALANCE_EQUAL);
            }
        }else{
            MultiColumnAccountRespVO v = new MultiColumnAccountRespVO();
            Calendar calendar1 = Tools.getCalendar(financeStart);
            calendar1.set(Calendar.YEAR,reqVo.getAccountBeginYear());
            calendar1.set(Calendar.MONTH,reqVo.getAccountBeginPeriod()-1);
            SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
            String str = sdf.format(calendar1.getTime());
            v.setPeriodDate(str);
            v.setVoucherNumber("");
            v.setExplains("  期初余额");
            v.setDebitMoney(new BigDecimal("0"));
            v.setDebitMoneyFor(new BigDecimal("0"));
            v.setCreditMoney(new BigDecimal("0"));
            v.setCreditMoneyFor(new BigDecimal("0"));
            v.setVoucherId(0L);
            v.setBalance(new BigDecimal("0"));
            v.setBalanceFor(new BigDecimal("0"));
            vos.add(0,v);
        }

        for(int i = 0;i<yearList.size();i++){
            MultiColumnAccountRespVO v = new MultiColumnAccountRespVO();
            MultiColumnAccountRespVO v2 = new MultiColumnAccountRespVO();
            MultiColumnAccountRespVO v3 = new MultiColumnAccountRespVO();
            v.setPeriodDate(yearList.get(i));
            v.setVoucherNumber("");
            v.setExplains("  本期合计");
            v.setDebitMoney(new BigDecimal("0"));
            v.setDebitMoneyFor(new BigDecimal("0"));
            v.setCreditMoney(new BigDecimal("0"));
            v.setCreditMoneyFor(new BigDecimal("0"));
            v.setVoucherId(0L);
            v.setBalance(new BigDecimal("0"));
            v.setBalanceFor(new BigDecimal("0"));

            v2.setPeriodDate(yearList.get(i));
            v2.setVoucherNumber("");
            v2.setVoucherId(0L);
            v2.setExplains("  本年累计");
            v2.setDebitMoney(new BigDecimal("0"));
            v2.setDebitMoneyFor(new BigDecimal("0"));
            v2.setCreditMoney(new BigDecimal("0"));
            v2.setCreditMoneyFor(new BigDecimal("0"));
            v2.setBalance(new BigDecimal("0"));
            v2.setBalanceFor(new BigDecimal("0"));

            v3.setPeriodDate(yearList.get(i));
            v3.setVoucherNumber("");
            v3.setVoucherId(0L);
            v3.setExplains("  期末余额");
            v3.setDebitMoney(new BigDecimal("0"));
            v3.setDebitMoneyFor(new BigDecimal("0"));
            v3.setCreditMoney(new BigDecimal("0"));
            v3.setCreditMoneyFor(new BigDecimal("0"));
            v3.setBalance(new BigDecimal("0"));
            v3.setBalanceFor(new BigDecimal("0"));

            if(BALANCE_DEBIT.equals(subjectEntity.getBalanceDirection())){
                v.setDirection(BALANCE_DEBIT);
                v2.setDirection(BALANCE_DEBIT);
                v3.setDirection(BALANCE_DEBIT);
            }else{
                v.setDirection(BALANCE_DEBIT);
                v2.setDirection(BALANCE_DEBIT);
                v3.setDirection(BALANCE_DEBIT);
            }
            vos.add(v);
            vos.add(v2);
            vos.add(v3);
        }

        //查询本期合计
        List<MultiColumnAccountRespVO> voPeriod = voucherEntryDao.queryMultiColumnPeriodDate(reqVo);
        for(MultiColumnAccountRespVO v1:voPeriod){
            for(MultiColumnAccountRespVO v2: vos){
                String p2 = v2.getPeriodDate();
                p2 = p2.substring(0,p2.lastIndexOf("-"));
                p2 = p2.replace("-","");
                if(p2.equals(v1.getPeriodDate())&&(v2.getVoucherId()==null||v2.getVoucherId().intValue()==0)&&v2.getExplains().contains("本期")){
//                if(p2.equals(v1.getPeriodDate())&&TextUtils.isEmpty(v2.getVoucherNumber())&&v2.getExplains().contains("本期")){
                    v2.setCreditMoney(v1.getCreditMoney());
                    v2.setCreditMoneyFor(v1.getCreditMoneyFor());
                    v2.setDebitMoney(v1.getDebitMoney());
                    v2.setDebitMoneyFor(v1.getDebitMoneyFor());
                }
            }
        }

        //得到范围内的本年累计
        List<MultiColumnAccountRespVO> voYear = voucherEntryDao.queryMultiColumnFinancedDate(reqVo);
        //当前期的本年累计=当前期的本期合计+前面所有期的本期合计
        for(MultiColumnAccountRespVO v2:vos){
            if((v2.getVoucherId()==null||v2.getVoucherId().intValue()==0)&&v2.getExplains().contains("本年")){
                String p2 = v2.getPeriodDate();
                String[] split = p2.split("-");
                Integer year = Integer.parseInt(split[0]);
                Integer period = Integer.parseInt(split[1]);
                BigDecimal creditDecimal = new BigDecimal("0");
                BigDecimal creditForDecimal = new BigDecimal("0");
                BigDecimal debitDecimal = new BigDecimal("0");
                BigDecimal debitForDecimal = new BigDecimal("0");
                for(MultiColumnAccountRespVO v1:voYear){
                    String[] split1 = v1.getPeriodDate().split("-");
                    Integer amountYear = Integer.parseInt(split1[0]);
                    Integer amountPeriod = Integer.parseInt(split1[1]);
                    if(year.intValue() == amountYear.intValue() && period.intValue()<=amountPeriod){
                        creditDecimal = creditDecimal.add(v1.getCreditMoney());
                        creditForDecimal = creditForDecimal.add(v1.getCreditMoneyFor());
                        debitDecimal = debitDecimal.add(v1.getDebitMoney());
                        debitForDecimal = debitForDecimal.add(v1.getDebitMoneyFor());
                    }
                }
            }
        }
        /*for(MultiColumnAccountRespVO v1:voYear){
            for(MultiColumnAccountRespVO v2:vos){
                String p2 = v2.getPeriodDate();
                p2 = p2.substring(0,p2.lastIndexOf("-"));
                p2 = p2.replace("-","");
                if(p2.equals(v1.getPeriodDate())&&(v2.getVoucherId()==null||v2.getVoucherId().intValue()==0)&&v2.getExplains().contains("本年")){
                    BigDecimal creditDecimal = new BigDecimal("0");
                    BigDecimal creditForDecimal = new BigDecimal("0");
                    BigDecimal debitDecimal = new BigDecimal("0");
                    BigDecimal debitForDecimal = new BigDecimal("0");
                    for(MultiColumnAccountRespVO v4:voYear){
                        if(v4.getPeriodDate().compareTo(v1.getPeriodDate())<=0){
                            creditDecimal = creditDecimal.add(v4.getCreditMoney());
                            creditForDecimal = creditForDecimal.add(v4.getCreditMoneyFor());
                            debitDecimal = debitDecimal.add(v4.getDebitMoney());
                            debitForDecimal = debitForDecimal.add(v4.getDebitMoneyFor());
                        }
                    }
                    v2.setCreditMoney(creditDecimal);
                    v2.setCreditMoneyFor(creditForDecimal);
                    v2.setDebitMoney(debitDecimal);
                    v2.setDebitMoneyFor(debitForDecimal);
                }
            }
        }*/

        Collections.sort(vos);

        if (BALANCE_DEBIT.equals(subjectEntity.getBalanceDirection())) {
            for (int i = 1;i<vos.size();i++) {
                MultiColumnAccountRespVO accountVo = vos.get(i);
                accountVo.setDirection(BALANCE_DEBIT);
            }
        }else if(BALANCE_CREDIT.equals(subjectEntity.getBalanceDirection())) {
            for (int i = 1;i<vos.size();i++) {
                MultiColumnAccountRespVO accountVo = vos.get(i);
                accountVo.setDirection(BALANCE_CREDIT);
            }
        }


        for (int i = 1;i<vos.size();i++){
            MultiColumnAccountRespVO currentVo = vos.get(i);
            MultiColumnAccountRespVO preVo = vos.get(i - 1);
            if(currentVo.getVoucherId()==null||currentVo.getVoucherId().intValue()==0){
                currentVo.setBalance(preVo.getBalance());
                currentVo.setBalanceFor(preVo.getBalanceFor());
                continue;
            }
            if(BALANCE_DEBIT.equals(subjectEntity.getBalanceDirection())){
                //上一个节点为借方  上一个节点余额+当前节点数据借方-当前节点贷方
                //余额方向为借方 则 当前节点余额=上一节点余额+当前节点借方-当前节点贷方
                BigDecimal balance = preVo.getBalance();
                balance =  balance.add(currentVo.getDebitMoney());
                balance = balance.subtract(currentVo.getCreditMoney());
                currentVo.setBalance(balance);
                if(preVo.getBalanceFor()!=null&&preVo.getDebitMoneyFor()!=null&&preVo.getCreditMoneyFor()!=null){
                    BigDecimal balanceFor = preVo.getBalanceFor();
                    balanceFor = balanceFor.add(currentVo.getDebitMoneyFor());
                    balanceFor = balanceFor.subtract(currentVo.getCreditMoneyFor());
                    currentVo.setBalanceFor(balanceFor);
                }else{
                    currentVo.setBalanceFor(new BigDecimal("0"));
                }
                if (balance.compareTo(BigDecimal.ZERO)==0){
                    currentVo.setDirection(BALANCE_EQUAL);
                }
            }else if(BALANCE_CREDIT.equals(subjectEntity.getBalanceDirection())){
                //上一个节点为贷方  上一个节点余额-当前节点数据借方+当前节点带贷方
                BigDecimal balance = preVo.getBalance();
                balance = balance.subtract(currentVo.getDebitMoney());
                balance = balance.add(currentVo.getCreditMoney());
                currentVo.setBalance(balance);

                if(preVo.getBalanceFor()!=null&&currentVo.getDebitMoneyFor()!=null&&currentVo.getCreditMoneyFor()!=null){
                    BigDecimal balanceFor = preVo.getBalanceFor();
                    balanceFor = balanceFor.subtract(currentVo.getDebitMoneyFor());
                    balanceFor = balanceFor.add(currentVo.getCreditMoneyFor());
                    currentVo.setBalanceFor(balanceFor);
                }else{
                    currentVo.setBalanceFor(new BigDecimal("0"));
                }
                if (balance.compareTo(BigDecimal.ZERO)==0){
                    currentVo.setDirection(BALANCE_EQUAL);
                }
            }
        }
        for(MultiColumnAccountRespVO vo:vos){
            if(BALANCE_DEBIT.equals(vo.getDirection())){
                vo.setDirectionStr("借");
            }else if(BALANCE_CREDIT.equals(vo.getDirection())){
                vo.setDirectionStr("贷");
            }
            if((vo.getCreditMoney() == null&&vo.getDebitMoney() == null)||
                    (vo.getDebitMoney().compareTo(BigDecimal.ZERO) == 0&&vo.getCreditMoney().compareTo(BigDecimal.ZERO)==0)){
                vo.setDirectionStr("平");
            }
        }

        //获取表头信息
        Map<String,Object> header = new HashMap<>();
        if(BALANCE_DEBIT.equals(subjectEntity.getBalanceDirection())){
            //借方
            for(MultiColumnAccountRespVO vo:vos){
                vo.setDirection(BALANCE_DEBIT);
            }
            header.put("title","借方");
        }else{
            for(MultiColumnAccountRespVO vo:vos){
                vo.setDirection(BALANCE_CREDIT);
            }
            header.put("title","贷方");
        }

        //科目表头
        List<Map> titles = voucherEntryDao.queryTitle(reqVo);
/*
        Map<String,Object> colModelMap1 = new HashMap<>();
        Map<String,Object> colModelMap2 = new HashMap<>();
        Map<String,Object> colModelMap3 = new HashMap<>();
        Map<String,Object> colModelMap4 = new HashMap<>();
        Map<String,Object> colModelMap5 = new HashMap<>();
        Map<String,Object> colModelMap6 = new HashMap<>();
        Map<String,Object> colModelMap7 = new HashMap<>();
        colModelMap1.put("name","periodDate");
        colModelMap1.put("align","center");
        colModelMap1.put("width","110");
        colModelMap1.put("sortable","false");

        colModelMap2.put("name","voucherNumber");
        colModelMap2.put("align","center");
        colModelMap2.put("width","110");
        colModelMap2.put("sortable","false");

        colModelMap3.put("name","explains");
        colModelMap3.put("align","center");
        colModelMap3.put("width","110");
        colModelMap3.put("sortable","false");

        colModelMap4.put("name","debitMoney");
        colModelMap4.put("align","center");
        colModelMap4.put("width","110");
        colModelMap4.put("sortable","false");

        colModelMap5.put("name","creditMoney");
        colModelMap5.put("align","center");
        colModelMap5.put("width","110");
        colModelMap5.put("sortable","false");

        colModelMap6.put("name","directionStr");
        colModelMap6.put("align","center");
        colModelMap6.put("width","110");
        colModelMap6.put("sortable","false");

        colModelMap7.put("name","balance");
        colModelMap7.put("align","center");
        colModelMap7.put("width","110");
        colModelMap7.put("sortable","false");

        colModel.add(colModelMap1);
        colModel.add(colModelMap2);
        colModel.add(colModelMap3);
        colModel.add(colModelMap4);
        colModel.add(colModelMap5);
        colModel.add(colModelMap6);
        colModel.add(colModelMap7);*/

        if(reqVo.getProjectItemClassId() == null){
            for(Map map:titles){
                if(!colNames.contains(map.get("subjectName").toString())){
                    colNames.add(map.get("subjectName").toString());
                    Map<String,Object> colModelMap = new HashMap<>();
                    colModelMap.put("name",map.get("subjectCode").toString());
                    colModelMap.put("align","center");
                    colModelMap.put("width","100");
                    colModelMap.put("sortable","false");
                    colModel.add(colModelMap);
                }
            }
        }

        header.put("colNames",colNames);
        if(colModel.size()>7){
            header.put("startTitle",colModel.get(7).get("name").toString());
        }
        header.put("colModel",colModel);
        resultMap.put("header",header);
        List<Map> resultList = new ArrayList<>();
        //设置多栏数据
        try {
            for(MultiColumnAccountRespVO vo:vos){
                Map<String, Object> map = objectToMap(vo);
                resultList.add(map);
            }
        } catch (Exception e) {
            return null;
        }
//        if(reqVo.getProjectItemClassId() == null){
            for(Map map:resultList){
                //借
                BigDecimal debitMoney = (BigDecimal) map.get("debitMoney");
                BigDecimal debitMoneyFor = (BigDecimal)map.get("debitMoneyFor");
                //贷方金额
                BigDecimal creditMoney = (BigDecimal) map.get("creditMoney");
                BigDecimal creditMoneyFor = (BigDecimal)map.get("creditMoneyFor");
                if(map.get("voucherNumber") == null || TextUtils.isEmpty(map.get("voucherNumber").toString())){

                }else{
                    String subjectCode = map.get("subjectCode").toString();
                    if(BALANCE_DEBIT.equals(subjectEntity.getBalanceDirection())){
                        //科目方向-借
                        if(debitMoney == null || debitMoney.compareTo(BigDecimal.ZERO)==0){
                            creditMoney = creditMoney.multiply(new BigDecimal(-1));
//                            creditMoneyFor = creditMoneyFor.multiply(new BigDecimal(-1));
                            map.put(subjectCode,creditMoney);
                        }else{
                            map.put(subjectCode,debitMoney);
                        }
                    }else{
                        if(creditMoney == null || creditMoney.compareTo(BigDecimal.ZERO)==0){
                            debitMoney = debitMoney.multiply(new BigDecimal(-1));
//                            debitMoneyFor = debitMoneyFor.multiply(new BigDecimal(-1));
                            map.put(subjectCode,debitMoney);
                        }else{
                            map.put(subjectCode,creditMoney);
                        }
                    }
                }
            }
//        }


        Iterator<Map> iterator = resultList.iterator();
        while(iterator.hasNext()){
            Map<String,Object> map = iterator.next();
            if(map!=null&&!map.get("explains").toString().contains("期初")){

                if(reqVo.getNoShowAndHappenZero().intValue() == 1){
                    //勾选无发生额且余额为0不显示
                    if((map.get("voucherId") == null||Integer.parseInt(map.get("voucherId").toString()) == 0)){
                        if(map.get("debitMoney") == null && map.get("creditMoney") == null&&map.get("balance") == null){
                            iterator.remove();
                        }else{
                            BigDecimal debitMoney = new BigDecimal(map.get("debitMoney").toString());
                            BigDecimal creditMoney = new BigDecimal(map.get("creditMoney").toString());
                            BigDecimal balance = new BigDecimal(map.get("balance").toString());
                            if(debitMoney.compareTo(BigDecimal.ZERO) == 0 && creditMoney.compareTo(BigDecimal.ZERO) == 0&&balance.compareTo(BigDecimal.ZERO) == 0){
                                iterator.remove();
                            }
                        }
                    }
                }else{
                    if(reqVo.getNoShowAndHappen().intValue() == 1){
                        //勾选无发生额不显示
                        if((map.get("voucherId") == null||Integer.parseInt(map.get("voucherId").toString()) == 0)){
                            if(map.get("debitMoney") == null && map.get("creditMoney") == null){
                                iterator.remove();
                            }else{
                                BigDecimal debitMoney = new BigDecimal(map.get("debitMoney").toString());
                                BigDecimal creditMoney = new BigDecimal(map.get("creditMoney").toString());
                                if(debitMoney.compareTo(BigDecimal.ZERO) == 0 && creditMoney.compareTo(BigDecimal.ZERO) == 0){
                                    iterator.remove();
                                }
                            }
                        }
                    }

                }
                //勾选余额为0且无发生额不显示  没有勾选无发生额不显示
                /*if(reqVo.getNoShowAndHappenZero() == 1&&reqVo.getNoShowAndHappen() == 0){
                    if((map.get("voucherId") == null||Integer.parseInt(map.get("voucherId").toString()) == 0)){
                        if(map.get("debitMoney") == null && map.get("creditMoney") == null&&map.get("balance") == null){
                            iterator.remove();
                        }else{
                            BigDecimal debitMoney = new BigDecimal(map.get("debitMoney").toString());
                            BigDecimal creditMoney = new BigDecimal(map.get("creditMoney").toString());
                            BigDecimal balance = new BigDecimal(map.get("balance").toString());
                            if(debitMoney.compareTo(BigDecimal.ZERO) == 0 && creditMoney.compareTo(BigDecimal.ZERO) == 0&&balance.compareTo(BigDecimal.ZERO) == 0){
                                iterator.remove();
                            }
                        }
                    }
                }else if(reqVo.getNoShowAndHappenZero() == 1&&reqVo.getNoShowAndHappen() == 1){
                    //勾选余额为0且无发生额不显示  勾选无发生额不显示


                }else if(reqVo.getNoShowAndHappenZero() == 0&&reqVo.getNoShowAndHappen() == 1){
                    //没有勾选余额为0且无发生额不显示  勾选无发生额不显示
                    if((map.get("voucherId") == null||Integer.parseInt(map.get("voucherId").toString()) == 0)){
                        if(map.get("debitMoney") == null && map.get("creditMoney") == null){
                            iterator.remove();
                        }else{
                            BigDecimal debitMoney = new BigDecimal(map.get("debitMoney").toString());
                            BigDecimal creditMoney = new BigDecimal(map.get("creditMoney").toString());
                            if(debitMoney.compareTo(BigDecimal.ZERO) == 0 && creditMoney.compareTo(BigDecimal.ZERO) == 0){
                                iterator.remove();
                            }
                        }
                    }
                }*/
            }
        }
        logger.info("resultList start set yeardata: {}",JsonUtil.objToJson(resultList));
        //处理无发生额 本年累计数据
        for(Map map:resultList){
            if((map.get("voucherId") == null||Integer.parseInt(map.get("voucherId").toString()) == 0)) {
                if(map.get("explains")!=null&&map.get("explains").toString().contains("本年")){
                    if (map.get("debitMoney") == null && map.get("creditMoney") == null||(
                            new BigDecimal(map.get("debitMoney").toString()).compareTo(BigDecimal.ZERO) == 0&&
                                    new BigDecimal(map.get("creditMoney").toString()).compareTo(BigDecimal.ZERO) == 0)) {
                        String periodDate = map.get("periodDate").toString();
                        String[] args = periodDate.split("-");
                        //月
                        Integer month = Integer.parseInt(args[1]);
                        //年
                        Integer year = Integer.parseInt(args[0]);
                        Integer newMonth = month-1;
                        if(newMonth<1){
                            newMonth = 12;
                            year = year-1;
                        }
                        String m = "";
                        if(newMonth<10){
                            m = "0"+newMonth;
                        }else{
                            m = newMonth+"";
                        }
                        String newDate = year+"-"+m;
                        for(Map m2:resultList){
                            String p2 = m2.get("periodDate").toString();
                            if(p2.contains(newDate)&&m2.get("explains").toString().contains("本年")){

                                map.put("debitMoney",m2.get("debitMoney"));
                                map.put("creditMoney",m2.get("creditMoney"));
                                logger.info("debitMoney: {}",m2.get("debitMoney"));
                                logger.info("creditMoney: {}",m2.get("creditMoney"));
                                /*if(BALANCE_DEBIT==subjectEntity.getBalanceDirection()){
                                    //借
                                    map.put("debitMoney",m2.get("debitMoney"));
                                    logger.info("debitMoney: {}",m2.get("debitMoney"));
                                }else if(BALANCE_CREDIT==subjectEntity.getBalanceDirection()){
                                    map.put("creditMoney",m2.get("creditMoney"));
                                    logger.info("creditMoney: {}",m2.get("creditMoney"));
                                }*/
                            }
                        }
                    }
                }
            }
        }


        //核算项目表头
        List<Long>  projectTitles = voucherEntryDao.queryTitleWithProject(reqVo);
        resultMap.put("list",resultList);
        resultMap.put("subjectName",subjectEntity.getSubjectName());
        resultMap.put("projectTitles",projectTitles);
        resultMap.put("direction",subjectEntity.getBalanceDirection());
        logger.info("resultMap entity: {}",JsonUtil.objToJson(resultMap));
        return resultMap;
    }

    public static Map<String, Object> objectToMap(Object obj) throws Exception {
        if(obj == null){
            return null;
        }

        Map<String, Object> map = new HashMap<String, Object>();

        BeanInfo beanInfo = Introspector.getBeanInfo(obj.getClass());
        PropertyDescriptor[] propertyDescriptors = beanInfo.getPropertyDescriptors();
        for (PropertyDescriptor property : propertyDescriptors) {
            String key = property.getName();
            if (key.compareToIgnoreCase("class") == 0) {
                continue;
            }
            Method getter = property.getReadMethod();
            Object value = getter!=null ? getter.invoke(obj) : null;
            map.put(key, value);
        }
        return map;
    }

}