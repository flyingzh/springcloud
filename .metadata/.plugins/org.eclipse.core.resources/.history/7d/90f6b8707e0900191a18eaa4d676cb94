package com.htrfid.financeapp.service.impl;

import java.math.BigDecimal;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Calendar;
import java.util.Comparator;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.function.Function;
import java.util.stream.Collectors;

import javax.servlet.http.HttpServletResponse;

import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.CellStyle;
import org.apache.poi.ss.usermodel.CellType;
import org.apache.poi.ss.usermodel.HorizontalAlignment;
import org.apache.poi.ss.usermodel.IndexedColors;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Sheet;
import org.apache.poi.ss.usermodel.Workbook;
import org.apache.poi.ss.util.CellRangeAddress;
import org.apache.poi.xssf.usermodel.XSSFCell;
import org.apache.poi.xssf.usermodel.XSSFFont;
import org.apache.poi.xssf.usermodel.XSSFRow;
import org.apache.poi.xssf.usermodel.XSSFSheet;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.util.CollectionUtils;
import org.springframework.web.multipart.MultipartFile;

import com.alibaba.fastjson.TypeReference;
import com.google.gson.Gson;
import com.google.gson.reflect.TypeToken;
import com.htrfid.basedata.entity.TBaseAccountProjectEntity;
import com.htrfid.basedata.entity.TBaseCurrencyMaintainEntity;
import com.htrfid.basedata.entity.TBaseSupplierEntity;
import com.htrfid.basedata.entity.TBaseUnitEntity;
import com.htrfid.basedata.entity.TBaseVoucherDataEntity;
import com.htrfid.basedata.entity.TbaseAccountSubjectEntity;
import com.htrfid.basedata.vo.TBaseUnitVo;
import com.htrfid.common.remote.TBaseAccountSubjectRemoteService;
import com.htrfid.common.remote.TBaseCurrencyRemoteService;
import com.htrfid.common.remote.TBaseWareHouseRemoteService;
import com.htrfid.constant.EnumConstant;
import com.htrfid.exception.MyException;
import com.htrfid.finance.entity.VoucherEntity;
import com.htrfid.finance.entity.VoucherEntryEntity;
import com.htrfid.finance.entity.VoucherExpEntity;
import com.htrfid.finance.vo.VoucherEntryVo;
import com.htrfid.finance.vo.VoucherQueryResultVO;
import com.htrfid.finance.vo.VoucherQueryVO;
import com.htrfid.finance.vo.VoucherVO;
import com.htrfid.financeapp.common.Constant;
import com.htrfid.financeapp.common.SystemProfileConstant;
import com.htrfid.financeapp.controller.VoucherController;
import com.htrfid.financeapp.remote.AccountProjectRemoteService;
import com.htrfid.financeapp.remote.AccountingRemoteService;
import com.htrfid.financeapp.remote.SystemProfileRemoteService;
import com.htrfid.financeapp.remote.TBaseCustomerRemoteService;
import com.htrfid.financeapp.remote.TBaseSupplierRemoteService;
import com.htrfid.financeapp.remote.VoucherExpRemoteService;
import com.htrfid.financeapp.remote.VoucherRemoteService;
import com.htrfid.financeapp.service.CommonService;
import com.htrfid.financeapp.service.VoucherService;
import com.htrfid.financeapp.util.ExportUtil;
import com.htrfid.financeapp.util.ResponseUtil;
import com.htrfid.financeapp.util.Tools;
import com.htrfid.financeapp.vo.ResponseVO;
import com.htrfid.remote.basedata.TBaseCommodityRemoteService;
import com.htrfid.remote.basedata.TBaseUnitRemoteService;
import com.htrfid.remote.basedata.TBaseVoucherDataRemoteService;
import com.htrfid.remote.sysmanager.EmployeeRemoteService;
import com.htrfid.remote.sysmanager.SysDeptManagerRemoteService;
import com.htrfid.shiro.utils.UserUtils;
import com.htrfid.sysmanager.entity.SysDepartment;
import com.htrfid.sysmanager.entity.SysEmployee;
import com.htrfid.sysmanager.entity.SysUser;
import com.htrfid.util.DateConverUtil;
import com.htrfid.util.JsonUtil;
import com.htrfid.util.Result;
import com.htrfid.util.StringUtils;

/**
 * @author lirui
 * @version V1.0
 * @className VoucherServiceImpl
 * @description 凭证整体服务实现类
 * @email lr@htrfid.com
 * @date 2018-06-15 8:38
 **/
@Service
public class VoucherServiceImpl implements VoucherService {

    private final static Logger logger = LoggerFactory.getLogger(VoucherServiceImpl.class);

    @Autowired
    private SystemProfileRemoteService systemProfileRemoteService;
    @Autowired
    private AccountingRemoteService accountingRemoteService;
    @Autowired
    private VoucherRemoteService voucherRemoteService;
    @Autowired
    private VoucherExpRemoteService voucherExpService;

    @Autowired
    private TBaseVoucherDataRemoteService voucherDataRemoteService;
    @Autowired
    private TBaseAccountSubjectRemoteService accountSubjectRemoteService;
    /** 核算项目 **/
    @Autowired
    private AccountProjectRemoteService accountProjectRemoteService;
    /** 客户remoteService **/
    @Autowired
    private TBaseCustomerRemoteService customerRemoteService;
    /** 部门remoteService **/
    @Autowired
    private SysDeptManagerRemoteService sysDeptManagerRemoteService;
    /** 供应商remoteService **/
    @Autowired
    private TBaseSupplierRemoteService supplierRemoteService;
    /** 仓库 remoteService **/
    @Autowired
    private TBaseWareHouseRemoteService warehouseInfoRemoteService;
    /** 货币列表 **/
    @Autowired
    private TBaseCurrencyRemoteService currencyMaintainRemoteService;
    /** 计量单位 **/
    @Autowired
    private TBaseUnitRemoteService tBaseUnitRemoteService;
    @Autowired
    private EmployeeRemoteService employeeRemoteService;

    @Autowired
    private CommonService commonService;

    @Autowired
    private TBaseCommodityRemoteService tBaseCommodityRemoteService;

    /**
    * @description: 获取凭证号
    * @author zhengfei
    * @eamil 936864724@qq.com
    * @date 2018-06-21 8:50
     * @param sobId 账套id
     * @param voucherGroupId 凭证字id
    * @return java.lang.Integer
    */
    @Override
    public Integer getSerialNum(Long sobId, Long voucherGroupId,Integer accountYear,Integer accountPeriod) {
//        Integer currentAccountYear = null;
//        Integer currentAccountPeriod = null;
        Integer serialNum = 0;
        //总账当前会计年度
       /* Result ret = systemProfileRemoteService.getSystemProfileValue(SystemProfileConstant.FINACE_CURRENT_ACCOUNTING_YEAR, sobId.toString());
        if(ret != null && EnumConstant.PUBLIC.CODE_YES.getValue().equals(ret.getCode())){
            String currentAccountYearStr = (String)ret.getData();
            currentAccountYear = Integer.parseInt(currentAccountYearStr);
        }*/
//        currentAccountYear = getCurrentAccountYear(sobId);
        //总账当前会计期间
      /*  ret = systemProfileRemoteService.getSystemProfileValue(SystemProfileConstant.FINACE_CURRENT_ACCOUNTING_PERIOD, sobId.toString());
        if(ret != null && EnumConstant.PUBLIC.CODE_YES.getValue().equals(ret.getCode())){
            String currentAccountPeriodStr = (String)ret.getData();
            currentAccountPeriod = Integer.parseInt(currentAccountPeriodStr);
        }*/
//        currentAccountPeriod = getCurrentAccountPeriod(sobId);
        //获取最大凭证号
        Result serialNumData = voucherRemoteService.getSerialNum(sobId, voucherGroupId, accountYear, accountPeriod);
        if(serialNumData != null && EnumConstant.PUBLIC.CODE_YES.getValue().equals(serialNumData.getCode())){
            serialNum = (Integer) serialNumData.getData();
        }
        return serialNum+1;
    }

    /**
    * @description:查询当前会计年度
    * @author zhengfei
    * @eamil 936864724@qq.com
    * @date 2018-06-21 11:25
    * @return java.lang.Integer
    */
    public Integer getCurrentAccountYear(Long sobId){
    	return commonService.getCurrentAccountYear(sobId,SystemProfileConstant.FINANCE_CURRENT_ACCOUNTING_YEAR);
       /* //总账当前会计年度
        Result ret = systemProfileRemoteService.getSystemProfileValue(SystemProfileConstant.FINANCE_CURRENT_ACCOUNTING_YEAR, sobId.toString());
        if(ret != null && EnumConstant.PUBLIC.CODE_YES.getValue().equals(ret.getCode())){
            String currentAccountYearStr = (String)ret.getData();
            return Integer.parseInt(currentAccountYearStr);
        }
        return null;*/
    }
/**
    * @description:获取会计区间
    * @author zhengfei
    * @eamil 936864724@qq.com
    * @date 2018-06-21 11:27
    * @param sobId 账套id
    * @return java.lang.Integer
    */
    public Integer getCurrentAccountPeriod(Long sobId){
/*        Result  ret = systemProfileRemoteService.getSystemProfileValue(SystemProfileConstant.FINANCE_CURRENT_ACCOUNTING_PERIOD, sobId.toString());
        if(ret != null && EnumConstant.PUBLIC.CODE_YES.getValue().equals(ret.getCode())){
            String currentAccountPeriodStr = (String)ret.getData();
            return  Integer.parseInt(currentAccountPeriodStr);
        }*/
        return commonService.getCurrentAccountYear(sobId,SystemProfileConstant.FINANCE_CURRENT_ACCOUNTING_PERIOD);
    }

    /**
    * @description:获取会计期间开始日期
    * @author zhengfei
    * @eamil 936864724@qq.com
    * @date 2018-06-21 11:27
    * @param sobId 账套id
    * @return java.lang.Integer
    */
    public String getAccountPeriodStartDate(Long sobId){
        Result  ret = systemProfileRemoteService.getSystemProfileValue(SystemProfileConstant.ACCOUNTING_PERIOD_START_DATE, sobId.toString());
        if(ret != null && EnumConstant.PUBLIC.CODE_YES.getValue().equals(ret.getCode())){
            return  (String)ret.getData();
        }
        return null;
    }

    @Override
    public Map judgmentPeriod(Long sobId, String currentDate)  {
        Map map = new HashMap(5);
        int currentAccountYear = 0;
        int currentAccountPeriod = 0;
        int  accountYear = 0;
        int  accountPeriod = 0;
        //总账当前会计年度
        Result ret = systemProfileRemoteService.getSystemProfileValue(SystemProfileConstant.FINANCE_CURRENT_ACCOUNTING_YEAR, sobId.toString());
        if(ret != null && EnumConstant.PUBLIC.CODE_YES.getValue().equals(ret.getCode())){
            String currentAccountYearStr = (String)ret.getData();
            currentAccountYear = Integer.parseInt(currentAccountYearStr);
        }
        //总账当前会计期间
        ret = systemProfileRemoteService.getSystemProfileValue(SystemProfileConstant.FINANCE_CURRENT_ACCOUNTING_PERIOD, sobId.toString());
        if(ret != null && EnumConstant.PUBLIC.CODE_YES.getValue().equals(ret.getCode())){
            String currentAccountPeriodStr = (String)ret.getData();
            currentAccountPeriod = Integer.parseInt(currentAccountPeriodStr);
        }
        //选中时间转换为会计年度和会计期间表示
        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
        ret = accountingRemoteService.getAccountingYearAndPeriod(currentDate, sobId);
        if(ret != null && EnumConstant.PUBLIC.CODE_YES.getValue().equals(ret.getCode())){
            map = (Map)ret.getData();
            accountYear = (Integer) map.get("accountYear");
            accountPeriod = (Integer)map.get("accountPeriod");

            map.put("allowable",-1);
            if(accountYear > currentAccountYear || (accountYear == currentAccountYear && accountPeriod >= currentAccountPeriod)){
                map.put("allowable",1);
            }
        }
        return map;
    }

    /**
    * @description: 新增或更新凭证
    * @author zhengfei
    * @eamil 936864724@qq.com
    * @date 2018-06-22 10:34
    * @param voucherVO
    * @return java.lang.Integer
    */
    @SuppressWarnings("unchecked")
	@Override
    public Result saveOrUpdateVoucher(VoucherVO voucherVO) throws MyException{
        SysUser currentUser = UserUtils.getCurrentUser();
        //根据科目id查询科目信息  --是否有核算项目  是否有外币核算和数量核算
        List<VoucherEntryVo> entryVoList = voucherVO.getEntryVoList();
        for(VoucherEntryVo vo:entryVoList){
            VoucherEntryEntity voucher = vo.getVoucher();
            Map<String, Object> resultParam = getListBySubjectId(voucher.getAccountId());
            resultParam.get("opts");
            resultParam.get("unitId");
            if(resultParam.get("unitId") == null){
                //无数量核算
                voucher.setQuantity(null);
            }else{
                if(voucher.getQuantity() == null){
                    return Result.error("操作失败，数量为空");
                }
            }
            if(resultParam.get("opts")==null){
                //无核算项目
                vo.setOpts(null);
            }else{
                List<Integer> opts = (List<Integer>) resultParam.get("opts");
                if(opts.size() == 0){
                    //无核算项目
                	if(vo.getOpts() != null&&vo.getOpts().size() != 0) {
                		return Result.error("操作失败，科目不存在核算项目");
                	}
                    vo.setOpts(null);
                }else{
                    if(vo.getOpts() == null||vo.getOpts().size() == 0){
                        return Result.error("操作失败，核算项目为空");
                    }
                }
            }
            if(resultParam.get("foreignCurrencyId")!=null){
                Integer foreignCurrencyId = Integer.parseInt(resultParam.get("foreignCurrencyId").toString());
                if(foreignCurrencyId.intValue() == -2){
                    //不进行外币核算
                    voucher.setCurrencyId(null);
                    voucher.setCurrencyName(null);
                }else if(foreignCurrencyId.intValue() == -1){
                    //有外币核算
                    if(voucher.getCurrencyId() == null){
                        return Result.error("操作失败，外币核算为空");
                    }
                }
            }
        }
        Result resultData = voucherRemoteService.saveOrUpdate(voucherVO,currentUser.getId(),currentUser.getUsername());
        return resultData;
    }

    /**
    * @description: 查询凭证
    * @author zhengfei
    * @eamil 936864724@qq.com
    * @date 2018-06-25 19:25
    * @param sobId, voucherId
    * @return com.htrfid.finance.vo.VoucherVO
    */
    @Override
    public VoucherVO infoVoucher(Long sobId, Long voucherId) throws MyException {
        VoucherVO voucherVO = new VoucherVO();
        VoucherEntity entity = new VoucherEntity();
        entity.setSobId(sobId);
        entity.setId(voucherId);
        entity.setStatus(Constant.VOUCHER_REGULAR);
        logger.info("the infoVoucher request args: {}",JsonUtil.objToJson(entity));
        Result result = voucherRemoteService.infoVoucher(entity);
        logger.info("voucherVo result entity: {}",JsonUtil.objToJson(result));
        if(result!=null&&EnumConstant.PUBLIC.CODE_YES.getValue().equals(result.getCode())){
            voucherVO = ResponseUtil.getResult(result,
                    new TypeReference<ResponseVO<VoucherVO>>() {});
        }
        logger.info("voucherVo entity: {}",JsonUtil.objToJson(voucherVO));

        List<VoucherEntryVo> entryVoList = voucherVO.getEntryVoList();
        for(VoucherEntryVo entryVo:entryVoList){
            VoucherEntryEntity voucher = entryVo.getVoucher();
            Map<String, Object> subjectMap = getListBySubjectId(voucher.getAccountId());
            if(subjectMap.get("foreignCurrencyId") == null){
                voucher.setHasCurrencyShow(false);
            }else{
            	Long foreignCurrencyId = Long.parseLong(subjectMap.get("foreignCurrencyId").toString());
                if(foreignCurrencyId.intValue() == -2 || foreignCurrencyId.intValue() == getStandardCurrencyId(sobId).intValue()) {
                    voucher.setHasCurrencyShow(false);
                } else {
                    voucher.setHasCurrencyShow(true);
                }
                voucher.setForeignCurrencyId(foreignCurrencyId);
            }

            if(subjectMap.get("unitId")==null) {
                //没有数量核算
                voucher.setHasQuantityShow(false);
            }else{
                voucher.setHasQuantityShow(true);
                voucher.setUnitId(subjectMap.get("unitId").toString());
            }
        }

        return voucherVO;
    }

    @Override
    public Map<String,Object> initVoucher() throws MyException {
        List<TBaseVoucherDataEntity> voucherDataList = null;
        //凭证摘要
        List<VoucherExpEntity> voucherExpList = null;
        List<TbaseAccountSubjectEntity> accountSubjectList = null;
        /*//核算项目客户列表
        List<TBaseCustomerEntity> customerList = null;
        //核算项目部门列表
        List<SysDepartment> sysDepList = null;
        //核算项目职员列表
        List<SysEmployee> employeeList = null;
        //核算项目供应商
        List<TBaseSupplierEntity> supplierList = null;
        //核算项目仓库
        List<TBaseWarehouseInfoEntity> wareHouseList = null;*/
        SysUser user = UserUtils.getCurrentUser();
        Long sobId = user.getUserCurrentOrganId();
        Map<String,Object> param = new HashMap<>();
        //获取凭证字
        Result result = voucherDataRemoteService.queryAll(sobId);
        if(result!=null&&EnumConstant.PUBLIC.CODE_YES.getValue().equals(result.getCode())){
           voucherDataList = ResponseUtil.getResult(result,
                    new TypeReference<ResponseVO<List<TBaseVoucherDataEntity>>>() {});
        }
        /*Iterator<TBaseVoucherDataEntity> iterator = voucherDataList.iterator();
        while (iterator.hasNext()){
            TBaseVoucherDataEntity entity = iterator.next();
            if(entity.getIsDel() != Constant.PUBLIC_IS_DEFAULT_NO){
                iterator.remove();
            }
        }*/
        param.put("voucherDataList",voucherDataList);

        //获取摘要列表
        Result voucherExps = voucherExpService.list(new VoucherExpEntity());
        if(voucherExps !=null && EnumConstant.PUBLIC.CODE_YES.getValue().equals(voucherExps.getCode())){
            voucherExpList = ResponseUtil.getResult(voucherExps,new TypeReference<ResponseVO<List<VoucherExpEntity>>>(){});
        }
        param.put("voucherExpList",voucherExpList);
        //获取会计科目列表、核算项目
        Result aubjectList = accountSubjectRemoteService.getAllLeafNode(sobId);
        if(aubjectList !=null && EnumConstant.PUBLIC.CODE_YES.getValue().equals(aubjectList.getCode())){
            accountSubjectList = ResponseUtil.getResult(aubjectList,new TypeReference<ResponseVO<List<TbaseAccountSubjectEntity>>>(){});
            if(accountSubjectList.isEmpty()&&accountSubjectList.size()==0){
                  return  null;
            }
        }
        List<SubjectEntity> subjectEntityList = new ArrayList<>();
        for(TbaseAccountSubjectEntity subEntity:accountSubjectList){
            SubjectEntity entity = new SubjectEntity();
            entity.setLabel(subEntity.getSubjectName());
            entity.setValue(subEntity.getSubjectCode());
            entity.setId(subEntity.getId());
            entity.setFullName(subEntity.getFullName());
            List<Long> opts = new ArrayList<>();
            if(subEntity.getAccountProjectList()!=null&&subEntity.getAccountProjectList().size()>0){
               List<TBaseAccountProjectEntity> projectEntities =  subEntity.getAccountProjectList();
                for (TBaseAccountProjectEntity projectEntity:projectEntities){
                    opts.add(projectEntity.getId());
                }
            }
            entity.setOpts(opts);
            subjectEntityList.add(entity);
        }
        param.put("accountSubjectList",subjectEntityList);
        //获取核算项目具体信息
        Map<String, Object> projectEntity = commonService.getNewDetailProjectList(sobId);
        /*//客户
        Result allCustomer = customerRemoteService.queryAllCustomer(Constant.ACCOUNT_PROJECT_CUSTOMER,sobId);
        if(allCustomer !=null && EnumConstant.PUBLIC.CODE_YES.getValue().equals(allCustomer.getCode())){
            customerList = ResponseUtil.getResult(allCustomer,new TypeReference<ResponseVO<List<TBaseCustomerEntity>>>(){});
            if(customerList!=null&&customerList.size()>0){
                Map<String,Object> p1 = new HashMap<>();
                p1.put("label","客户");
                Map<String,Object> p11 = new HashMap<>();
                for(TBaseCustomerEntity customerEntity : customerList){
                    p11.put(customerEntity.getId()+"",customerEntity.getName());
                }
                p1.put("list",p11);
                projectEntity.put(Constant.ACCOUNT_PROJECT_CUSTOMER.toString(),p1);
            }
        }
        //部门
        Result bydepAll = sysDeptManagerRemoteService.queryAllDept();
        if(bydepAll !=null && EnumConstant.PUBLIC.CODE_YES.getValue().equals(bydepAll.getCode())){
            sysDepList = ResponseUtil.getResult(bydepAll,new TypeReference<ResponseVO<List<SysDepartment>>>(){});
            if(sysDepList!=null&&sysDepList.size()>0){
                Map<String,Object> p2 = new HashMap<>();
                p2.put("label","部门");
                Map<String,Object> p21 = new HashMap<>();
                for(SysDepartment sysDepartment:sysDepList){
                    p21.put(sysDepartment.getId()+"",sysDepartment.getDepName());
                }
                p2.put("list",p21);
                projectEntity.put(Constant.ACCOUNT_PROJECT_DEPARTMENT.toString(),p2);
            }
        }
        //职员
        Result emps = sysDeptManagerRemoteService.queryAllEmp();
        if(emps !=null && EnumConstant.PUBLIC.CODE_YES.getValue().equals(emps.getCode())){
            employeeList = ResponseUtil.getResult(emps,new TypeReference<ResponseVO<List<SysEmployee>>>(){});
            if(employeeList!=null&&employeeList.size()>0){
                Map<String,Object> p3 = new HashMap<>();
                p3.put("label","职员");
                Map<String,Object> p31 = new HashMap<>();
                for(SysEmployee employee:employeeList){
                    p31.put(employee.getId()+"",employee.getEmpName());
                }
                p3.put("list",p31);
                projectEntity.put(Constant.ACCOUNT_PROJECT_EMPLOYEE.toString(),p3);
            }
        }

        //仓库
        Result wareHouseResult = warehouseInfoRemoteService.querySpecificWareHouse(null,null,null);
        if(wareHouseResult !=null && EnumConstant.PUBLIC.CODE_YES.getValue().equals(wareHouseResult.getCode())){
            wareHouseList = ResponseUtil.getResult(wareHouseResult,new TypeReference<ResponseVO<List<TBaseWarehouseInfoEntity>>>(){});
            if(wareHouseList!=null&&wareHouseList.size()>0){
                Map<String,Object> p4 = new HashMap<>();
                p4.put("label","仓库");
                Map<String,Object> p41 = new HashMap<>();
                for(TBaseWarehouseInfoEntity warehouseInfoEntity:wareHouseList){
                    p41.put(warehouseInfoEntity.getId()+"",warehouseInfoEntity.getName());
                }
                p4.put("list",p41);
                projectEntity.put(Constant.ACCOUNT_PROJECT_WAREHOUSE.toString(),p4);
            }
        }

        //有效供应商列表
        Result allSupplier = supplierRemoteService.queryAllSupplier(1,sobId);
        if(allSupplier !=null && EnumConstant.PUBLIC.CODE_YES.getValue().equals(allSupplier.getCode())){
            supplierList = ResponseUtil.getResult(allSupplier,new TypeReference<ResponseVO<List<TBaseSupplierEntity>>>(){});
            if(supplierList!=null&&supplierList.size()>0){
                Map<String,Object> p5 = new HashMap<>();
                p5.put("label","供应商");
                Map<String,Object> p51 = new HashMap<>();
                for(TBaseSupplierEntity supplierEntity:supplierList){
                    p51.put(supplierEntity.getId()+"",supplierEntity.getSupplierName());
                }
                p5.put("list",p51);
                projectEntity.put(Constant.ACCOUNT_PROJECT_SUPPLIER.toString(),p5);
            }
        }*/
        //获取会计期间
        //获取当前会计年度
        Integer currentAccountYear = getCurrentAccountYear(sobId);
        param.put("currentAccountYear",currentAccountYear);
        SimpleDateFormat df = new SimpleDateFormat("yyyy-MM-dd");
        //获取当前会计期数
        Integer currentAccountPeriod = getCurrentAccountPeriod(sobId);
        param.put("currentAccountPeriod",currentAccountPeriod);
        //获取日期--当前会计期数最后一天
        String startDateStr = getAccountPeriodStartDate(sobId);
        Calendar startDate = Tools.getCalendar(startDateStr);
        startDate.set(Calendar.YEAR,currentAccountYear.intValue());
        startDate.set(Calendar.MONTH,currentAccountPeriod.intValue());
        startDate.add(Calendar.DAY_OF_MONTH,-1);
        param.put("periodDate",df.format(startDate.getTime()));

        //获取凭证号
        Integer serialNum = getSerialNum(sobId,voucherDataList.get(0).getId(),currentAccountYear,currentAccountPeriod);
        param.put("serialNum",serialNum);


//        param.put("customerList",customerList);
//        param.put("sysDepList",sysDepList);
//        param.put("employeeList",employeeList);
//        param.put("supplierList",supplierList);
//        param.put("wareHouseList",wareHouseList);
        param.put("projectEntity",projectEntity);
        //页面状态，1—新增  2-查询
        param.put("status",1);

        //获取所有的外币核算列表
        Map<String,Object> currencyList = new HashMap<>();
        Result currencyResult = currencyMaintainRemoteService.queryAll(0,sobId);
        if(currencyResult !=null && EnumConstant.PUBLIC.CODE_YES.getValue().equals(currencyResult.getCode())) {
            List<TBaseCurrencyMaintainEntity> tBaseCurrencyMaintainList = ResponseUtil.getResult(currencyResult, new TypeReference<ResponseVO<List<TBaseCurrencyMaintainEntity>>>() {});
            for(TBaseCurrencyMaintainEntity entity:tBaseCurrencyMaintainList){
                Map<String,Object> currencyMap = new HashMap<>();
                currencyMap.put("label",entity.getCurrencyName());
                currencyMap.put("rate",entity.getExchangeRate());
                currencyList.put(entity.getId().toString(),currencyMap);
            }
        }
        param.put("currencyList",currencyList);

        Map<String,String> unitList = new HashMap<>();
        //获取所有的单位
        Result unitListResult = tBaseUnitRemoteService.list(new TBaseUnitVo());
        if(unitListResult !=null && EnumConstant.PUBLIC.CODE_YES.getValue().equals(unitListResult.getCode())) {
            List<TBaseUnitEntity> tBaseUnitList = ResponseUtil.getResult(unitListResult, new TypeReference<ResponseVO<List<TBaseUnitEntity>>>() {});
            for(TBaseUnitEntity unitEntity:tBaseUnitList){
                unitList.put(unitEntity.getId().toString(),unitEntity.getName());
                /*Map<String,Object> unitMap = new HashMap<>();
                unitMap.put("value",unitEntity.getId());
                unitMap.put("label",unitEntity.getName());
                unitList.add(unitMap);*/
            }
        }
        param.put("unitList",unitList);
        param.put("sobId",sobId);
        param.put("user",user);
        //设置本位币id
        param.put("standardCurrencyId",getStandardCurrencyId(sobId));

        return param;
    }

    /**
    * @description: 获取本位币id
    * @author zhengfei
    * @eamil 936864724@qq.com
    * @date 2018-07-16 17:24
    * @param sobId
    * @return java.lang.Integer
    */
    private Long getStandardCurrencyId(Long sobId){
        //获取本位币id
        Result profileValue = systemProfileRemoteService.getSystemProfileValue(SystemProfileConstant.SYS_STANDARD_MONEY_ID, sobId.toString());
        if(profileValue != null && EnumConstant.PUBLIC.CODE_YES.getValue().equals(profileValue.getCode())){
            return Long.parseLong(profileValue.getData().toString());
        }
        return null;
    }


    /**
    * @description: 获取科目树
    * @author zhengfei
    * @eamil 936864724@qq.com
    * @date 2018-06-21 20:54
    * @return com.htrfid.util.Result
    */
    @Override
    public Result getSubjectTree() {
        return accountSubjectRemoteService.getListByType(UserUtils.getCurrentUser().getUserCurrentOrganId());
    }

    /**
    * @description: 根据科目id获取核算项目
    * @author zhengfei
    * @eamil 936864724@qq.com
    * @date 2018-06-23 8:43
    * @param id
    * @return java.util.List<com.htrfid.basedata.entity.TBaseAccountProjectEntity>
    */
    @Override
    public Map<String,Object> getListBySubjectId(Long id) throws MyException{
        Map<String,Object> resultParam = new HashMap<>();
        List<TBaseAccountProjectEntity> projectList = null;
        Result projectResult = accountProjectRemoteService.getListBySubjectId(id);
        logger.info("result: {}", JsonUtil.objToJson(projectResult));
        if(projectResult !=null && EnumConstant.PUBLIC.CODE_YES.getValue().equals(projectResult.getCode())) {
            projectList = ResponseUtil.getResult(projectResult, new TypeReference<ResponseVO<List<TBaseAccountProjectEntity>>>() {});
        }

        List<Long> opts = new ArrayList<>();
        if(projectList!=null&&projectList.size()>0){
            for (TBaseAccountProjectEntity projectEntity:projectList){
                opts.add(projectEntity.getId());
            }
        }
        resultParam.put("opts",opts);
        //获取数量核算id
        Result infoResult = accountSubjectRemoteService.info(id);
        TbaseAccountSubjectEntity subjectEntity;
        if(infoResult !=null && EnumConstant.PUBLIC.CODE_YES.getValue().equals(infoResult.getCode())) {
            subjectEntity = ResponseUtil.getResult(infoResult, new TypeReference<ResponseVO<TbaseAccountSubjectEntity>>() {});
            if(subjectEntity!=null){
                TBaseUnitEntity unitEntity = subjectEntity.gettBaseUnitEntity();
                if(unitEntity!=null){
                    resultParam.put("unitId",unitEntity.getId()+"");
                }
                Long foreignCurrencyId = subjectEntity.getForeignCurrencyId();
                resultParam.put("foreignCurrencyId",foreignCurrencyId);
                resultParam.put("balanceDirection",subjectEntity.getBalanceDirection());
            }
        }
        return resultParam;
    }

    /**
    * @description:凭证审核
    * @author zhengfei
    * @eamil 936864724@qq.com
    * @date 2018-06-25 18:40
    * @param sobId, voucherId
    * @return com.htrfid.util.Result
    */
    @Override
    public Result approval(Long sobId, Long voucherId,Integer type) {
        SysUser user = UserUtils.getCurrentUser();
        logger.info("user info: {}",JsonUtil.objToJson(user));
        Result result = voucherRemoteService.approvalVoucher(sobId,voucherId,user.getId(),user.getUsername(),type);
        return result;
    }

    /**
    * @description: 凭证删除
    * @author zhengfei
    * @eamil 936864724@qq.com
    * @date 2018-06-25 18:47
    * @param sobId, voucherId
    * @return com.htrfid.util.Result
    */
    @Override
    public Result delete(Long sobId, Long voucherId) {
        return voucherRemoteService.deleteVoucher(voucherId,sobId);
    }

    /**
    * @description:凭证复制
    * @author zhengfei
    * @eamil 936864724@qq.com
    * @date 2018-06-25 18:49
    * @param sobId, voucherId
    * @return com.htrfid.util.Result
    */
    @Override
    public Result copyVoucher(Long sobId, Long voucherId) {
        return voucherRemoteService.copyVoucher(sobId,voucherId);
    }

    /**
    * @description: 红字冲销
    * @author zhengfei
    * @eamil 936864724@qq.com
    * @date 2018-06-27 8:26
    * @param sobId, voucherId
    * @return com.htrfid.util.Result
    */
    @Override
    public Result writeOff(Long sobId, Long voucherId) {
        return voucherRemoteService.writeOff(sobId,voucherId);
    }

    /**
    * @description:跳转到某个凭证
    * @author zhengfei
    * @eamil 936864724@qq.com
    * @date 2018-06-27 16:11
    * @param voucherEntity
    * @return com.htrfid.util.Result
    */
    @Override
    public Result jumpVoucher(VoucherEntity voucherEntity) {
        Result result = voucherRemoteService.queryVoucher(voucherEntity);
        return result;
    }
    /**
     * @param accountYear
     * @param accountPeriod
     * @param sobId
     * @return
     * @description: 检查凭证字号是否存在断号
     * @author wangchunqiang
     * @eamil wcq@htrfid.com
     * @date 2018-07-07 15:51
     */
    @Override
    public boolean checkVoucherNumberNonSequence(int accountYear, int accountPeriod, Long sobId) {
        return voucherRemoteService.checkVoucherNumberNonSequence(accountYear,accountPeriod,sobId);
    }
    /**
    * @description:获取所有的外币核算列表
    * @author zhengfei
    * @eamil 936864724@qq.com
    * @date 2018-07-03 13:26
    * @param
    * @return com.htrfid.util.Result
    */
    @Override
    public Result getCurrencyList() throws MyException{
    	SysUser sysUser = UserUtils.getCurrentUser();
        Long sobId = sysUser.getUserCurrentOrganId();
        Result currencyResult = currencyMaintainRemoteService.queryAll(0,sobId);
        logger.info("currencyResult: {}",JsonUtil.objToJson(currencyResult));
        List<TBaseCurrencyMaintainEntity> tBaseCurrencyMaintainList = new ArrayList<>();
        if(currencyResult !=null && EnumConstant.PUBLIC.CODE_YES.getValue().equals(currencyResult.getCode())) {
            tBaseCurrencyMaintainList = ResponseUtil.getResult(currencyResult, new TypeReference<ResponseVO<List<TBaseCurrencyMaintainEntity>>>() {});
        }
        TBaseCurrencyMaintainEntity entity1 = new TBaseCurrencyMaintainEntity();
        entity1.setId(-1L);
        entity1.setCurrencyName("所有币别");
        TBaseCurrencyMaintainEntity entity2 = new TBaseCurrencyMaintainEntity();
        entity2.setId(-2L);
        entity2.setCurrencyName("综合本位币");
        tBaseCurrencyMaintainList.add(0,entity1);
        tBaseCurrencyMaintainList.add(1,entity2);
        return Result.ok(tBaseCurrencyMaintainList);
    }

    /**
    * @description: 凭证过账
    * @author zhengfei
    * @eamil 936864724@qq.com
    * @date 2018-07-04 19:36
    * @param ids, sobId
    * @return com.htrfid.util.Result
    */
    @Override
    public Result voucherPassBill(Long[] ids, Long sobId) {
        Boolean enabled = commonService.isEnabled(sobId);
        if(!enabled){
            return Result.error("总账未完成初始化，不允许过账操作");
        }
        SysUser currentUser = UserUtils.getCurrentUser();
        return voucherRemoteService.voucherPassBill(ids,sobId,currentUser.getId(),currentUser.getUsername());
    }

    /**
    * @description: 凭证整理
    * @author zhengfei
    * @eamil 936864724@qq.com
    * @date 2018-07-05 16:54
    * @param
     * @param sobId @return com.htrfid.util.Result
    */
    @Override
    public Result sortVoucher(Long sobId) {
        return voucherRemoteService.sortVoucher( getCurrentAccountYear(sobId),getCurrentAccountPeriod(sobId),sobId);
    }

    /**
    * @description: 批量删除
    * @author zhengfei
    * @eamil 936864724@qq.com
    * @date 2018-07-07 9:52
    * @param ids
    * @return com.htrfid.util.Result
    */
    @Override
    public Result deleteBatch(Long[] ids) {
    	Long sobId = UserUtils.getCurrentUser().getUserCurrentOrganId();
        return voucherRemoteService.deleteBatch(ids,sobId);
    }


    /**
     * @description　凭证汇总表数据列表
     * @author lxy
     * @eamil lxyyxljava@163.com
     * @date  2018/7/2 18:50
     * @param
     * @return
     */
    @Override
    public Result voucherCount(Integer subjctStartNum,
                               Integer subjctEndNum,
                               String startDate,
                               String endDate,
                               Integer startVoucherNum,
                               Integer endVoucherNum,
                               Long voucherId){
        return  voucherRemoteService.voucherCount(subjctStartNum,subjctEndNum,startDate,endDate,startVoucherNum,endVoucherNum,voucherId);
    }

    /**
     * @description 获取借贷款总金额
     * @author lxy
     * @eamil lxyyxljava@163.com
     * @date  2018/7/2 18:50
     * @param
     * @return
     */
    @Override
    public Result queryVoucherEnclosure(String startDate, String endDate, Integer startVoucherNum, Integer endVoucherNum, Long voucherId) {
        return voucherRemoteService.queryVoucherEnclosure(startDate,endDate,startVoucherNum,endVoucherNum,voucherId);
    }


    private class SubjectEntity{
        private String label;
        private String value;
        private Long id;
        private String fullName;
        private List<Long> opts;
        public String getLabel() {
            return label;
        }

        public void setLabel(String label) {
            this.label = label;
        }

        public String getValue() {
            return value;
        }

        public void setValue(String value) {
            this.value = value;
        }

        public List<Long> getOpts() {
            return opts;
        }

        public void setOpts(List<Long> opts) {
            this.opts = opts;
        }

        public Long getId() {
            return id;
        }

        public void setId(Long id) {
            this.id = id;
        }

        public String getFullName() {
            return fullName;
        }

        public void setFullName(String fullName) {
            this.fullName = fullName;
        }
    }


    /**
     * @description 组装凭证会计期间
     * @author lxy
     * @eamil lxyyxljava@163.com
     * @date  2018-10-26 10:39
     * @param 
     * @return 
     */
    List<Map<String,Object>> getVoucherDate(){
    	Long sobId = UserUtils.getCurrentUser().getUserCurrentOrganId();
        List<Map<String,Object>> list = voucherRemoteService.getVoucherDate(sobId);
        List<Map<String,Object>> addListMap = new ArrayList<>();
        Map<String,Object> currentMap = new HashMap<>();
        Integer currentAccountYear = getCurrentAccountYear(sobId);
        Integer currentAccountPeriod = getCurrentAccountPeriod(sobId);
        currentMap.put("id",currentAccountYear+"-"+String.format("%02d",currentAccountPeriod));
        currentMap.put("name",currentAccountYear+"年"+currentAccountPeriod+"期");
        addListMap.add(currentMap);
        if(!CollectionUtils.isEmpty(list)){
            for(Map<String,Object> obj:list){
                 Object accountingYear =obj.get("accountingYear"); //会计年
                 Object accountingPeriod = obj.get("accountingPeriod"); //会计期
                 Map<String,Object> map = new HashMap<>();
                 map.put("id",accountingYear+"-"+String.format("%02d",accountingPeriod));
                 map.put("name",accountingYear+"年"+accountingPeriod+"期");
                 addListMap.add(map);
            }
            Comparator<Map<String,Object>> comparator = (h1, h2) -> h1.get("id").toString().compareTo(h2.get("id").toString());
            addListMap.sort(comparator.reversed()); //降序
        }
        return  addListMap.stream().distinct().collect(Collectors.toList());  //去重;
    }

    /**
     * @description
     * @author lxy
     * @eamil lxyyxljava@163.com
     * @date  2018/7/3 19:54
     * @param
     * @return
     */
    @Override
    public  Result initQueryVoucherFormData(Integer type){
        Map<String,Object> param = new HashMap<>();
        Long sobId = UserUtils.getCurrentUser().getUserCurrentOrganId();
        switch (type){
            case 1: //凭证字
                return voucherDataRemoteService.queryAll(sobId);
            case 2: //币别类型
                return currencyMaintainRemoteService.queryAll(0,sobId);
            case 3:
                //获取当前会计年度
                param.put("currentAccountYear",getCurrentAccountYear(sobId));
                //获取当前会计期数
                param.put("currentAccountPeriod",getCurrentAccountPeriod(sobId));
                return Result.ok(param);
            default:
                //凭证字
                param.put("voucherGroupName",voucherDataRemoteService.queryAll(sobId));
                //币别类型
                param.put("currencyType",currencyMaintainRemoteService.queryAll(0,sobId));
                //获取凭证中会计期间
                param.put("voucherDate",getVoucherDate());
                //获取当前会计年度
                param.put("currentAccountYear",getCurrentAccountYear(sobId));
                //获取当前会计期数
                param.put("currentAccountPeriod",String.format("%02d",getCurrentAccountPeriod(sobId)));
                return Result.ok(param);
        }
    }

    @Override
    public Result typeResult(Integer type)  throws MyException {
    	Long sobId = UserUtils.getCurrentUser().getUserCurrentOrganId();
        List<Map<String,Object>> mapList = new ArrayList<>();
        switch (type){
            case 1:
                return customerRemoteService.queryAllCustomer(Constant.ACCOUNT_PROJECT_CUSTOMER.intValue(),sobId,0);
            case 2:
                List<SysDepartment> sysDepartmentList =  ResponseUtil.getResult(sysDeptManagerRemoteService.queryAllLeafNode(sobId),
                        new TypeReference<ResponseVO<List<SysDepartment>>>() {});
               if(!sysDepartmentList.isEmpty()&&sysDepartmentList.size()>0){
                for (SysDepartment sysDepartment:sysDepartmentList ) {
                    Map<String, Object> sysDepartmentMap = new HashMap<>();
                    sysDepartmentMap.put("id", sysDepartment.getId());
                    sysDepartmentMap.put("name", sysDepartment.getDepName());
                    mapList.add(sysDepartmentMap);
                }
            }
            return Result.ok(mapList);
            case 3:
            	List<Map> empMap = new ArrayList<>();
                SysEmployee empl = new SysEmployee();
                empl.setOrgId(sobId);
                List<SysEmployee> sysEmployeeList =   ResponseUtil.getResult(employeeRemoteService.queryAllEmp(empl),
                        new TypeReference<ResponseVO<List<SysEmployee>>>() {});
                if(!sysEmployeeList.isEmpty()&&sysEmployeeList.size()>0){
                    for (SysEmployee sysEmployee:sysEmployeeList ) {
                        Map<String, Object> sysDepartmentMap = new HashMap<>();
                        sysDepartmentMap.put("id", sysEmployee.getId());
                        sysDepartmentMap.put("name", sysEmployee.getEmpName());
                        mapList.add(sysDepartmentMap);
                    }
                }
                return Result.ok(mapList);
            case 4:
                return warehouseInfoRemoteService.querySpecificWareHouse(null,null,null);
            case 5:
                List<TBaseSupplierEntity> supplierEntitieList =
                           ResponseUtil.getResult(supplierRemoteService.queryAllSupplier(1,sobId,Constant.PUBLIC_ZERO),
                                new TypeReference<ResponseVO<List<TBaseSupplierEntity>>>() {});
                if(!supplierEntitieList.isEmpty()&&supplierEntitieList.size()>0){
                    for (TBaseSupplierEntity tBaseSupplierEntity:supplierEntitieList ) {
                        Map<String, Object> sysDepartmentMap = new HashMap<>();
                        sysDepartmentMap.put("id", tBaseSupplierEntity.getId());
                        sysDepartmentMap.put("name", tBaseSupplierEntity.getSupplierName());
                        mapList.add(sysDepartmentMap);
                    }
                }
                return Result.ok(mapList);
            case 6:
              return  tBaseCommodityRemoteService.listCommodity(sobId);
             default:
            break;
        }
        return  Result.ok();
    }

    /**
     * @description
     * @author lxy 查凭证
     * @eamil lxyyxljava@163.com
     * @date  2018/7/4 10:38
     * @param
     * @return
     */
    @Override
    public Map<String,Object> queryVoucherByVo(VoucherQueryVO voucherQueryVO) {
        return voucherRemoteService.queryVoucherByVo(voucherQueryVO);
    }

    @Override
    public Map<String, Object> queryMechanismCertificate(VoucherQueryVO voucherQueryVO) {
        return voucherRemoteService.queryMechanismCertificate(voucherQueryVO);
    }

    /**
    * @description: 批量审核凭证
    * @author zhengfei
    * @eamil 936864724@qq.com
    * @date 2018-08-17 15:19
    * @param sobId, ids, type
    * @return com.htrfid.util.Result
    */
    @Override
    public Result approvalVoucherBatch(Long sobId, Long[] ids, Integer type) {
        SysUser user = UserUtils.getCurrentUser();
        Result result = voucherRemoteService.approvalVoucherBatch(sobId,ids,user.getId(),user.getUsername(),type);
        return result;
    }

    /**
     * @description 凭证列表
     * @author lxy
     * @eamil lxyyxljava@163.com
     * @date  2018-10-16 15:02
     * @param
     * @return
     */
    @Override
    public List<VoucherQueryResultVO> exportVoucherList(VoucherQueryVO voucherQueryVO) {
        return voucherRemoteService.exportVoucher(voucherQueryVO);
    }
    /**
     * @description 导出凭证信息 new
     * @author lxy
     * @eamil lxyyxljava@163.com
     * @date  2018-10-16 14:18 
     * @param 
     * @return 
     */
    public void exportExcelVoucherNew( XSSFWorkbook workbook,String fileName,List<VoucherQueryResultVO> list){

        XSSFSheet sheet = workbook.createSheet(fileName);
        String [] strArray = new String []{"审核","过账","日期","凭证字号","摘要","科目代码","科目名称","币别","汇率","原币金额","借方金额","贷方金额","制单人","审核人"};
        for (int i=0;i<strArray.length;i++){
            if(i==0||i==1){
                sheet.setColumnWidth(i,30*80);
            }else{
                sheet.setColumnWidth(i,30*160);
            }
        }
        //合并
        sheet.addMergedRegion(new CellRangeAddress(0,0,0,strArray.length-1));
        sheet.addMergedRegion(new CellRangeAddress(1,1,0,6));
        sheet.addMergedRegion(new CellRangeAddress(1,1,7,13));
        CellStyle cellStyle = workbook.createCellStyle();
        cellStyle.setAlignment(HorizontalAlignment.CENTER);// 居中
        cellStyle.setWrapText(true);//强制使用POI样式
        //字体大小
        XSSFFont font = workbook.createFont();
        font.setFontName("Courier New");
        font.setFontHeightInPoints((short) 14);
        font.setBold(true); //是否加粗
        cellStyle.setFont(font);
        //创建行 （第1行）
        XSSFRow row = sheet.createRow(0);
        row.setHeightInPoints(20);
        XSSFCell cell = row.createCell(0);
        cell.setCellValue("会计分录序时簿");
        cell.setCellStyle(cellStyle);

        //创建行 （第2行）
        cellStyle = workbook.createCellStyle();
        cellStyle.setWrapText(true);//强制使用POI样式
        row = sheet.createRow(1);
        cell = row.createCell(0);
        cell.setCellValue("金大祥集团");
        cellStyle.setAlignment(HorizontalAlignment.LEFT);// 靠左
        cell.setCellStyle(cellStyle);
        cellStyle = workbook.createCellStyle();
        cell = row.createCell(7);
        cell.setCellValue(fileName);
        cellStyle.setAlignment(HorizontalAlignment.RIGHT);// 靠右
        cell.setCellStyle(cellStyle);

        row = sheet.createRow(2);
        for (int i = 0;i < strArray.length;i++){
            cellStyle = workbook.createCellStyle();
            cell = row.createCell(i);
            cell.setCellValue(strArray[i]);
            font = workbook.createFont();
            font.setBold(true); //是否加粗
            font.setFontName("Courier New");
            font.setFontHeightInPoints((short) 12);
            font.setColor(IndexedColors.BLUE.getIndex());
            cellStyle.setFont(font);
            cellStyle.setAlignment(HorizontalAlignment.CENTER);// 居中
            cell.setCellStyle(cellStyle);
        }
        int length = list.size();
        if (length > 0) {
            int size = 0;
            int j = 0;
            int[] num = new int[length];
            int[] num2 = new int[length];
            num[0] = 3;
            String regex = ":";
            for (VoucherQueryResultVO voucherVO : list) {
                int i = 0;
                String [] explainsArray = voucherVO.getExplains().split(regex);  // 摘要
                String [] subjectCodeArray = voucherVO.getSubjectCode().split(regex);  // 科目编码
                String [] fullNameArray = voucherVO.getSubjectName().split(regex);  // 科目名称
                String [] currencyNameArray = voucherVO.getCurrencyName().split(regex);  // 币别
                String [] exchangeRateStrArray = voucherVO.getExchangeRateStr().split(regex);  // 汇率
                String [] ammountForStrArray = voucherVO.getAmmountForStr().split(regex);  // 原币金额
                String [] debitStrArray = voucherVO.getDebitStr().split(regex);  // 借方金额
                String [] creditStrArray = voucherVO.getCreditStr().split(regex);  // 贷方金额
                int explainsArrayLength = explainsArray.length;
                if (j > 0) {
                    num[j] = size + 3;
                }
                size += explainsArrayLength;
                num2[j] = size + 2;
                //合并行
                sheet.addMergedRegion(new CellRangeAddress(num[j], num2[j], 0, 0));
                sheet.addMergedRegion(new CellRangeAddress(num[j], num2[j], 1, 1));
                sheet.addMergedRegion(new CellRangeAddress(num[j], num2[j], 2, 2));
                sheet.addMergedRegion(new CellRangeAddress(num[j], num2[j], 3, 3));
                sheet.addMergedRegion(new CellRangeAddress(num[j], num2[j], 12, 12));
                sheet.addMergedRegion(new CellRangeAddress(num[j], num2[j], 13, 13));
                for (int a =0;a<explainsArrayLength;a++){
                    row = sheet.createRow(num[j] + i);
                    if(i==0){  //初始化入口
                        row.createCell((short) 0).setCellValue(voucherVO.getAudited().equals(Constant.VOUCHER_ENTRY_APPROVAL_YES)?"√":"");
                        row.createCell((short) 1).setCellValue(voucherVO.getPosted().equals(Constant.VOUCHER_ENTRY_POSTED_YES)?"√":"");
                        row.createCell((short) 2).setCellValue(DateConverUtil.getSbyDT(voucherVO.getVoucherDate(),DateConverUtil.TimeType.type111.getValue()));
                        row.createCell((short) 3).setCellValue(voucherVO.getVoucherGroupName());
                        row.createCell((short) 12).setCellValue(voucherVO.getPreparerName());
                        row.createCell((short) 13).setCellValue(voucherVO.getAuditorName());
                    }
                    row.createCell((short) 4).setCellValue(explainsArray[a]);
                    row.createCell((short) 5).setCellValue(subjectCodeArray[a]);
                    row.createCell((short) 6).setCellValue(fullNameArray[a]);
                    row.createCell((short) 7).setCellValue(currencyNameArray[a]);
                    row.createCell((short) 8).setCellValue(exchangeRateStrArray[a]);
                    row.createCell((short) 9).setCellValue(ammountForStrArray[a]);
                    row.createCell((short) 10).setCellValue(!debitStrArray[a].equals("no")?debitStrArray[a]:"");
                    row.createCell((short) 11).setCellValue(!creditStrArray[a].equals("no")?creditStrArray[a]:"");
                    i++;
                }
                j++;
            }

        }

    }


    /**
     * @description
     * @author lxy 导出凭证列表
     * @eamil lxyyxljava@163.com
     * @date  2018/7/6 13:40
     * @param 
     * @return 
     */
    @Override
    public void exportExcelVoucher(HttpServletResponse response,VoucherQueryVO voucherQueryVO){
        String [] startVoucherDate = voucherQueryVO.getStartVoucherDate().split("-");
        String [] endVoucherDate = voucherQueryVO.getEndVoucherDate().split("-");
        String  dateName = startVoucherDate[0]+"年第"+startVoucherDate[1]+"期 至 "+endVoucherDate[0]+"年第"+endVoucherDate[1]+"期";
        String dateStr = DateConverUtil.dateFormat(DateConverUtil.getNowTime(),DateConverUtil.TimeType.type7.getValue());
        String fileName = dateStr+"凭证列表_"+dateName;
        //生成Excel文件
        XSSFWorkbook  workbook = new XSSFWorkbook();
        XSSFSheet sheet = workbook.createSheet(fileName);
        String [] strArray = new String []{"日期","凭证字号","摘要","科目","借方金额","贷方金额","制单人","审核人"};
//        sheet.setColumnWidth(0, 30*160);
//        sheet.setColumnWidth(1, 30*160);
//        sheet.setColumnWidth(2, 30*260);
//        sheet.setColumnWidth(3, 30*200);
//        sheet.setColumnWidth(4, 30*160);
//        sheet.setColumnWidth(5, 30*160);
//        sheet.setColumnWidth(6, 30*160);
//        sheet.setColumnWidth(7, 30*160);
        for (int i=0;i<strArray.length;i++){
            sheet.setColumnWidth(i,30*160);
        }
        //合并
        sheet.addMergedRegion(new CellRangeAddress(0,0,0,7));
        sheet.addMergedRegion(new CellRangeAddress(1,1,0,3));
        sheet.addMergedRegion(new CellRangeAddress(1,1,4,7));
        CellStyle cellStyle = workbook.createCellStyle();
        cellStyle.setAlignment(HorizontalAlignment.CENTER);// 居中
        cellStyle.setWrapText(true);//强制使用POI样式
        //字体大小
        XSSFFont font = workbook.createFont();
        font.setFontName("Courier New");
        font.setFontHeightInPoints((short) 14);
        font.setBold(true); //是否加粗
        cellStyle.setFont(font);
        //创建行 （第1行）
        XSSFRow row = sheet.createRow(0);
        row.setHeightInPoints(20);
        XSSFCell cell = row.createCell(0);
        cell.setCellValue("凭证列表");
        cell.setCellStyle(cellStyle);

        //创建行 （第2行）
        cellStyle = workbook.createCellStyle();
        cellStyle.setWrapText(true);//强制使用POI样式
        row = sheet.createRow(1);
        cell = row.createCell(0);
        cell.setCellValue("金大祥");
        cellStyle.setAlignment(HorizontalAlignment.LEFT);// 靠左
        cell.setCellStyle(cellStyle);
        cellStyle = workbook.createCellStyle();
        cell = row.createCell(4);
        cell.setCellValue(dateName);
        cellStyle.setAlignment(HorizontalAlignment.RIGHT);// 靠右
        cell.setCellStyle(cellStyle);

        row = sheet.createRow(2);
        for (int i = 0;i < strArray.length;i++){
            cellStyle = workbook.createCellStyle();
            cell = row.createCell(i);
            cell.setCellValue(strArray[i]);
            font = workbook.createFont();
            font.setBold(true); //是否加粗
            font.setFontName("Courier New");
            font.setFontHeightInPoints((short) 12);
            font.setColor(IndexedColors.BLUE.getIndex());
            cellStyle.setAlignment(HorizontalAlignment.CENTER);// 居中
            cellStyle.setFont(font);
            cell.setCellStyle(cellStyle);
        }
        Gson gson = new Gson();
        List<VoucherQueryResultVO> voucherList = gson.fromJson(VoucherController.voucherMap.get("voucherList").toString(), new TypeToken<List<VoucherQueryResultVO>>(){}.getType());
        int length = voucherList.size();
        if (!voucherList.isEmpty() && length > 0) {
            int size = 0;
            int j = 0;
            int[] num = new int[length];
            int[] num2 = new int[length];
            num[0] = 3;
            for (VoucherQueryResultVO voucherVO : voucherList) {
                voucherQueryVO = new VoucherQueryVO();
                voucherQueryVO.setVoucherId(voucherVO.getId());
                voucherQueryVO.setSobId(UserUtils.getCurrentUser().getOrganId());  //组织ID
                List<VoucherQueryResultVO> voucherEntryList = voucherRemoteService.queryVoucherEntryByVo(voucherQueryVO);
                if (j > 0) {
                    num[j] = size + 3;
                }
                size += voucherEntryList.size();
                num2[j] = size + 2;
                sheet.addMergedRegion(new CellRangeAddress(num[j], num2[j], 0, 0));
                sheet.addMergedRegion(new CellRangeAddress(num[j], num2[j], 1, 1));
                sheet.addMergedRegion(new CellRangeAddress(num[j], num2[j], 6, 6));
                sheet.addMergedRegion(new CellRangeAddress(num[j], num2[j], 7, 7));

                if (!voucherEntryList.isEmpty() && voucherEntryList.size() > 0) {
                    int i = 0;
                    for (VoucherQueryResultVO voucherEntryVO : voucherEntryList) {
                        row = sheet.createRow(num[j] + i);
                        if (i == 0) {
                            row.createCell((short) 0).setCellValue(voucherVO.getVoucherDate());
                            row.createCell((short) 1).setCellValue(voucherVO.getVoucherGroupName());
                            row.createCell((short) 6).setCellValue(voucherVO.getPreparerName());
                            row.createCell((short) 7).setCellValue(voucherVO.getAuditorName());
                        }
                        i++;
                        row.createCell((short) 2).setCellValue(voucherEntryVO.getExplains());
                        row.createCell((short) 3).setCellValue(voucherEntryVO.getFullName());
                        row.createCell((short) 4).setCellValue(voucherEntryVO.getDebit().toString());
                        row.createCell((short) 5).setCellValue(voucherEntryVO.getCredit().toString());

                    }
                }
                j++;
            }

        }
        ExportUtil.exportResponse(response,fileName,workbook,ExportUtil.SUFFIX_XLSX);
    }


    @Override
    public Result deleteMechanismVoucher(Long voucherId, Long sobId, Long currentUserId, String username) {
        return voucherRemoteService.deleteMechanismVoucher(voucherId,sobId,currentUserId,username);
    }


    @Override
    public Result deleteMechanismVoucherBatch(Long sobId, Long[] ids, Long currentUserId, String username) {
        return voucherRemoteService.deleteMechanismVoucherBatch(sobId,ids,currentUserId,username);
    }

    /**
     * @description:获取会计年度区间  凭证最早年度到凭证最大最大年度
     * @author zhengfei
     * @eamil 936864724@qq.com
     * @date 2018-07-12 8:46
     * @param sobId
     * @return com.htrfid.util.Result
     */
    @Override
    public Result getFinanceYearPeriod(Long sobId) {
        return voucherRemoteService.getFinanceYearPeriod(sobId);
    }

    /**
     * @description
     * @author lxy
     * @eamil lxyyxljava@163.com
     * @date  2018-07-17 19:08
     * @param 
     * @return 
     */
    @Override
    public void downloadVoucherTemplate(HttpServletResponse response)  {
        String fileName = "凭证模板";
        //生成Excel文件
        XSSFWorkbook  workbook = new XSSFWorkbook();
        XSSFSheet sheet = workbook.createSheet(fileName);
        String [] strArray = new String []{
                 "日期","凭证字","凭证号","附件数",
                 "分录序号","摘要","科目代码",
                 "借方金额","贷方金额","客户","部门","职员",
                 "仓库","供应商","是否限定", "数量","单价","原币金额","币别","汇率"
        };

        XSSFRow row = sheet.createRow(0);
        for (int i = 0;i < strArray.length;i++){
            XSSFCell cell = row.createCell(i);
            cell.setCellValue(strArray[i]);
            if(i==0||i==1||i==2||i==4||i==5||i==6||i==17||i==18||i==19){
                CellStyle cellStyle = workbook.createCellStyle();
                XSSFFont font = workbook.createFont();
                font.setColor(IndexedColors.RED.getIndex());
                cellStyle.setFont(font);
                cell.setCellStyle(cellStyle);
            }
        }
        try {
            response.setContentType("application/vnd.ms-excel;charset=UTF-8");
            response.setHeader("Content-Disposition", "attachment; filename=" +
                    new String(fileName.getBytes("GBK"), "ISO8859-1")+".xlsx");
            workbook.write(response.getOutputStream());
        }catch (Exception e){
            logger.error(e.getMessage());
        }finally {
            if(workbook != null){
                try{
                    workbook.close();
                }catch (Exception e2){
                    logger.error(e2.getMessage());
                }
            }
        }
    }




    @Override
    public Result uploadVoucherByExcel(MultipartFile file) throws MyException {
         String xls = ".xls";
         String xlsx = ".xlsx";
         if(file==null){
             throw new  MyException("file 对象不能为空");
         }
        //获取文件的名字52717
        String originalFilename = file.getOriginalFilename();
        Workbook workbook = null;
        try {
            if (originalFilename.endsWith(xls)) {
                workbook = new HSSFWorkbook(file.getInputStream());
            } else if (originalFilename.endsWith(xlsx)) {
                workbook = new XSSFWorkbook(file.getInputStream());
            }
        } catch (Exception e) {
            logger.error(e.getMessage());
            throw new MyException("格式错误");
        }
        Result result = null;
        if (workbook == null) {
            logger.info(originalFilename);
            throw new MyException("格式错误");
        }else{
            //获取所有的工作表的的数量
            //int numOfSheet = workbook.getNumberOfSheets();
        	Long createId = UserUtils.getCurrentUser().getId();  //创建人Id
            String  createName = UserUtils.getCurrentUser().getUsername();//创建人名称
            Long  organId  = UserUtils.getCurrentUser().getUserCurrentOrganId();//组织ID
            List<TBaseCurrencyMaintainEntity> currList =  ResponseUtil.getResult( currencyMaintainRemoteService.queryAll(0,organId),
                    new TypeReference<ResponseVO<List<TBaseCurrencyMaintainEntity>>>() {});  //币别列表
            List<TBaseVoucherDataEntity>  voucherTypeList =  ResponseUtil.getResult(voucherDataRemoteService.queryAll(organId),new TypeReference<ResponseVO<List<TBaseVoucherDataEntity>>>() {}); // 凭证字列表
            //遍历这个这些表
           // for (int i = 0; i < numOfSheet; i++) {
                //获取一个sheet也就是一个工作簿
                Sheet sheet = workbook.getSheetAt(0);
                int lastRowNum = sheet.getLastRowNum();
                String [] voucherArr = new String[lastRowNum];  //凭证表值
                for (int r= 1; r<= lastRowNum; r++) {
                    Row row = sheet.getRow(r);
                    Cell cell =row.getCell(0);
                    cell.setCellType(CellType.STRING);
                    String voucherDate = cell.getStringCellValue(); //日期
                    cell =row.getCell(1);
                    cell.setCellType(CellType.STRING);
                    String voucherName = cell.getStringCellValue(); // 凭证字
                    cell =row.getCell(2);
                    cell.setCellType(CellType.STRING);
                    String voucherNum  =cell.getStringCellValue();  //凭证号
                    voucherArr[r-1] = voucherDate+","+voucherName+","+voucherNum;
                }
                List<String> voucherArrList = Arrays.asList(voucherArr);
                Map<String, Long> collect = voucherArrList.stream().collect(Collectors.groupingBy(Function.identity(), Collectors.counting()));
                for (Map.Entry<String, Long> entry : collect.entrySet()){   //先筛选 判断凭证分录是否小于2.
                        if(entry.getValue()<2) {
                            String [] keys =entry.getKey().split(",");
                            String str = "导入失败! 请检查，<p style='color:red;'>日期:"+ keys[0]+"  凭证字:"+keys[1]+"  凭证号:"+keys[2]+"</p>  这条数据， "+"确保凭证分录必须有两条及以上。";
                            return Result.error(str);
                        }
                 }

                VoucherEntryVo voucherEntryVo;
                for (Map.Entry<String, Long> entry : collect.entrySet()) {  //遍历key
                    String [] keys =entry.getKey().split(",");
                    VoucherVO voucherVO = new VoucherVO();
                    List<VoucherEntryVo> entryVoList = new ArrayList<>();
                    VoucherEntity voucherEntity = new VoucherEntity(); //凭证表对象
                    BigDecimal debitSum = new BigDecimal(0); //借
                    BigDecimal creditSum = new BigDecimal(0); //贷
                        for (int j = 1; j <= lastRowNum; j++) {  //循环遍历表格 行数
                                Row row = sheet.getRow(j);
                                String str = row.getCell(0).getStringCellValue()+","+row.getCell(1).getStringCellValue()+","+row.getCell(2).getStringCellValue();
                                if (str.equals(entry.getKey())) {
                                    voucherEntryVo = new VoucherEntryVo();
                                    VoucherEntryEntity voucherEntryEntity = new VoucherEntryEntity();
                                    Map<String,Object> params = new HashMap<>();  //核算项目Map
                                    Cell cell = row.getCell(0);
                                    if (cell != null) {  //凭证日期
                                        cell.setCellType(CellType.STRING);
                                        String voucherDate = cell.getStringCellValue();
                                        voucherEntity.setVoucherDate(DateConverUtil.getDbyST(voucherDate, DateConverUtil.TimeType.type111.getValue()));
                                    }
                                    cell = row.getCell(1);
                                    if (cell != null) {  //凭证字号ID
                                        cell.setCellType(CellType.STRING);
                                        String typeName =  cell.getStringCellValue();
                                        int c = 0;
                                        if(!currList.isEmpty()&& currList.size()>0){
                                            c=-1;
                                            for(TBaseVoucherDataEntity v:voucherTypeList){
                                                if(v.getName().equals(typeName)){
                                                    voucherEntity.setVoucherGroupId(v.getId());  //凭证字ID
                                                    voucherEntity.setVoucherGroupName(typeName); //凭证字名称
                                                    c = 1;
                                                    break;
                                                }
                                            }
                                        }
                                        if(c==0){    //币别异常
                                            logger.error("凭证字数据为空！");
                                            return  Result.error("系统异常维护中。。。。");
                                        }
                                        if(c==-1){
                                            return  Result.error("导入失败! 请检查，<p style='color:red;'>日期:"+ keys[0]+"  凭证字:"+keys[1]+"  凭证号:"+keys[2]+"</p> 凭证字有误！");
                                        }

                                    }
                                    cell = row.getCell(2);
                                    if (cell != null) {//凭证号
                                        cell.setCellType(CellType.STRING);
                                        voucherEntity.setVoucherNumber(Integer.parseInt(cell.getStringCellValue()));
                                    }
                                    cell = row.getCell(3);
                                    if (cell != null) {//凭证附件数
                                        cell.setCellType(CellType.STRING);
                                        voucherEntity.setAttachmentsCount(Integer.parseInt(cell.getStringCellValue()));
                                    }
                                    voucherEntity.setEntryCount(entry.getValue().intValue());  //分录数
                                    cell = row.getCell(4);
                                    if (cell != null) {//凭证分录序号
                                        cell.setCellType(CellType.STRING);
                                        voucherEntryEntity.setSequence(Integer.parseInt(cell.getStringCellValue()));
                                    }

                                    cell = row.getCell(5);
                                    if (cell != null) {//摘要
                                        cell.setCellType(CellType.STRING);
                                        voucherEntryEntity.setExplains(cell.getStringCellValue());
                                    }

                                    cell = row.getCell(6);
                                    if (cell != null) {//科目代码
                                        cell.setCellType(CellType.STRING);
                                        String subjectCode = cell.getStringCellValue();
                                        TbaseAccountSubjectEntity tbaseAccountSubjectEntity = accountSubjectRemoteService.getSubjectInfoByCode(subjectCode,organId);  //根据科目编码查询科目信息
                                        if(tbaseAccountSubjectEntity.getId()==null) {
                                            return  Result.error("导入失败! 请检查，<p style='color:red;'>日期:"+ keys[0]+"  凭证字:"+keys[1]+"  凭证号:"+keys[2]+"</p>  数据的科目编码");
                                        }
                                        voucherEntryEntity.setAccountCode(subjectCode);
                                        voucherEntryEntity.setAccountId(tbaseAccountSubjectEntity.getId());//科目Id
                                    }
                                    cell = row.getCell(18); //币别
                                    if (cell != null) {
                                        cell.setCellType(CellType.STRING);
                                        String currName =  cell.getStringCellValue();
                                        int c = 0;
                                        if(!currList.isEmpty()&& currList.size()>0){
                                            c=-1;
                                            for(TBaseCurrencyMaintainEntity curr:currList){
                                                    if(curr.getCurrencyName().equals(currName)){
                                                        voucherEntryEntity.setCurrencyId(curr.getId());  //币别ID
                                                        voucherEntryEntity.setCurrencyName(currName); //币别名称
                                                        c = 1;
                                                        break;
                                                    }
                                            }
                                        }
                                        if(c==0){    //币别异常
                                            logger.error("币别数据为空！");
                                            return  Result.error("系统异常维护中。。。。");
                                        }
                                        if(c==-1){
                                            return  Result.error("导入失败! 请检查，<p style='color:red;'>日期:"+ keys[0]+"  凭证字:"+keys[1]+"  凭证号:"+keys[2]+"</p> 币别有误！");
                                        }
                                    }

                                    cell = row.getCell(19); //汇率
                                    if (cell != null) {
                                        cell.setCellType(CellType.STRING);
                                        voucherEntryEntity.setExchangeRate(new BigDecimal(cell.getStringCellValue()));
                                    }

                                    Integer direction = null; //借贷方向  1:借，2:贷
                                    cell = row.getCell(7);
                                    if (cell != null) {//借
                                        cell.setCellType(CellType.STRING);
                                        String  jie = cell.getStringCellValue();
                                        if (!StringUtils.isEmpty(jie)){
                                            direction = Constant.DIRECTION_DEBIT;  //借方
                                            voucherEntryEntity.setAmmountFor(new BigDecimal(jie));//原币金额
                                            voucherEntryEntity.setAmmount(new BigDecimal(jie));
                                            debitSum = debitSum.add(new BigDecimal(jie));
                                        }
                                    }
                                    cell = row.getCell(8);
                                    if (cell != null) {//贷
                                        cell.setCellType(CellType.STRING);
                                        String dai= cell.getStringCellValue();
                                        if(!StringUtils.isEmpty(dai)){
                                            direction = Constant.DIRECTION_CREDIT; //贷方
                                            voucherEntryEntity.setAmmountFor(new BigDecimal(dai));//原币金额
                                            voucherEntryEntity.setAmmount(new BigDecimal(dai));
                                            creditSum =creditSum.add(new BigDecimal(dai));
                                        }

                                    }

                                    //核算项目处理
                                    cell = row.getCell(9); //客户
                                    if (cell != null) {
                                        cell.setCellType(CellType.STRING);
                                        String cus = cell.getStringCellValue();
                                        if(!StringUtils.isEmpty(cus)){
                                              params.put(Constant.ACCOUNT_PROJECT_CUSTOMER+"",cus);
                                        }
                                    }
                                    cell = row.getCell(10); //部门
                                    if (cell != null) {
                                        cell.setCellType(CellType.STRING);
                                        String dept = cell.getStringCellValue();
                                        if(!StringUtils.isEmpty(dept)){
                                            params.put(Constant.ACCOUNT_PROJECT_DEPARTMENT+"",dept);
                                        }
                                    }
                                    cell = row.getCell(11); //职员
                                    if (cell != null) {
                                        cell.setCellType(CellType.STRING);
                                        String emp = cell.getStringCellValue();
                                        if(!StringUtils.isEmpty(emp)){
                                            params.put(Constant.ACCOUNT_PROJECT_EMPLOYEE+"",emp);
                                        }
                                    }
                                    cell = row.getCell(12); //仓库
                                    if (cell != null) {
                                        cell.setCellType(CellType.STRING);
                                        String house = cell.getStringCellValue();
                                        if(!StringUtils.isEmpty(house)){
                                            params.put(Constant.ACCOUNT_PROJECT_WAREHOUSE+"",house);
                                        }
                                    }
                                    cell = row.getCell(13); //供应商
                                    if (cell != null) {
                                        cell.setCellType(CellType.STRING);
                                        String supper = cell.getStringCellValue();
                                        if(!StringUtils.isEmpty(supper)){
                                            params.put(Constant.ACCOUNT_PROJECT_SUPPLIER+"",supper);
                                        }
                                    }

                                    voucherEntryEntity.setCreateId(createId);//创建凭证分录人ID
                                    voucherEntryEntity.setCreateName(createName);  //创建凭证分录人名称
                                    voucherEntryEntity.setCreateTime(new Date());  //创建凭证分录时间
                                    voucherEntryEntity.setDirection(direction); //借贷方向
                                    voucherEntryEntity.setStatus(Constant.VOUCHER_REGULAR);
                                    voucherEntryEntity.setSobId(organId);  //组织ID
                                    voucherEntryVo.setVoucher(voucherEntryEntity);  // 凭证分录对象
                                    voucherEntryVo.setOpts(params);  //核算项目
                                    entryVoList.add(voucherEntryVo);
                                }
                        }
                        if(debitSum.compareTo(creditSum)!=0){  //借贷不平
                            String str = "导入失败! <p style='color:red;'>日期:"+ keys[0]+"  凭证字:"+keys[1]+"  凭证号:"+keys[2]+"</p>  借贷不平！";
                            return Result.error(str);
                        }
                        voucherEntity.setDebitTotal(debitSum);  //借方合计金额
                        voucherEntity.setCreditTotal(creditSum); //贷方合计金额
                        voucherEntity.setPreparerId(createId); //制单人Id
                        voucherEntity.setPreparerName(createName); //制单人名称
                        voucherEntity.setAudited(Constant.VOUCHER_ENTRY_APPROVAL_NO); //审核状态 2：未审核 ，1：审核
                        voucherEntity.setPosted(Constant.VOUCHER_ENTRY_POSTED_NO); //是否过账 1：是，2：否
                        voucherEntity.setCreateId(createId);
                        voucherEntity.setCreateName(createName);
                        voucherEntity.setCreateTime(new Date());
                        voucherEntity.setStatus(Constant.VOUCHER_REGULAR);
                        voucherEntity.setSobId(organId);
                        voucherEntity.setBelongSystem(Constant.SYS_FINANCE);  //所属系统_凭证生成来自哪个模块系统
                        voucherVO.setEntity(voucherEntity);
                        voucherVO.setEntryVoList(entryVoList);
                        result = saveOrUpdateVoucher(voucherVO);
                        System.out.print("返回结果"+JsonUtil.objToJson(result));
                 }
            }
        return result;
    }

    /**
    * @description: 上一个下一个凭证
    * @author zhengfei
    * @eamil 936864724@qq.com
    * @date 2018-07-20 13:10
    * @param sobId, voucherId,     type --> 1: 上一个  2：后一个
    * @return com.htrfid.util.Result
    */
    @Override
    public Result switchVoucher(Long sobId, Long voucherId, Integer type) throws MyException{
        List<Long> ids = voucherRemoteService.selectIds(sobId);
        if(ids==null||ids.size()==0){
            return Result.error("系统异常错误，请重试");
        }
        Long targetId = 0L;
        for(int i = 0;i<ids.size();i++){
            if(voucherId.equals(ids.get(i))){
                if(type.intValue() == 1){
                    //上一个
                    if(i == 0){
                        targetId = 0L;
                    }else{
                        targetId = ids.get(i-1);
                    }
                }else if(type.intValue() == 2){
                    //下一个
                    if(i == ids.size()-1){
                        targetId = 0L;
                    }else{
                        targetId = ids.get(i+1);
                    }
                }
                break;
            }
        }
        if(targetId.intValue() == 0){
            return Result.error("暂无更多凭证");
        }
        VoucherVO voucherVO = infoVoucher(sobId, targetId);
        return Result.ok(voucherVO);
    }

    /**
     * @description 凭证列表信息
     * @author lxy
     * @eamil lxyyxljava@163.com
     * @date  2018-09-12 11:23 
     * @param 
     * @return 
     */
    @Override
    public List<VoucherEntity> queryVoucherList(VoucherEntity voucherEntity) {
        List<VoucherEntity> list = new ArrayList<>();
        try {
            list =  ResponseUtil.getResult(voucherRemoteService.queryVoucherList(voucherEntity),
                    new TypeReference<ResponseVO<List<VoucherEntity>>>() {});
        }catch (Exception e){
            logger.error(e.getMessage());
        }
        return list;
    }
}
