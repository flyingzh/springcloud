package com.htrfid.finance.controller;

import com.htrfid.base.controller.BaseController;
import com.htrfid.exception.MyException;
import com.htrfid.finance.common.Constant;
import com.htrfid.finance.entity.ItemRelateDetailEntity;
import com.htrfid.finance.entity.VoucherEntity;
import com.htrfid.finance.entity.VoucherEntryEntity;
import com.htrfid.finance.service.ItemRelateDetailService;
import com.htrfid.finance.service.VoucherEntryService;
import com.htrfid.finance.service.VoucherService;
import com.htrfid.finance.vo.VoucherEntryVo;
import com.htrfid.finance.vo.VoucherQueryResultVO;
import com.htrfid.finance.vo.VoucherQueryVO;
import com.htrfid.finance.vo.VoucherVO;
import com.htrfid.registry.consul.model.NewRequestMapping;
import com.htrfid.sysmanager.entity.SysUser;
import com.htrfid.util.JsonUtil;
import com.htrfid.util.Result;
import com.htrfid.util.StringUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.util.CollectionUtils;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;


/**
 * @author lirui
 * @version V1.0
 * @className VoucherController
 * @description 凭证
 * @email lr@htrfid.com
 * @date 2018-06-13 17:39:55
 **/
@RestController
@NewRequestMapping(version = "V1.0", value = "/voucher", serviceName = "voucher", serviceDesc = "this is a voucher controller")
public class VoucherController extends BaseController {

    private static final Logger logger = LoggerFactory.getLogger(VoucherController.class);

    @Autowired
    private VoucherService voucherService;
    @Autowired
    private VoucherEntryService voucherEntryService;
    @Autowired
    private ItemRelateDetailService itemRelateDetailService;


    /**
     * @param voucherEntity
     * @return com.htrfid.util.Result
     * @description:查询凭证列表
     * @author zhengfei
     * @eamil 936864724@qq.com
     * @date 2018-06-22 11:20
     */
    @NewRequestMapping(value = "/list", serviceName = "voucher-list", serviceDesc = "this is a voucher controller API list", method = RequestMethod.POST)
    public Result list(@RequestBody VoucherEntity voucherEntity) throws MyException {
        List<VoucherEntity> voucherEntities = voucherService.queryListByBean(voucherEntity);
        if (voucherEntities == null || voucherEntities.size() == 0) {
            return Result.ok(null);
        }
        List<VoucherVO> voucherList = new ArrayList<>();
        for (VoucherEntity entity : voucherEntities) {
            VoucherVO voucherVO = new VoucherVO();
            List<VoucherEntryEntity> voucherEntryList = voucherEntryService.queryEntryVoucher(entity.getId(), entity.getSobId());
            //查询科目核算项目
            if (voucherEntryList == null || voucherEntryList.size() == 0) {
                continue;
            }
            List<VoucherEntryVo> vos = new ArrayList<>();
            for (VoucherEntryEntity entryEntity : voucherEntryList) {
                VoucherEntryVo voucherEntryVo = new VoucherEntryVo();
                voucherEntryVo.setVoucher(entryEntity);
                Map<String, Object> map = new HashMap<>();
                map.put("sobId", entryEntity.getSobId());
                map.put("relateType", Constant.ITEM_RELATE_DETAIL_TYPE_VOUCHER);
                map.put("relateId", entryEntity.getId());
                map.put("is_del",Constant.IS_DEL_NO);
                List<ItemRelateDetailEntity> itemRelateDetailEntities = itemRelateDetailService.queryList(map);
                Map<String, Object> opts = new HashMap<>();
                for (ItemRelateDetailEntity relateDetailEntity : itemRelateDetailEntities) {
                    opts.put(relateDetailEntity.getItemClassId().toString(), relateDetailEntity.getItemId());
                }
                voucherEntryVo.setOpts(opts);
                vos.add(voucherEntryVo);
            }
            voucherVO.setEntryVoList(vos);
            voucherVO.setEntity(entity);
            voucherList.add(voucherVO);
        }
        return Result.ok(voucherList);
    }

    /**
     * @param voucher
     * @return com.htrfid.util.Result
     * @description:查询凭证
     * @author zhengfei
     * @eamil 936864724@qq.com
     * @date 2018-06-25 19:29
     */
    @NewRequestMapping(value = "/infoVoucher", serviceName = "voucher-infoVoucher", serviceDesc = "this is a voucher controller API infoVoucher", method = RequestMethod.POST)
    public Result infoVoucher(@RequestBody VoucherEntity voucher) {
        //查询凭证实体
    	try {
    		Result voucherEntity = voucherService.queryVoucher(voucher);
            return voucherEntity;
		} catch (MyException e) {
			return null;
		}
    }

    /**
     * @param voucherVO
     * @return Result
     * @description:保存凭证
     * @author lirui
     * @eamil lr@htrfid.com
     * @date 2018-06-13 17:39:55
     */
    @NewRequestMapping(value = "/saveOrUpdate", serviceName = "voucher-save", serviceDesc = "this is a voucher controller API save", method = RequestMethod.POST)
    public Result saveOrUpdate(@RequestBody VoucherVO voucherVO, @RequestParam("userId") Long userId, @RequestParam("userName") String userName) {
        logger.info("saveOrUpdate request args: {}", JsonUtil.objToJson(voucherVO));
        SysUser currentUser = new SysUser();
        currentUser.setId(userId);
        currentUser.setUsername(userName);
        Result voucherResult = voucherService.saveOrUpdate(voucherVO, currentUser);
        /*if (!EnumConstant.PUBLIC.CODE_YES.getValue().equals(voucherResult.getCode())) {
            return voucherResult;
        }
        VoucherEntity entity = (VoucherEntity) voucherResult.getData();
        Result voucherEntryResult = voucherEntryService.saveOrUpdate(voucherVO, entity, currentUser);
        if (!EnumConstant.PUBLIC.CODE_YES.getValue().equals(voucherEntryResult.getCode())) {
            return voucherEntryResult;
        }*/
        return voucherResult;
    }

    /**
     * @param ids
     * @return Result
     * @description:批量删除凭证
     * @author lirui
     * @eamil lr@htrfid.com
     * @date 2018-06-13 17:39:55
     */
    @NewRequestMapping(value = "/deleteBatch", serviceName = "voucher-deleteBatch", serviceDesc = "this is a voucher controller API deleteBatch", method = RequestMethod.POST)
    public Result deleteBatch(@RequestParam(value = "ids[]") Long[] ids,@RequestParam("sobId")Long sobId) {
        Result result = voucherService.deleteBatch(ids,sobId);
        //voucherEntryService.deleteBatch(ids);
        return result;
    }


    /**
     * @param sobId                账套ID
     * @param voucherGroupId       凭证字ID
     * @param currentAccountYear   当前会计年度
     * @param currentAccountPeriod 当前年度会计区间
     * @return com.htrfid.util.Result
     * @description: 获取当前会计年度会计期间最大凭证号
     * @author zhengfei
     * @eamil 936864724@qq.com
     * @date 2018-06-21 9:12
     */
    @NewRequestMapping(value = "/getSerialNum", serviceName = "voucher-getSerialNum", serviceDesc = "this is a voucher controller API getSerialNum", method = RequestMethod.POST)
    public Result getSerialNum(@RequestParam(value = "sobId") Long sobId,
                               @RequestParam(value = "voucherGroupId") Long voucherGroupId,
                               @RequestParam(value = "currentAccountYear") Integer currentAccountYear,
                               @RequestParam(value = "currentAccountPeriod") Integer currentAccountPeriod) {
        Integer serialNum = voucherService.querySerialNum(sobId, voucherGroupId, currentAccountYear, currentAccountPeriod);
        if (serialNum == null) {
            serialNum = Integer.valueOf(0);
        }
        logger.info("the method getSerialNum return : {}", serialNum);
        return Result.ok(serialNum);
    }


    /**
     * @param sobId     账套id
     * @param voucherId 凭证id
     * @return com.htrfid.util.Result
     * @description: 凭证复制
     * @author zhengfei
     * @eamil 936864724@qq.com
     * @date 2018-06-22 16:33
     */
    @NewRequestMapping(value = "/copyVoucher", serviceName = "voucher-copyVoucher", serviceDesc = "this is a voucher controller API copyVoucher", method = RequestMethod.POST)
    public Result copyVoucher(@RequestParam("sobId") Long sobId, @RequestParam("voucherId") Long voucherId) {
        VoucherEntity voucherEntity = voucherService.copyVoucher(sobId, voucherId);
        //查询凭证分录
        VoucherVO voucherVO = new VoucherVO();
        List<VoucherEntryVo> vos = voucherEntryService.copyVoucher(voucherId, sobId);
        voucherVO.setEntryVoList(vos);
        voucherVO.setEntity(voucherEntity);
        return Result.ok(voucherVO);
    }

    /**
     * @param sobId     账套id
     * @param voucherId 凭证id
     * @param userId
     * @param userName
     * @param type:1-审核 2-反审核
     * @return com.htrfid.util.Result
     * @description: 凭证审核/反审核
     * @author zhengfei
     * @eamil 936864724@qq.com
     * @date 2018-06-22 16:34
     */
    @NewRequestMapping(value = "/approvalVoucher", serviceName = "voucher-approvalVoucher", serviceDesc = "this is a voucher controller API approvalVoucher", method = RequestMethod.POST)
    public Result approvalVoucher(@RequestParam("sobId") Long sobId,
                                  @RequestParam("voucherId") Long voucherId,
                                  @RequestParam("userId") Long userId,
                                  @RequestParam("userName") String userName,
                                  @RequestParam("type") Integer type) {
        return voucherService.approvalVoucher(sobId, voucherId, userId, userName, type);
    }


    /**
     * @param
     * @return com.htrfid.util.Result
     * @description:删除凭证
     * @author zhengfei
     * @eamil 936864724@qq.com
     * @date 2018-06-22 17:41
     */
    @NewRequestMapping(value = "/deleteVoucher", serviceName = "voucher-deleteVoucher", serviceDesc = "this is a voucher controller API deleteVoucher", method = RequestMethod.POST)
    public Result deleteVoucher(@RequestParam("voucherId") Long voucherId, @RequestParam("sobId") Long sobId) {
        //删除凭证
        Result result = voucherService.deleteById(voucherId, sobId);
        return result;
    }

    /**
     * @param sobId, voucherId
     * @return com.htrfid.util.Result
     * @description: 红字冲销
     * @author zhengfei
     * @eamil 936864724@qq.com
     * @date 2018-06-27 8:26
     */
    @NewRequestMapping(value = "/writeOff", serviceName = "voucher-writeOff", serviceDesc = "this is a voucher controller API writeOff", method = RequestMethod.POST)
    public Result writeOff(@RequestParam("sobId") Long sobId,
                           @RequestParam("voucherId") Long voucherId) throws MyException {
        Result result = Result.error();
        VoucherEntity voucherEntity = voucherService.writeOffVoucher(sobId, voucherId);
        if (voucherEntity != null) {
            result = voucherEntryService.writeOffVoucher(voucherEntity, voucherId);
        }
        return result;
    }

    /**
     * @param voucherEntity
     * @return com.htrfid.util.Result
     * @description: 查询凭证
     * @author zhengfei
     * @eamil 936864724@qq.com
     * @date 2018-06-27 16:14
     */
    @NewRequestMapping(value = "/queryVoucher", serviceName = "voucher-queryVoucher", serviceDesc = "this is a voucher controller API queryVoucher", method = RequestMethod.POST)
    public Result queryVoucher(@RequestBody VoucherEntity voucherEntity) {
        Result result = infoVoucher(voucherEntity);
        return result;
    }


    /**
     * @param
     * @return
     * @description 统计凭证汇总表数据
     * @author lxy
     * @eamil lxyyxljava@163.com
     * @date 2018/7/2 18:12
     */
    @NewRequestMapping(value = "/voucherCount", serviceName = "voucher-voucherCount", serviceDesc = "this is a voucher controller API voucherCount", method = RequestMethod.POST)
    public Result voucherCount(@RequestParam("subjctStartNum") Integer subjctStartNum,
                               @RequestParam("subjctEndNum") Integer subjctEndNum,
                               @RequestParam("startDate") String startDate,
                               @RequestParam("endDate") String endDate,
                               @RequestParam(value = "startVoucherNum", required = false) Integer startVoucherNum,
                               @RequestParam(value = "endVoucherNum", required = false) Integer endVoucherNum,
                               @RequestParam(value = "voucherId", required = false) Long voucherId
    ) {
        return Result.ok(voucherService.voucherCount(subjctStartNum, subjctEndNum, startDate, endDate, startVoucherNum, endVoucherNum, voucherId));
    }


    /**
     * @param
     * @return com.htrfid.util.Result
     * @description 获取总借贷金额
     * @author lxy
     * @eamil lxyyxljava@163.com
     * @date 2018/7/2 18:09
     */
    @NewRequestMapping(value = "/queryVoucherEnclosure", serviceName = "voucher-queryVoucherEnclosure", serviceDesc = "this is a voucher controller API queryVoucherEnclosure", method = RequestMethod.POST)
    public Result queryVoucherEnclosure(@RequestParam("startDate") String startDate,
                                        @RequestParam("endDate") String endDate,
                                        @RequestParam(value = "startVoucherNum", required = false) Integer startVoucherNum,
                                        @RequestParam(value = "endVoucherNum", required = false) Integer endVoucherNum,
                                        @RequestParam(value = "voucherId", required = false) Long voucherId
    ) {
        Map<String, Object> params = new HashMap<>();
        params.put("startDate", startDate);
        params.put("endDate", endDate);
        params.put("startVoucherNum", startVoucherNum);
        params.put("endVoucherNum", endVoucherNum);
        params.put("voucherId", voucherId);
        return Result.ok(voucherService.queryVoucherEnclosure(params));
    }


    /**
     * @param voucherEntity
     * @return com.htrfid.util.Result
     * @description:查询凭证(试算平衡调用)
     * @author sxy
     * @eamil sunxiaoyu@tobosoft.com.cn
     * @date 2018-07-02 19:16
     */
    @NewRequestMapping(value = "/queryVoucherList", serviceName = "voucher-queryVoucherList", serviceDesc = "this is a voucher controller API queryVoucherList", method = RequestMethod.POST)
    public Result queryVoucherList(@RequestBody VoucherEntity voucherEntity) {
        List<VoucherEntity> voucherEntityList = voucherService.queryListByBean(voucherEntity);
        return Result.ok(voucherEntityList);
    }

    /**
     * @param
     * @return
     * @description
     * @author lxy 查凭证
     * @eamil lxyyxljava@163.com
     * @date 2018/7/4 10:17
     */
    @NewRequestMapping(value = "/queryVoucherByVo", serviceName = "voucher-queryVoucherByVo", serviceDesc = "this is a voucher controller API queryVoucherByVo", method = RequestMethod.POST)
    public Map<String, Object> queryVoucherByVo(@RequestBody(required = false) VoucherQueryVO voucherQueryVO) {
        Integer itemClassId =voucherQueryVO.getItemClassId();
        Long itemId =voucherQueryVO.getItemId();
        BigDecimal startAmmount = voucherQueryVO.getStartAmmount();
        BigDecimal endAmmount = voucherQueryVO.getEndAmmount();
        List<Long> voucherIdList = new ArrayList<>();
        if(itemClassId!=null || itemId!=null || startAmmount!=null || endAmmount!=null ){ //有根据核算项目查询
            Map<String,Object> params = new HashMap<>();
            params.put("sobId",voucherQueryVO.getSobId());
            Integer relateType = null;
            if(itemClassId!=null){
                relateType = Constant.ITEM_RELATE_DETAIL_TYPE_VOUCHER;
            }
            params.put("relateType",relateType);
            params.put("itemClassId",itemClassId);
            params.put("itemId",itemId);
            params.put("startAmount",startAmmount);
            params.put("endAmount",endAmmount);
            voucherIdList = voucherService.getVoucherIdList(params);
            voucherQueryVO.setVoucherIdList(voucherIdList);
            Map<String,Object> resultMap = new HashMap<>();
            if(!CollectionUtils.isEmpty(voucherIdList)){  //没有核算羡慕
                resultMap = voucherService.queryVoucherNew(voucherQueryVO);
            }
            return resultMap;
        }else {
            voucherQueryVO.setVoucherIdList(voucherIdList);
        }
        return voucherService.queryVoucherNew(voucherQueryVO);
    }

    /**
     * @description 导出凭证列表
     * @author lxy
     * @eamil lxyyxljava@163.com
     * @date  2018-10-16 14:54
     * @param 
     * @return 
     */
    @NewRequestMapping(value = "/exportVoucher", serviceName = "voucher-exportVoucher", serviceDesc = "this is a voucher controller API exportVoucher", method = RequestMethod.POST)
    public List<VoucherQueryResultVO> exportVoucher(@RequestBody(required = false)VoucherQueryVO voucherQueryVO){
        return voucherService.exportVoucher(voucherQueryVO);
    }


    /** 查询应收应付机制凭证
     * @description:TODO
     * @author tangmi
     * @eamil tangmi6698@163.com
     * @date 2018-07-24 13:39
     * @param
     * @return
     */
    @NewRequestMapping(value = "/queryMechanismCertificate", serviceName = "voucher-queryVoucherByVo", serviceDesc = "this is a voucher controller API queryVoucherByVo", method = RequestMethod.POST)
    Map<String,Object> queryMechanismCertificate(@RequestBody(required = false) VoucherQueryVO voucherQueryVO){
        if (voucherQueryVO != null) {
            if (voucherQueryVO.getVoucherStatus()) {
                voucherQueryVO.setBelongSystem(1);  //机制凭证
            }
            String voucherNumberStr = voucherQueryVO.getVoucherNumberStr();
            //解析查询的凭证号参数
            if (!StringUtils.isEmpty(voucherNumberStr)) {
                int length = voucherNumberStr.split("-").length;
                if (length == 1) {
                    voucherQueryVO.setStartVoucherNumber(Integer.valueOf(voucherNumberStr.split("-")[0]));
                }
                if (length == 2) {
                    voucherQueryVO.setStartVoucherNumber(Integer.valueOf(voucherNumberStr.split("-")[0]));
                    voucherQueryVO.setEndVoucherNumber(Integer.valueOf(voucherNumberStr.split("-")[1]));
                }
            }

        }
        return voucherService.queryMechanismCertificate(voucherQueryVO);
    }
    /**
     * @param accountYear
     * @param accountPeriod
     * @param sobId
     * @return 有断号返回true，无断号返回false
     * @description: 检查会计期间内是否存在凭证号断号
     * @author wangchunqiang
     * @eamil wcq@htrfid.com
     * @date 2018-07-07 15:34
     */
    @NewRequestMapping(value = "/checkVoucherNumberNonSequence", method = RequestMethod.POST)
    public boolean checkVoucherNumberNonSequence(@RequestParam int accountYear,
                                                 @RequestParam int accountPeriod,
                                                 @RequestParam Long sobId) {
        Map<String, Object> map = new HashMap<>();
        map.put("sobId", sobId);
        map.put("accountYear", accountYear);
        map.put("accountPeriod", accountPeriod);
        int ret = voucherService.checkVoucherNumberNonSequence(map);
        return ret > 0 ? true : false;
    }


    /**
     * @param
     * @return com.htrfid.util.Result
     * @description: 凭证过账
     * @author zhengfei
     * @eamil 936864724@qq.com
     * @date 2018-07-04 19:34
     */
    @NewRequestMapping(value = "/voucherPassBill", serviceName = "voucher-voucherPassBill", serviceDesc = "this is a voucher controller API voucherPassBill", method = RequestMethod.POST)
    public Result voucherPassBill(@RequestParam("ids[]")Long[] ids,
                                  @RequestParam("sobId") Long sobId,
                                  @RequestParam("userId") Long userId,
                                  @RequestParam("userName") String userName) throws MyException {
        Result result = voucherService.voucherPassBill(ids, sobId, userId, userName);
        return result;
    }


    /**
     * @param
     * @return
     * @description
     * @author lxy 根据凭证ID查询凭证分录
     * @eamil lxyyxljava@163.com
     * @date 2018/7/5 19:58
     */
    @NewRequestMapping(value = "/queryVoucherEntryByVo", serviceName = "voucher-queryVoucherEntryByVo", serviceDesc = "this is a voucher controller API queryVoucherEntryByVo", method = RequestMethod.POST)
    public List<VoucherQueryResultVO> queryVoucherEntryByVo(@RequestBody(required = false) VoucherQueryVO voucherQueryVO) {
        return voucherService.queryVoucherEntryByVo(voucherQueryVO);
    }

    /**
     * @param
     * @return
     * @description
     * @author lxy 获取会计期间
     * @eamil lxyyxljava@163.com
     * @date 2018/7/6 14:53
     */
    @NewRequestMapping(value = "/getVoucherDate", serviceName = "voucher-getVoucherDate", serviceDesc = "this is a voucher controller API getVoucherDate", method = RequestMethod.POST)
    public List<Map<String, Object>> getVoucherDate(@RequestParam("sobId") Long sobId) {
        Map<String,Object> params = new HashMap<>();
        params.put("sobId",sobId);
        return voucherService.getVoucherDate(params);
    }


    /**
     * @param
     * @return com.htrfid.util.Result
     * @description: 凭证整理
     * @author zhengfei
     * @eamil 936864724@qq.com
     * type: 1-按凭证字号排  2-按日期排
     * @date 2018-07-05 16:55
     */
    @NewRequestMapping(value = "/sort", serviceName = "voucher-sortVoucher", serviceDesc = "this is a voucher controller API sortVoucher", method = RequestMethod.POST)
    public Result sortVoucher(@RequestParam("accountYear")Integer accountYear,@RequestParam("accountPeriod")Integer accountPeriod,@RequestParam("sobId")Long sobId){
        return voucherService.sortVoucher(accountYear,accountPeriod,sobId);
    }

    /**
     * @param
     * @return com.htrfid.util.Result
     * @description:删除机制凭证
     * @author zhengfei
     * @eamil 936864724@qq.com
     * @date 2018-06-22 17:41
     */
    @NewRequestMapping(value = "/deleteMechanismVoucher", serviceName = "voucher-deleteVoucher", serviceDesc = "this is a voucher controller API deleteVoucher", method = RequestMethod.POST)
    public Result deleteMechanismVoucher(@RequestParam("voucherId") Long voucherId,
                                         @RequestParam("sobId") Long sobId,
                                         @RequestParam("currentUserId") Long currentUserId,
                                         @RequestParam("username") String username) {

            return  voucherService.deleteMechanismVoucher(voucherId, sobId, currentUserId, username);

    }

    /**
     * 批量删除机制凭证
     *
     * @param
     * @return
     * @description:TODO
     * @author tangmi
     * @eamil tangmi6698@163.com
     * @date 2018-07-10 15:10
     */
    @NewRequestMapping(value = "/deleteMechanismVoucherBatch", serviceName = "voucher-deleteVoucher", serviceDesc = "this is a voucher controller API deleteVouchers", method = RequestMethod.POST)
    public Result deleteMechanismVoucherBatch(@RequestParam("sobId") Long sobId,
                                              @RequestParam("ids[]") Long[] ids,
                                              @RequestParam("currentUserId") Long currentUserId,
                                              @RequestParam("username") String username) {
        return voucherService.deleteMechanismVoucherBatch(sobId, ids, currentUserId, username);

    }

    /**
     * @param sobId
     * @return com.htrfid.util.Result
     * @description: 获取会计年度区间  凭证最早年度到凭证最大最大年度
     * @author zhengfei
     * @eamil 936864724@qq.com
     * @date 2018-07-12 8:30
     */
    @NewRequestMapping(value = "/getFinanceYearPeriod", serviceName = "voucher-getFinanceYearPeriod", serviceDesc = "this is a voucher controller API getFinanceYearPeriod", method = RequestMethod.POST)
    public Result getFinanceYearPeriod(@RequestParam("sobId") Long sobId) {
        return voucherService.getFinanceYearPeriod(sobId);
    }



    /**
     * @param sobId
     * @return com.htrfid.util.Result
     * @description: 获取会计年度区间  凭证最早年度到凭证最大最大年度
     * @author zhengfei
     * @eamil 936864724@qq.com
     * @date 2018-07-12 8:30
     */
    @NewRequestMapping(value = "/selectIds", serviceName = "voucher-getFinanceYearPeriod", serviceDesc = "this is a voucher controller API getFinanceYearPeriod", method = RequestMethod.POST)
    public List<Long> selectIds(@RequestParam("sobId") Long sobId) {
        return voucherService.selectIds(sobId);
    }

    @NewRequestMapping(value = "/deleteMechanismVouchere", serviceName = "voucher-getFinanceYearPeriod", serviceDesc = "this is a voucher controller API getFinanceYearPeriod", method = RequestMethod.POST)
    public Result deleteMechanismVouchere(@RequestParam("sobId")Long sobId,
                                         @RequestParam("voucherId")Long voucherId,
                                         @RequestParam("ownershipSystem")Integer ownershipSystem){
        return voucherService.deleteMechanismVouchere(sobId,voucherId,ownershipSystem);
    }

    /**
     * @param sobId     账套id
     * @param ids 凭证id
     * @param userId
     * @param userName
     * @param type:1-审核 2-反审核
     * @return com.htrfid.util.Result
     * @description: 批量 凭证审核/反审核
     * @author zhengfei
     * @eamil 936864724@qq.com
     * @date 2018-06-22 16:34
     */
    @NewRequestMapping(value = "/approvalVoucherBatch", serviceName = "voucher-approvalVoucherBatch", serviceDesc = "this is a voucher controller API approvalVoucherBatch", method = RequestMethod.POST)
    public Result approvalVoucherBatch(@RequestParam("sobId") Long sobId,
                                       @RequestParam(value = "ids[]") Long[] ids,
                                  @RequestParam("userId") Long userId,
                                  @RequestParam("userName") String userName,
                                  @RequestParam("type") Integer type) {
        return voucherService.approvalVoucherBatch(sobId, ids, userId, userName, type);
    }

    @NewRequestMapping(value = "/queryVoucherType", serviceName = "voucher-queryVoucherType", serviceDesc = "this is a voucher controller API approvalVoucherBatch", method = RequestMethod.POST)
    public Result queryVoucherType(@RequestParam("sobId") Long sobId){
        return voucherService.queryVoucherType(sobId);
    }

    /**
    * @description: 查询是否有生成计提折旧凭证
    * @author zhengfei
    * @eamil 936864724@qq.com
    * @date 2018-09-26 17:15
    * @param entity
    * @return com.htrfid.util.Result
    */
    @NewRequestMapping(value = "/queryDepreciationVoucher", serviceName = "voucher-queryDepreciationVoucher", serviceDesc = "this is a voucher controller API queryDepreciationVoucher", method = RequestMethod.POST)
    public Result queryDepreciationVoucher(@RequestBody VoucherEntity entity){
        return voucherService.queryDepreciationVoucher(entity);
    }

    /**
     * @description:查询当前期与以后期是否生成凭证
     * @author yaoliang
     * @eamil yaoliang1102@163.com
     * @date 2018-10-15 15:40
     * @param VoucherEntity
     * @return Boolean
     */ 
    @NewRequestMapping(value = "/getFaVoucherCurrenAndAfter", serviceName = "voucher-getFaVoucherCurrenAndAfter", serviceDesc = "this is a voucher controller API getFaVoucherCurrenAndAfter", method = RequestMethod.POST)
    public Boolean getFaVoucherCurrenAndAfter(@RequestBody VoucherEntity entity){
        return voucherService.getFaVoucherCurrenAndAfter(entity);
    }
    /** map中封装的参数为:year sobId endPeriod startPeriod belongSystem
     * @description:TODO 查询工资的凭证管理列表
     * @author tangmi
     * @eamil tangmi6698@163.com
     * @date 2018-12-19 14:38
     * @param year 会计年度
     * @param sobId 组织id
     * @param endPeriod 结束期间
     * @param startPeriod 开始期间
     * @param belongSystem 所属系统
     * @return com.htrfid.util.Result
     */
    @NewRequestMapping(value = "/wageVoucherManagement", serviceName = "voucher-wageVoucherManagement", serviceDesc = "this is a voucher controller API wageVoucherManagement", method = RequestMethod.POST)
    public Result wageVoucherManagement(@RequestParam("year") Integer year,
                                        @RequestParam("startPeriod")Integer startPeriod,
                                        @RequestParam("endPeriod")Integer endPeriod,
                                        @RequestParam("sobId")Long sobId) {
        Map<String,Object> map = new HashMap<>();
        map.put("year",year);
        map.put("startPeriod",startPeriod);
        map.put("endPeriod",endPeriod);
        map.put("sobId",sobId);
        map.put("belongSystem",Constant.SALARY_SYSTEM);
        return voucherService.wageVoucherManagement(map);
    }

}
