package com.htrfid.finance.service.impl;

import java.util.List;

import javax.annotation.CheckReturnValue;

import org.apache.http.util.TextUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Propagation;
import org.springframework.transaction.annotation.Transactional;

import com.htrfid.constant.EnumConstant;
import com.htrfid.finance.dao.WmPersonalTaxDao;
import com.htrfid.finance.entity.WmPersonalTaxEntity;
import com.htrfid.finance.service.WmEmployeeIncomeTaxService;
import com.htrfid.finance.service.WmPersonalTaxInitService;
import com.htrfid.util.Result;

@Service
public class WmPersonalTaxInitServiceImpl implements WmPersonalTaxInitService {

	
	@Autowired
	private WmPersonalTaxDao wmPersonalTaxDao;
	@Autowired
	private WmEmployeeIncomeTaxService wmEmployeeIncomeTaxService;
	
	/**
	 * 
	 * @Title: listInitTax   
	 * @Description: 个人所得税初始值列表
	 * @author: zhengfei
	 * @date: 2018年12月6日 上午8:58:42
	 * @param: @param personalTaxEntity
	 * @param: @return      
	 * @return:    
	 * @throws
	 */
	@Override
	public Result listInitTax(WmPersonalTaxEntity personalTaxEntity) {
		List<WmPersonalTaxEntity> bean = wmPersonalTaxDao.queryListByBean(personalTaxEntity);
		return Result.ok(bean);
	}

	/**
	 * 
	 * @Title: queryInitTax   
	 * @Description: 个人所得税初始值详情
	 * @author: zhengfei
	 * @date: 2018年12月6日 上午8:58:33
	 * @param: @param personalTaxEntity
	 * @param: @return      
	 * @throws
	 */
	@Override
	public Result queryInitTax(WmPersonalTaxEntity personalTaxEntity) {
		WmPersonalTaxEntity entity = wmPersonalTaxDao.queryByEntity(personalTaxEntity);
		return entity==null?Result.error("操作失败：暂无查询数据"):Result.ok(entity);
	}

	/**
	 * 
	 * @Title: deleteInitTax   
	 * @Description: 删除个人所得税初始值
	 * @author: zhengfei
	 * @date: 2018年12月6日 上午8:58:11
	 * @param: @param personalTaxEntity
	 * @param: @return      
	 * @return:    
	 * @throws
	 */
	@Transactional(propagation=Propagation.REQUIRED,rollbackFor=Exception.class)
	@Override
	public Result deleteInitTax(WmPersonalTaxEntity personalTaxEntity) {
		Boolean initBeUsed = wmEmployeeIncomeTaxService.personalInitBeUsed(personalTaxEntity.getCategoryId(), personalTaxEntity.getSobId(), personalTaxEntity.getId());
		if(initBeUsed) {
			return Result.error("该所得项初始设置已经被使用，无法删除");
		}
		int result = wmPersonalTaxDao.deleteByEntity(personalTaxEntity);
		return result>0?Result.ok(wmPersonalTaxDao.queryListByBean(personalTaxEntity)):Result.error("操作失败，系统异常");
	}


	/**
	 * 
	 * @Title: saveOrUpdate   
	 * @Description: 新增或修改保存
	 * @author: zhengfei
	 * @date: 2018年12月6日 上午8:58:22
	 * @param: @param personalTaxEntity
	 * @param: @return      
	 * @return:    
	 * @throws
	 */
	@Transactional(propagation=Propagation.REQUIRED,rollbackFor=Exception.class)
	@Override
	public Result saveOrUpdate(WmPersonalTaxEntity personalTaxEntity) {
		Result checkResult = checkAttrValue(personalTaxEntity);
		if(!EnumConstant.PUBLIC.CODE_YES.getValue().equals(checkResult.getCode())) {
			return checkResult;
		}
		if(personalTaxEntity.getId() == null || personalTaxEntity.getId().intValue() == 0) {
			//save
			personalTaxEntity.setDefaultSetting(0);
			wmPersonalTaxDao.save(personalTaxEntity);
		}else {
			//update
			wmPersonalTaxDao.update(personalTaxEntity);
		}
		return Result.ok(wmPersonalTaxDao.queryListByBean(personalTaxEntity));
	}

	/**
	 * @Title: checkAttrValue   
	 * @Description: 验证必填项是否完整
	 * @author: zhengfei
	 * @date: 2018年12月6日 上午9:28:49
	 * @param: @param personalTaxEntity
	 * @param: @return      
	 * @return: Result      
	 * @throws
	 */
	private Result checkAttrValue(WmPersonalTaxEntity personalTaxEntity) {
		if(TextUtils.isEmpty(personalTaxEntity.getName())) {
			return Result.error("名称不能为空");
		}else if(checkValIsNull(personalTaxEntity.getTaxTypeId())) {
			return Result.error("税率类别不能为空");
		}else if(checkValIsNull(personalTaxEntity.getTaxItemId() )) {
			return Result.error("税率项目不能为空");
		}else if(checkValIsNull(personalTaxEntity.getIncomeId()) ) {
			return Result.error("所的计算不能为空");
		}else if(personalTaxEntity.getIncomePeriod() == null || personalTaxEntity.getIncomePeriod().intValue() == 0) {
			return Result.error("所的期间不能为空");
		}
		return Result.ok("ok");
	}

	private boolean checkValIsNull(Long val) {
		if(val == null || val.longValue() == 0) {
			return true;
		}
		return false;
	}
	
	
	/**
	 * @Title: queryInitTaxRate   
	 * @Description: 查询预设税率设置
	 * @author: zhengfei
	 * @Email: 936864724@qq.com
	 * @date: 2018年12月10日 上午9:17:50
	 * @param: @param personalTaxEntity
	 * @throws
	 */
	@Override
	public Result queryInitTaxRateList(WmPersonalTaxEntity personalTaxEntity) {
//		personalTaxEntity.setDefaultSetting(Constant.DEF_TAX_RATE_SETTING_YES);
		return Result.ok(wmPersonalTaxDao.queryInitList(personalTaxEntity));
	}

	
	/**
	 * 
	 * @Title: ratTaxBeUsed   
	 * @Description: 税率设置是否被使用过
	 * @author: zhengfei
	 * @Email: 936864724@qq.com
	 * @date: 2018年12月17日 下午7:34:15
	 * @param categoryId
	 * @param sobId
	 * @param raxTaxId
	 * @return  boolean  true：使用过  false：未使用过  
	 * @throws
	 */
	@Override
	public Boolean rateTaxBeUsed(Long categoryId,Long sobId,Long raxTaxId) {
		int num = wmPersonalTaxDao.checkTaxRateUseState(categoryId,sobId,raxTaxId);
		return num>0;
	}
	
	/**
	 * 
	 * @Title: ratTaxBeUsed   
	 * @Description: 所得项计算是否被使用过
	 * @author: zhengfei
	 * @Email: 936864724@qq.com
	 * @date: 2018年12月17日 下午7:34:15
	 * @param categoryId
	 * @param sobId
	 * @param raxTaxId
	 * @return  boolean  true：使用过  false：未使用过  
	 * @throws
	 */
	@Override
	public Boolean incomeItemBeUsed(Long categoryId,Long sobId,Long incomeItemId) {
		int num = wmPersonalTaxDao.checkIncomeItemUseState(categoryId,sobId,incomeItemId);
		return num>0;
	}
	
}
