package com.htrfid.financeapp.controller;


import java.io.IOException;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.CellStyle;
import org.apache.poi.ss.util.CellRangeAddress;
import org.apache.poi.xssf.usermodel.XSSFCell;
import org.apache.poi.xssf.usermodel.XSSFFont;
import org.apache.poi.xssf.usermodel.XSSFRow;
import org.apache.poi.xssf.usermodel.XSSFSheet;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.multipart.MultipartFile;

import com.alibaba.fastjson.TypeReference;
import com.htrfid.basedata.entity.TBaseVoucherDataEntity;
import com.htrfid.constant.EnumConstant;
import com.htrfid.exception.MyException;
import com.htrfid.finance.entity.VoucherEntity;
import com.htrfid.finance.vo.VoucherQueryResultVO;
import com.htrfid.finance.vo.VoucherQueryVO;
import com.htrfid.finance.vo.VoucherSummaryResultVO;
import com.htrfid.finance.vo.VoucherVO;
import com.htrfid.financeapp.service.CashierBalanceService;
import com.htrfid.financeapp.service.VoucherService;
import com.htrfid.financeapp.util.ExportUtil;
import com.htrfid.financeapp.util.ResponseUtil;
import com.htrfid.financeapp.vo.ResponseVO;
import com.htrfid.remote.basedata.TBaseVoucherDataRemoteService;
import com.htrfid.shiro.utils.RedisUtil;
import com.htrfid.shiro.utils.UserUtils;
import com.htrfid.util.DateConverUtil;
import com.htrfid.util.JsonUtil;
import com.htrfid.util.Result;
import com.htrfid.util.StringUtils;

/**
 * @description:凭证
 *
 * @author lirui
 * @eamil lr@htrfid.com
 * @date 2018-06-14 19:15
 * @param
 * @return
 */
@RestController
@RequestMapping("/voucherController")
public class VoucherController{

    private final static Logger logger = LoggerFactory.getLogger(VoucherController.class);

    private   static Result  voucherCountData = null;

    private static  Result voucherEnclosureData = null;

    public static  Map<String,Object> voucherMap =  null;

    @Autowired
    private VoucherService voucherService;

    @Autowired
    private TBaseVoucherDataRemoteService voucherDataRemoteService;

    @Autowired
    private CashierBalanceService cashierBalanceService;

    @Autowired
    private RedisUtil redisUtil;

    /**
    * @description:获取当前排序号
    * @author zhengfei
    * @eamil 936864724@qq.com
    * @date 2018-07-25 16:11
    * @param sobId, voucherGroupId
    * @return com.htrfid.util.Result
    */
    @RequestMapping(value = "/getSerialNum",method = RequestMethod.POST)
    public Result getSerialNum(@RequestParam("sobId") Long sobId,@RequestParam("voucherGroupId") Long voucherGroupId,
                               @RequestParam("accountingYear") Integer accountingYear,@RequestParam("accountingPeriod") Integer accountingPeriod){
        sobId = UserUtils.getCurrentUser().getUserCurrentOrganId();
        Integer num = voucherService.getSerialNum(sobId,voucherGroupId,accountingYear,accountingPeriod);
        return Result.ok(num);
    }

    /**
     * @description:判断日期所属期间及是否允许录入
     *
     * @author lirui
     * @eamil lr@htrfid.com
     * @date 2018-06-14 21:09
     * @param
     * @return
     */
    @RequestMapping(value = "/judgmentPeriod",method = RequestMethod.POST)
    public Result judgmentPeriod (@RequestParam Long sobId,@RequestParam String currentDate){
        Map map =voucherService.judgmentPeriod(sobId,currentDate);
        return Result.ok(map);
    }

    /**
     * @description:保存或修改凭证整体信息
     *
     * @author lirui
     * @eamil lr@htrfid.com
     * @date 2018-06-14 21:05
     * @param
     * @return
     */
    @RequestMapping(value = "/saveVoucher",method = RequestMethod.POST)
    public Result saveOrUpdateVoucher(@RequestBody VoucherVO voucherVO){
        logger.info("save json: {}",JsonUtil.objToJson(voucherVO));
        try {
        	return voucherService.saveOrUpdateVoucher(voucherVO);
		} catch (MyException e) {
			return Result.error("系统异常");
		}
    }

    /**
     * @description:查询凭证整体信息
     *
     * @author lirui
     * @eamil lr@htrfid.com
     * @date 2018-06-15 10:52
     * @param
     * @return
     */
    @RequestMapping(value = "/infoVoucher",method = RequestMethod.POST)
    public Result infoVoucher(@RequestParam("sobId") Long sobId,@RequestParam("voucherId") Long voucherId){
    	Long organId = UserUtils.getCurrentUser().getUserCurrentOrganId();
    	try {
    		 VoucherVO voucherVO = voucherService.infoVoucher(organId,voucherId);
    	     return Result.ok(voucherVO);
		} catch (MyException e) {
			return Result.error("系统异常");
		}
    }

    /**
     * @description:初始化凭证页面数据
     * @author zhengfei
     * @eamil 936864724@qq.com
     * @date 2018-06-21 10:17
     * @return com.htrfid.util.Result
     */
    @RequestMapping(value = "/initVoucher" , method = RequestMethod.POST)
    public Result initVoucher() throws MyException {
        logger.info("initVoucher start...");
        Map map = voucherService.initVoucher();
        return Result.ok(map);
    }

    /**
     * @description: 获取科目树
     * @author zhengfei
     * @eamil 936864724@qq.com
     * @date 2018-06-21 20:53
     * @return com.htrfid.util.Result
     */
    @RequestMapping(value = "/getSubjectTree",method = RequestMethod.POST)
    public Result getSubjectTree(){
        return voucherService.getSubjectTree();
    }

    /**
     * @description: 根据科目id获取核算项目列表
     * @author zhengfei
     * @eamil 936864724@qq.com
     * @date 2018-06-23 8:37
     * @param id id
     * @return com.htrfid.util.Result
     */
    @RequestMapping(value = "/getListBySubjectId",method = RequestMethod.POST)
    public Result getListBySubjectId(@RequestParam("id")Long id) {
    	try {
    		Map<String,Object> subList = voucherService.getListBySubjectId(id);
	        logger.info("opts: {}", JsonUtil.objToJson(subList));
	        return Result.ok(subList);
		} catch (MyException e) {
			return Result.error("系统异常");
		}
    }

    /**
     * @description:凭证审核
     * @author zhengfei
     * @eamil 936864724@qq.com
     * @date 2018-06-25 18:37
     * @param type:1-审核  2-反审核
     * @return com.htrfid.util.Result
     */
    @RequestMapping(value = "/approval",method = RequestMethod.POST)
    public Result approvalVoucher(@RequestParam("sobId")Long sobId,
                                  @RequestParam("voucherId")Long voucherId,
                                  @RequestParam("type")Integer type){
        logger.info("approval request args sobId:[{}], voucherId: [{}],type: [{}]",sobId,voucherId,type);
        Result result = voucherService.approval(sobId,voucherId,type);
        return result;
    }

    /**
     * @description:凭证删除
     * @author zhengfei
     * @eamil 936864724@qq.com
     * @date 2018-06-25 18:37
     * @param
     * @return com.htrfid.util.Result
     */
    @RequestMapping(value = "/delete",method = RequestMethod.POST)
    public Result deleteVoucher(@RequestParam("sobId")Long sobId,
                                @RequestParam("voucherId")Long voucherId){
    	sobId = UserUtils.getCurrentUser().getUserCurrentOrganId();
        Result result = voucherService.delete(sobId,voucherId);
        return result;
    }

    /**
     * @description:凭证删除
     * @author zhengfei
     * @eamil 936864724@qq.com
     * @date 2018-06-25 18:37
     * @param
     * @return com.htrfid.util.Result
     */
    @RequestMapping(value = "/deleteBatch",method = RequestMethod.POST)
    public Result deleteBatch(@RequestParam(value = "ids[]") Long[] ids){
        Result result = voucherService.deleteBatch(ids);
        return result;
    }

    /**
     * @description:凭证复制
     * @author zhengfei
     * @eamil 936864724@qq.com
     * @date 2018-06-25 18:48
     * @param sobId, voucherId
     * @return com.htrfid.util.Result
     */
    @RequestMapping(value = "/copyVoucher",method = RequestMethod.POST)
    public Result copyVoucher(@RequestParam("sobId")Long sobId,
                              @RequestParam("voucherId")Long voucherId){
        Result result = voucherService.copyVoucher(sobId,voucherId);
        return result;
    }



    /**
     * @description: 红字冲销
     * @author zhengfei
     * @eamil 936864724@qq.com
     * @date 2018-06-27 8:24
     * @param sobId, voucherId
     * @return com.htrfid.util.Result
     */
    @RequestMapping(value = "/writeOff",method = RequestMethod.POST)
    public Result writeOff(@RequestParam("sobId")Long sobId,
                           @RequestParam("voucherId")Long voucherId){
        return voucherService.writeOff(sobId,voucherId);
    }

    /**
     * @description: 跳转到某个凭证
     * @author zhengfei
     * @eamil 936864724@qq.com
     * @date 2018-06-27 16:08
     * @param voucherEntity
     * @return com.htrfid.util.Result
     */
    @RequestMapping(value = "/jumpVoucher",method = RequestMethod.POST)
    public Result jumpVoucher(@RequestBody VoucherEntity voucherEntity){
        Result result = voucherService.jumpVoucher(voucherEntity);
        return result;
    }

    /**
     * @description 凭证汇总表数据
     * @author lxy
     * @eamil lxyyxljava@163.com
     * @date  2018/7/2 18:17
     * @param
     * @return
     */
    @RequestMapping(value = "/voucherCount", method = RequestMethod.POST)
    public Result voucherCount(@RequestParam("subjctStartNum") Integer subjctStartNum,
                               @RequestParam("subjctEndNum") Integer subjctEndNum,
                               @RequestParam("startDate") String startDate,
                               @RequestParam("endDate") String endDate,
                               @RequestParam(value = "startVoucherNum", required = false) Integer startVoucherNum,
                               @RequestParam(value = "endVoucherNum", required = false) Integer endVoucherNum,
                               @RequestParam(value = "voucherId", required = false) Long voucherId) {
        voucherCountData = voucherService.voucherCount(subjctStartNum, subjctEndNum, startDate, endDate, startVoucherNum, endVoucherNum, voucherId);
        return voucherCountData;
    }


    /**
     * @description 获取凭证字
     * @author lxy
     * @eamil lxyyxljava@163.com
     * @date  2018/7/2 18:16
     * @param
     * @return　com.htrfid.util.Result
     */
    @RequestMapping(value = "/getVoucherAll",method = RequestMethod.POST)
    public Result getVoucherAll()throws Exception{
        //获取凭证字
    	Long sobId = UserUtils.getCurrentUser().getUserCurrentOrganId();
        Result result = voucherDataRemoteService.queryAll(sobId);
        List<TBaseVoucherDataEntity> voucherDataList = new ArrayList<>();
        if(result!=null&&EnumConstant.PUBLIC.CODE_YES.getValue().equals(result.getCode())){
            voucherDataList = ResponseUtil.getResult(result,
                    new TypeReference<ResponseVO<List<TBaseVoucherDataEntity>>>() {});
        }
        return  Result.ok(voucherDataList);
    }

    /**
     * @description 获取借贷总金额
     * @author lxy
     * @eamil lxyyxljava@163.com
     * @date  2018/7/2 18:16
     * @param
     * @return
     */
    @RequestMapping(value = "/queryVoucherEnclosure",method = RequestMethod.POST)
    public Result queryVoucherEnclosure( @RequestParam("startDate")String startDate,
                                         @RequestParam("endDate") String endDate,
                                         @RequestParam(value = "startVoucherNum" ,required = false)Integer startVoucherNum,
                                         @RequestParam(value = "endVoucherNum",required = false)Integer endVoucherNum,
                                         @RequestParam(value = "voucherId",required = false)Long voucherId
    ){
        voucherEnclosureData = voucherService.queryVoucherEnclosure(startDate,endDate,startVoucherNum,endVoucherNum,voucherId);
        return voucherEnclosureData;

    }



    /**
     * @description 导出凭证汇总表数据
     * @author lxy
     * @eamil lxyyxljava@163.com
     * @date  2018/7/2 18:15
     * @param
     * @return
     */
    @RequestMapping(value = "/exportExcel",method = RequestMethod.GET)
    public void exportExcel(HttpServletResponse response,
                            @RequestParam("subjctStartNum") Integer subjctStartNum,
                            @RequestParam("subjctEndNum") Integer subjctEndNum,
                            @RequestParam(value = "startDate",required = false)String startDate,
                            @RequestParam(value = "endDate",required = false)String endDate,
                            @RequestParam(value = "startVoucherNum" ,required = false)Integer startVoucherNum,
                            @RequestParam(value = "endVoucherNum",required = false)Integer endVoucherNum,
                            @RequestParam(value = "voucherId",required = false)Long voucherId) throws  Exception{
        String dateStr = DateConverUtil.dateFormat(DateConverUtil.getNowTime(),DateConverUtil.TimeType.type7.getValue());
        String fileName = dateStr+"凭证汇总表";
        //生成Excel文件
        XSSFWorkbook  workbook = new XSSFWorkbook();
        XSSFSheet sheet = workbook.createSheet(fileName);
        String [] strArray = new String []{"科目编号","科目名称","借方金额","贷方金额"};
        //设置列的宽度
        sheet.setColumnWidth(0, 30*160);
        sheet.setColumnWidth(1, 30*160);
        sheet.setColumnWidth(2, 30*160);
        sheet.setColumnWidth(3, 30*160);
        //合并
        sheet.addMergedRegion(new CellRangeAddress(0,0,0,3));
        sheet.addMergedRegion(new CellRangeAddress(1,1,0,3));
        sheet.addMergedRegion(new CellRangeAddress(2,2,0,1));
        sheet.addMergedRegion(new CellRangeAddress(2,2,2,3));
        CellStyle cellStyle = workbook.createCellStyle();
        cellStyle.setAlignment(CellStyle.ALIGN_CENTER);// 居中
        cellStyle.setWrapText(true);//强制使用POI样式
        //字体大小
        XSSFFont font = workbook.createFont();
        font.setFontName("宋体");
        font.setFontHeightInPoints((short) 14);
        font.setBold(true); //是否加粗
        cellStyle.setFont(font);
        //创建行 （第1行）
        XSSFRow row = sheet.createRow(0);
        row.setHeightInPoints(20);
        XSSFCell cell = row.createCell(0);
        cell.setCellValue("凭证汇总表");
        cell.setCellStyle(cellStyle);

        String name = "(所有)";
        TBaseVoucherDataEntity tBaseVoucherDataEntity = null;
        if(!StringUtils.isEmpty(voucherId)){
            //凭证字
            tBaseVoucherDataEntity =   ResponseUtil.getResult(voucherDataRemoteService.info(voucherId),
                    new TypeReference<ResponseVO<TBaseVoucherDataEntity>>() {});
            name = tBaseVoucherDataEntity.getName();
        }

        String  voucherNum = "";
        if(!StringUtils.isEmpty(startVoucherNum)&&!StringUtils.isEmpty(endVoucherNum)){
            voucherNum = " 号："+startVoucherNum+"-"+endVoucherNum;
        }else if(!StringUtils.isEmpty(startVoucherNum)){
            voucherNum = " 号："+startVoucherNum+"-";
        }

        //附件张数
        Map<String,Object> map = ResponseUtil.getResult( voucherEnclosureData,
                new TypeReference<ResponseVO <Map<String,Object>>>() {});

        //凭证汇总数据列表
       List<VoucherSummaryResultVO>  voucherCountVOList = ResponseUtil.getResult( voucherCountData,
                new TypeReference<ResponseVO <List<VoucherSummaryResultVO>>>() {});

       // logger.info("============"+new Gson().toJson(voucherCountVOList));

        //第2行
        cellStyle = workbook.createCellStyle();
        cellStyle.setAlignment(CellStyle.ALIGN_RIGHT);// 右靠
        cellStyle.setWrapText(true);//强制使用POI样式
        row = sheet.createRow(1);
        // row.setHeightInPoints(20);
        cell = row.createCell(0);
        cell.setCellValue("凭证字："+name+"　"+voucherNum+"#凭证总张数："+map.get("voucherCount")+"张  附件总张数："+map.get("attachmentsCount")+"张");
        font = workbook.createFont();
        font.setFontName("Arial");
        font.setFontHeightInPoints((short) 10);
        cellStyle.setFont(font);
        cell.setCellStyle(cellStyle);

        //第3行
        cellStyle = workbook.createCellStyle();
        cellStyle.setAlignment(CellStyle.ALIGN_RIGHT);// 右靠
        cellStyle.setWrapText(true);//强制使用POI样式
        row = sheet.createRow(2);
        // row.setHeightInPoints(20);
        cell = row.createCell(0);
        cell.setCellValue("金大祥");
        cell = row.createCell(2);
        cell.setCellValue(startDate+" 至 "+endDate);
        font = workbook.createFont();
        font.setFontName("Arial");
        font.setFontHeightInPoints((short) 10);
        cellStyle.setFont(font);
        cell.setCellStyle(cellStyle);

        cellStyle = workbook.createCellStyle();
        row = sheet.createRow(3);
        for (int i = 0;i < strArray.length;i++){
            cell = row.createCell(i);
            cell.setCellValue(strArray[i]);
            font = workbook.createFont();
            font.setBold(true); //是否加粗
            font.setFontName("Courier New");
            font.setFontHeightInPoints((short) 12);
            cellStyle.setFont(font);
            cell.setCellStyle(cellStyle);
        }

        BigDecimal lendAmmountSum = new BigDecimal(0);
        BigDecimal loanAmmountSum = new BigDecimal(0);
        //填补表格数据
        for (int j = 1;j<=voucherCountVOList.size();j++){
            row = sheet.createRow(j+3);
            row.createCell((short) 0).setCellValue(voucherCountVOList.get(j-1).getSubjectCode());
            row.createCell((short) 1).setCellValue(voucherCountVOList.get(j-1).getSubjectName());
            row.createCell((short) 2).setCellValue(voucherCountVOList.get(j-1).getDebitTotal().toString());
            row.createCell((short)3).setCellValue(voucherCountVOList.get(j-1).getCreditTotal().toString());
            int length = voucherCountVOList.get(j-1).getSubjectCode().split("\\.").length;
            if(subjctStartNum==length){
                lendAmmountSum=lendAmmountSum.add(voucherCountVOList.get(j-1).getDebitTotal());
                loanAmmountSum=loanAmmountSum.add(voucherCountVOList.get(j-1).getCreditTotal());
            }
        }
        cellStyle = workbook.createCellStyle();
        font = workbook.createFont();
      //  font.setFontName("Courier New");
        font.setBold(true); //是否加粗
        cellStyle.setFont(font);
        row = sheet.createRow(voucherCountVOList.size()+4);
       // row.createCell((short) 0).setCellValue(voucherCountVOList.get(j-1).getSubjectCode());
        Cell cell1= row.createCell((short) 1);
        cell1.setCellValue("合计");
        Cell cell2 = row.createCell((short) 2);
        cell2.setCellValue(lendAmmountSum.toString());
        Cell cell3 =row.createCell((short)3);
        cell3.setCellValue(loanAmmountSum.toString());
        cell1.setCellStyle(cellStyle);
        cell2.setCellStyle(cellStyle);
        cell3.setCellStyle(cellStyle);
        try {
            response.setContentType("application/vnd.ms-excel;charset=UTF-8");
            response.setHeader("Content-Disposition", "attachment; filename=" +
                    new String(fileName.getBytes("GBK"), "ISO8859-1")+".xlsx");
            workbook.write(response.getOutputStream());
        }catch (Exception e){
            e.printStackTrace();
        }finally {
            if(workbook != null){
                try {
                    workbook.close();
                }catch (IOException ioe){
                    ioe.printStackTrace();
                }
            }
        }
    }


    /**
     * @description
     * @author lxy
     * @eamil lxyyxljava@163.com
     * @date  2018/7/3 19:59
     * @param
     * @return
     */
    @RequestMapping(value = "/initQueryVoucherFormData",method = RequestMethod.POST)
    public Result initQueryVoucherFormData(){
        return  voucherService.initQueryVoucherFormData(0);
    }

    /**
     * @description 获取辅助核算项目
     * @author lxy
     * @eamil lxyyxljava@163.com
     * @date  2018/7/3 16:37
     * @param
     * @return
     */
    @RequestMapping(value = "/typeResult",method = RequestMethod.POST)
    public Result typeResult(@RequestParam("typeId") Integer typeId) throws MyException{
        Result result = voucherService.typeResult(typeId);
        return result;
    }

    /**
     * @description
     * @author lxy 查凭证
     * @eamil lxyyxljava@163.com
     * @date  2018/7/4 10:41
     * @param
     * @return
     */
    @RequestMapping(value = "/queryVoucherByVo", method = RequestMethod.POST)
    public Result queryVoucherByVo(@RequestBody(required = false) VoucherQueryVO voucherQueryVO) {
        logger.info("获取到查看凭证的参数====>>>>{}"+JsonUtil.objToJson(voucherQueryVO));
        if (voucherQueryVO.getPage() == null) {
            voucherQueryVO.setPage(1);
        }
        if (voucherQueryVO.getRows() == null) {
            voucherQueryVO.setRows(100);
        }
        voucherQueryVO.setSobId(UserUtils.getCurrentUser().getUserCurrentOrganId()); //组织ID
//            if (voucherQueryVO.getVoucherStatus()) {
//                voucherQueryVO.setBelongSystem(Constant.ITEM_RELATE_DETAIL_TYPE_VOUCHER);  //机制凭证
//            }
            String voucherNumberStr = voucherQueryVO.getVoucherNumberStr();
            if (!StringUtils.isEmpty(voucherNumberStr)) {
                int length = voucherNumberStr.split("-").length;
                if (length == 1) {
                    voucherQueryVO.setStartVoucherNumber(Integer.valueOf(voucherNumberStr.split("-")[0]));
                }
                if (length == 2) {
                    voucherQueryVO.setStartVoucherNumber(Integer.valueOf(voucherNumberStr.split("-")[0]));
                    voucherQueryVO.setEndVoucherNumber(Integer.valueOf(voucherNumberStr.split("-")[1]));
                }
            }
        Map<String, Object> result = voucherService.queryVoucherByVo(voucherQueryVO);
        voucherMap = result;
        return Result.ok(result);
    }


    /** 查看机制凭证
     * @description:TODO
     * @author tangmi
     * @eamil tangmi6698@163.com
     * @date 2018-07-24 13:34
     * @param
     * @return
     */
    @RequestMapping(value = "/queryMechanismCertificate", method = RequestMethod.POST)
    public Result queryMechanismCertificate(@RequestBody(required = false) VoucherQueryVO voucherQueryVO) {
        logger.info("获取到查看凭证的参数====>>>>{}"+JsonUtil.objToJson(voucherQueryVO));
        if (voucherQueryVO.getPage() == null) {
            voucherQueryVO.setPage(1);
        }
        if (voucherQueryVO.getRows() == null) {
            voucherQueryVO.setRows(100);
        }
        if (voucherQueryVO != null) {
//            if (voucherQueryVO.getVoucherStatus()) {
//                voucherQueryVO.setBelongSystem(Constant.ITEM_RELATE_DETAIL_TYPE_VOUCHER);  //机制凭证
//            }
            String voucherNumberStr = voucherQueryVO.getVoucherNumberStr();
            if (!StringUtils.isEmpty(voucherNumberStr)) {
                int length = voucherNumberStr.split("-").length;
                if (length == 1) {
                    voucherQueryVO.setStartVoucherNumber(Integer.valueOf(voucherNumberStr.split("-")[0]));
                }
                if (length == 2) {
                    voucherQueryVO.setStartVoucherNumber(Integer.valueOf(voucherNumberStr.split("-")[0]));
                    voucherQueryVO.setEndVoucherNumber(Integer.valueOf(voucherNumberStr.split("-")[1]));
                }
            }

        }
        voucherQueryVO.setSobId(UserUtils.getCurrentUser().getUserCurrentOrganId()); //组织ID
        Map<String, Object> result = voucherService.queryMechanismCertificate(voucherQueryVO);
        voucherMap = result;
        return Result.ok(result);
    }

    /**
     * @description: 获取货币列表
     * @author zhengfei
     * @eamil 936864724@qq.com
     * @date 2018-06-23 8:37
     *
     * @return com.htrfid.util.Result
     */
    @RequestMapping(value = "/getCurrencyList",method = RequestMethod.POST)
    public Result getCurrencyList(){
        Result result = voucherService.getCurrencyList();
        return result;
    }


    /**
    * @description: 凭证过账
    * @author zhengfei
    * @eamil 936864724@qq.com
    * @date 2018-07-04 19:34
    * @param
    * @return com.htrfid.util.Result
    */
    @RequestMapping(value = "/voucherPassBill",method = RequestMethod.POST)
    public Result voucherPassBill(@RequestParam("ids[]")Long[] ids) throws MyException {
    	Long sobId = UserUtils.getCurrentUser().getUserCurrentOrganId();
        Result result = voucherService.voucherPassBill(ids,sobId);
        return result;
    }


    /**
     * @description
     * @author lxy 导出凭证列表数据
     * @eamil lxyyxljava@163.com
     * @date  2018/7/6 13:51
     * @param
     * @return
     */
    @RequestMapping(value = "/exportExcelVoucher",method = RequestMethod.GET)
    public void exportExcelVoucher(HttpServletResponse response, HttpServletRequest request){
        //voucherService.exportExcelVoucher(response,voucherQueryVO);
        String  startVoucherDate = request.getParameter("startVoucherDate");
        String  endVoucherDate = request.getParameter("endVoucherDate");
        String [] startVoucherDateArray = startVoucherDate.split("-");
        String [] endVoucherDateArray = endVoucherDate.split("-");
        String  dateName = startVoucherDateArray[0]+"年第"+startVoucherDateArray[1]+"期 至 "+endVoucherDateArray[0]+"年第"+endVoucherDateArray[1]+"期";
        String dateStr = DateConverUtil.dateFormat(DateConverUtil.getNowTime(),DateConverUtil.TimeType.type7.getValue());
        String fileName = dateStr+"凭证列表_"+dateName;
        List<VoucherQueryResultVO> list=voucherService.exportVoucherList(new VoucherQueryVO());
        XSSFWorkbook  workbook = new XSSFWorkbook();
        voucherService.exportExcelVoucherNew(workbook,dateName,list);
        ExportUtil.exportResponse(response,fileName,workbook,ExportUtil.SUFFIX_XLSX);
    }

    /**
    * @description: 整理凭证
    * @author zhengfei
    * @eamil 936864724@qq.com
    * @date 2018-07-05 16:51
    * @param
    * @return com.htrfid.util.Result
    */
    @RequestMapping(value = "/sort",method = RequestMethod.POST)
    public Result sortVoucher(){
    	Long sobId = UserUtils.getCurrentUser().getUserCurrentOrganId();
        return voucherService.sortVoucher(sobId);
    }

    /** 删除单张机制凭证
     * @description:TODO
     * @author tangmi
     * @eamil tangmi6698@163.com
     * @date 2018-07-10 15:10
     * @param voucherId
     * @param sobId
     * @return
     */
    @RequestMapping( value = "/deleteMechanismVoucher",method = RequestMethod.POST)
    public Result deleteMechanismVoucher(@RequestParam("voucherId")Long voucherId,
                                         @RequestParam("sobId")Long sobId){
                sobId = UserUtils.getCurrentUser().getUserCurrentOrganId();
           return voucherService.deleteMechanismVoucher(voucherId,sobId,UserUtils.getCurrentUserId(),UserUtils.getCurrentUser().getUsername());

    }
    /** 批量删除机制凭证
     * @description:TODO
     * @author tangmi
     * @eamil tangmi6698@163.com
     * @date 2018-07-10 15:10
     * @param sobId
     * @param ids 凭证id
     * @return
     */
    @RequestMapping( value = "/deleteMechanismVoucherBatch",method = RequestMethod.POST)
    public Result deleteMechanismVoucherBatch(@RequestParam("ids[]") Long[] ids){
    	Long sobId = UserUtils.getCurrentUser().getUserCurrentOrganId();
    	Long [] newIds = packedArray(ids);
        return voucherService.deleteMechanismVoucherBatch(sobId,newIds,UserUtils.getCurrentUser().getId(),UserUtils.getCurrentUser().getUsername());
    }

    /**
    * @description: 获取机制凭证数据
    * @author zhengfei
    * @eamil 936864724@qq.com
    * @date 2018-07-10 19:11
    * @param key
    * @return java.lang.String
    */
    @RequestMapping( value = "/receiptManager",method = RequestMethod.POST)
    public String receiptManager(@RequestParam("key")String key){
        try {
            return redisUtil.getString(key);
        } catch (Exception e) {
            return JsonUtil.objToJson(Result.error());
        }
    }

    /**
    * @description:获取会计年度区间  凭证最早年度到凭证最大最大年度
    * @author zhengfei
    * @eamil 936864724@qq.com
    * @date 2018-07-12 8:46
    * @param
    * @return com.htrfid.util.Result
    */
    @RequestMapping( value = "/getFinanceYearPeriod",method = RequestMethod.POST)
    public Result getFinanceYearPeriod(){
    	Long organId = UserUtils.getCurrentUser().getUserCurrentOrganId();
        return voucherService.getFinanceYearPeriod(organId);
    }

    /**
     * @description 下载凭证模板
     * @author lxy
     * @eamil lxyyxljava@163.com
     * @date  2018-07-17 19:02
     * @param
     * @return
     */
    @RequestMapping( value = "/downloadVoucherTemplate",method = RequestMethod.GET)
    public void downloadVoucherTemplate(HttpServletResponse response){
        voucherService.downloadVoucherTemplate(response);
    }


    /**
     * @description 导入
     * @author lxy
     * @eamil lxyyxljava@163.com
     * @date  2018-07-18 15:03
     * @param
     * @return
     */
    @RequestMapping( value = "/uploadVoucherByExcel",method = RequestMethod.POST)
    public Result uploadVoucherByExcel(MultipartFile file) throws  MyException{
     return   voucherService.uploadVoucherByExcel(file);
    }


    /**
    * @description: 凭证 上一个 下一个
    * @author zhengfei
    * @eamil 936864724@qq.com
    * @date 2018-07-20 13:06
    * @param sobId, voucherId,
    * type 1: 上一个  2：后一个
    * @return com.htrfid.util.Result
    */
    @RequestMapping( value = "/switchVoucher",method = RequestMethod.POST)
    public Result switchVoucher(@RequestParam("sobId")Long sobId,@RequestParam("voucherId")Long voucherId,@RequestParam("type")Integer type) throws  MyException{
        return  voucherService.switchVoucher(sobId,voucherId,type);
    }


    /**
     * @description:批量凭证审核
     * @author zhengfei
     * @eamil 936864724@qq.com
     * @date 2018-06-25 18:37
     * @param type:1-审核  2-反审核
     * @return com.htrfid.util.Result
     */
    @RequestMapping(value = "/approvalBatch",method = RequestMethod.POST)
    public Result approvalVoucherBatch(@RequestParam("ids[]")Long[] ids,
                                  @RequestParam("type")Integer type){
    	Long [] newIds = packedArray(ids);
        Long sobId = UserUtils.getCurrentUser().getUserCurrentOrganId();
        return voucherService.approvalVoucherBatch(sobId,newIds,type);
    }
    //去除数组的重复数据 不包含零
    private Long[] packedArray(Long[] ids){
        List<Long> list = new ArrayList<>();
        for(int i = 0;i<ids.length ;i++){
            if (ids[i] == 0){
                list.add(ids[i]);
            }else {
                if (!list.contains(ids[i])){
                    list.add(ids[i]);
                }
            }
        }
        return list.toArray(new Long [list.size()]);
    }

    
}

class Car {
    void run()
    {
        System.out.println("car is running"); 
    }
}
class Audi extends Car {
    void run()
    {
        System.out.println("Audi is running safely with 100km");
    }
    public static void main(String args[])
    {
        Car b= new Audi();    //向上转型
        b.run();
    }
}
